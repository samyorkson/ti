###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               19/Dec/2017  10:07:58
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\sam\AppData\Local\Temp\EW7422.tmp
#        ("C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Components\stack\zcl\zcl.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
#        ZCL_GROUPS -lC "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\" -I
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\Source\" -I
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\Source\" -I
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\target\QC_CC2530\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List\zcl.lst
#    Object file        =  
#        C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj\zcl.r51
#
###############################################################################

C:\Users\sam\Documents\GitHub\ti\Z-Stack 3.0.1\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52             
     53          #ifdef BDB_REPORTING
     54            #include "bdb_Reporting.h"
     55          #endif
     56          #include "bdb_interface.h"
     57          
     58          #include "zcl_green_power.h"
     59          
     60             
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          /*** Frame Control ***/
     65          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     66          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     67          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     68          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     69          
     70          /*** Attribute Access Control ***/
     71          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     72          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     73          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     74          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     75          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     76          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     77          
     78          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     79          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     80          
     81          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     82                                                  (zclHdr).fc.manuSpecific == 0          && \
     83                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     84          
     85          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     86          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     87                                                  (cmd) == ZCL_CMD_WRITE                  || \
     88                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     89                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     90                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     91                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     92                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     93                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     95                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     96                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     97          #define  ZCL_VALID_MIN_HEADER_LEN  3
     98          
     99          /*********************************************************************
    100           * CONSTANTS
    101           */
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106          typedef struct zclLibPlugin
    107          {
    108            struct zclLibPlugin *next;
    109            uint16              startClusterID;    // starting cluster ID
    110            uint16              endClusterID;      // ending cluster ID
    111            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    112          } zclLibPlugin_t;
    113          
    114          // Command record list
    115          typedef struct zclCmdRecsList
    116          {
    117            struct zclCmdRecsList *pNext;
    118            uint8                 endpoint;
    119            uint8                 numCommands;
    120            CONST zclCommandRec_t *pCmdRecs;
    121          } zclCmdRecsList_t;
    122          
    123          
    124          // Cluster option list item
    125          typedef struct zclClusterOptionList
    126          {
    127            struct zclClusterOptionList *next;
    128            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    129            uint8                       numOptions; // Number of the following records
    130            zclOptionRec_t              *options;   // option records
    131          } zclClusterOptionList;
    132          
    133          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    134          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    135          
    136          typedef struct
    137          {
    138            zclParseInProfileCmd_t   pfnParseInProfile;
    139            zclProcessInProfileCmd_t pfnProcessInProfile;
    140          } zclCmdItems_t;
    141          
    142          
    143          // List record for external handler for unhandled ZCL Foundation commands/rsps
    144          typedef struct zclExternalFoundationHandlerList
    145          {
    146              struct zclExternalFoundationHandlerList *next;
    147              uint8 zcl_ExternalTaskID;
    148              uint8 zcl_ExternalEndPoint;
    149          } zclExternalFoundationHandlerList;
    150          
    151          
    152          /*********************************************************************
    153           * GLOBAL VARIABLES
    154           */
    155          
    156          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          #endif
    159          
    160          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          // ZCL Sequence number
    164          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          
    171          /*********************************************************************
    172           * EXTERNAL VARIABLES
    173           */
    174          
    175          /*********************************************************************
    176           * EXTERNAL FUNCTIONS
    177           */
    178          
    179          /*********************************************************************
    180           * LOCAL VARIABLES
    181           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    183          
    184          #if defined ( ZCL_DISCOVER )
    185            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
    186          #endif
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    190          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    192          
    193          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    195          #endif
    196          
    197          /*********************************************************************
    198           * LOCAL FUNCTIONS
    199           */
    200          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    201          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    202          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    203          
    204          #if !defined ( ZCL_STANDALONE )
    205          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    206          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    207          #endif // !defined ( ZCL_STANDALONE )
    208          
    209          #if defined ( ZCL_DISCOVER )
    210            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    211          #endif
    212          
    213          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    214          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    215          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    216          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    217          
    218          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    219          
    220          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    221          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    222          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    223          #endif // ZCL_READ || ZCL_WRITE
    224          
    225          #ifdef ZCL_READ
    226          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    227          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    228          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    229                                                   uint8 *pAttrData, uint16 *pDataLen );
    230          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    231          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    232          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    233          #endif // ZCL_READ
    234          
    235          #ifdef ZCL_WRITE
    236          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    237                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    238          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    239                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    240          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    241          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    242          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    243          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    244          #endif // ZCL_WRITE
    245          
    246          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    247          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    248          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    249          #endif
    250          
    251          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    252          
    253          #ifdef ZCL_DISCOVER
    254          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    255          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    256          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    257          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    258          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    259          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    260          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    261          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    262          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    263          #endif // ZCL_DISCOVER
    264          
    265          /*********************************************************************
    266           * Parse Profile Command Function Table
    267           */
    268          

   \                                 In  segment CODE_C, align 1
    269          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   0000         DW 0H
   \   00002A   0000         DW 0H
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   0000         DW 0H
   \   000032   0000         DW 0H
   \   000034   0000         DW 0H
   \   000036   0000         DW 0H
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   0000         DW 0H
   \   000046   0000         DW 0H
   \   000048   0000         DW 0H
   \   00004A   0000         DW 0H
   \   00004C   0000         DW 0H
   \   00004E   0000         DW 0H
   \   000050   0000         DW 0H
   \   000052   0000         DW 0H
   \   000054   0000         DW 0H
   \   000056   0000         DW 0H
   \   000058   0000         DW 0H
   \   00005A   0000         DW 0H
    270          {
    271          #ifdef ZCL_READ
    272            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    273            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    274          #else
    275            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    276            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    277          #endif // ZCL_READ
    278          
    279          #ifdef ZCL_WRITE
    280            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    281            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    282            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    283            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    284          #else
    285            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    286            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    289          #endif // ZCL_WRITE
    290          
    291          #ifdef ZCL_REPORTING_DEVICE
    292              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    293          #else
    294              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    295          #endif
    296          
    297          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    298              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    299          #else
    300              /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    301          #endif
    302          
    303          #ifdef ZCL_REPORTING_DEVICE
    304              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    305          #else
    306              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    307          #endif
    308          
    309          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    310              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    311          #else
    312              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    313          #endif
    314          
    315          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    316              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    317          #else
    318              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    319          #endif
    320          
    321            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    322          
    323          #ifdef ZCL_DISCOVER
    324            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    325            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    326            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    327            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    328            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    329            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    330            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    331            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    332            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    333            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    334            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    335          #else
    336            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    337            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    338            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    346            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    347          #endif // ZCL_DISCOVER
    348          };
    349          
    350          /*********************************************************************
    351           * PUBLIC FUNCTIONS
    352           *********************************************************************/
    353          
    354          #if !defined ( ZCL_STANDALONE )
    355          /*********************************************************************
    356           * @fn          zcl_Init
    357           *
    358           * @brief       Initialization function for the zcl layer.
    359           *
    360           * @param       task_id - ZCL task id
    361           *
    362           * @return      none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    365          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    366            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    367          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    368          #endif
    369          
    370          #if !defined ( ZCL_STANDALONE )
    371          /*********************************************************************
    372           * @fn          zcl_event_loop
    373           *
    374           * @brief       Event Loop Processor for zcl.
    375           *
    376           * @param       task_id - task id
    377           * @param       events - event bitmap
    378           *
    379           * @return      unprocessed events
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    383            uint8 *msgPtr;
    384          
    385            (void)task_id;  // Intentionally unreferenced parameter
    386          
    387            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV       A,R3
   \   00000A   5480         ANL       A,#0x80
   \   00000C   604E         JZ        ??zcl_event_loop_0
    388            {
    389              msgPtr = osal_msg_receive( zcl_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800E         SJMP      ??zcl_event_loop_1
    390              while ( msgPtr != NULL )
    391              {
    392                uint8 dealloc = TRUE;
    393          
    394                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    395                {
    396                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000010                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    397                }
    398                else
    399                {
    400                  uint8 taskID;
    401                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    402          
    403                  if ( taskID != TASK_NO_TASK )
    404                  {
    405                    // send it to another task to process.
    406                    osal_msg_send( taskID, msgPtr );
    407                    dealloc = FALSE;
    408                  }
    409                }
    410          
    411                // Release the memory
    412                if ( dealloc )
    413                {
    414                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    415                }
    416          
    417                // Next
    418                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V2,R2
   \   000028   8B..         MOV       ?V3,R3
   \   00002A   AE..         MOV       R6,?V2
   \   00002C   AF..         MOV       R7,?V3
   \   00002E   EE           MOV       A,R6
   \   00002F   4F           ORL       A,R7
   \   000030   6020         JZ        ??zcl_event_loop_4
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   641A         XRL       A,#0x1a
   \   000039   60D5         JZ        ??zcl_event_loop_2
   \   00003B                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   00003B   EE           MOV       A,R6
   \   00003C   FA           MOV       R2,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000042   E9           MOV       A,R1
   \   000043   F9           MOV       R1,A
   \   000044   74FF         MOV       A,#-0x1
   \   000046   69           XRL       A,R1
   \   000047   60CE         JZ        ??zcl_event_loop_3
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   80CC         SJMP      ??zcl_event_loop_1
    419              }
    420          
    421              // return unprocessed events
    422              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000052   AA..         MOV       R2,?V0
   \   000054   E5..         MOV       A,?V1
   \   000056   6480         XRL       A,#0x80
   \   000058   FB           MOV       R3,A
   \   000059   02....       LJMP      ??zcl_event_loop_5 & 0xFFFF
    423            }
    424          
    425          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    426            if ( events & ZCL_DATABUF_SEND )
   \                     ??zcl_event_loop_0:
   \   00005C   EA           MOV       A,R2
   \   00005D   5420         ANL       A,#0x20
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    427            {
    428              gpNotificationMsg_t *gpNotification = NULL;
    429              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    430              uint8 appId;
    431              uint8 nwkSeqNum;
    432              uint16 nwkAddr;
    433              
    434              gpNotification = gp_GetHeadNotificationMsg( );
   \   000064                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000064   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000067   8A..         MOV       ?V2,R2
   \   000069   8B..         MOV       ?V3,R3
    435              
    436              if ( gpNotification == NULL )
   \   00006B   EA           MOV       A,R2
   \   00006C   45..         ORL       A,?V3
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    437              {
    438                return 0;
    439              }
    440              
    441              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
   \   000073   EA           MOV       A,R2
   \   000074   240D         ADD       A,#0xd
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   35..         ADDC      A,?V3
   \   00007B   F583         MOV       DPH,A
   \   00007D   12....       LCALL     ??Subroutine133_0 & 0xFFFF
    442              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
   \                     ??CrossCallReturnLabel_280:
   \   000080   EE           MOV       A,R6
   \   000081   2402         ADD       A,#0x2
   \   000083   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000086   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   5407         ANL       A,#0x7
   \   00008C   F8           MOV       R0,A
    443              
    444              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    445              // for the GP notification
    446              nwkSeqNum = _NIB.SequenceNum;
   \   00008D   90....       MOV       DPTR,#_NIB
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F5..         MOV       ?V7,A
    447              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   E0           MOVX      A,@DPTR
   \   000098   90....       MOV       DPTR,#_NIB
   \   00009B   F0           MOVX      @DPTR,A
    448              
    449              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    450              nwkAddr = _NIB.nwkDevAddress;
   \   00009C   90....       MOV       DPTR,#_NIB + 20
   \   00009F   12....       LCALL     ?Subroutine76 & 0xFFFF
    451              
    452              if( appId == GP_OPT_APP_ID_GPD )
   \                     ??CrossCallReturnLabel_122:
   \   0000A2   701C         JNZ       ??zcl_event_loop_7
    453              {
    454                osal_memcpy( &_NIB.nwkDevAddress,( pCmdPayloadMsgCurr->pMsg + sizeof( uint16 ) ), sizeof(uint16) );
   \   0000A4                ; Setup parameters for call to function osal_memcpy
   \   0000A4   85..82       MOV       DPL,?V0
   \   0000A7   85..83       MOV       DPH,?V1
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   2402         ADD       A,#0x2
   \   0000AD   12....       LCALL     ?Subroutine60 & 0xFFFF
    455              }
   \                     ??CrossCallReturnLabel_89:
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B3   7C02         MOV       R4,#0x2
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000B9   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000BB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BE   801F         SJMP      ??zcl_event_loop_8
    456              else if( appId == GP_OPT_APP_ID_IEEE )
   \                     ??zcl_event_loop_7:
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   68           XRL       A,R0
   \   0000C3   701F         JNZ       ??zcl_event_loop_9
    457              {
    458                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
   \   0000C5                ; Setup parameters for call to function osal_revmemcpy
   \   0000C5   85..82       MOV       DPL,?V0
   \   0000C8   85..83       MOV       DPH,?V1
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   2408         ADD       A,#0x8
   \   0000CE   12....       LCALL     ?Subroutine60 & 0xFFFF
    459              }
   \                     ??CrossCallReturnLabel_90:
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D4   7C02         MOV       R4,#0x2
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000DA   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000DC   12....       LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
   \                     ??zcl_event_loop_8:
   \   0000DF   7403         MOV       A,#0x3
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
    460              
    461              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    462                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    463                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
   \                     ??zcl_event_loop_9:
   \   0000E4                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0000E4   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0000E7   E9           MOV       A,R1
   \   0000E8   F9           MOV       R1,A
   \   0000E9                ; Setup parameters for call to function zcl_SendCommand
   \   0000E9   85..82       MOV       DPL,?V0
   \   0000EC   85..83       MOV       DPH,?V1
   \   0000EF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F5..         MOV       ?V0,A
   \   0000FA   75..00       MOV       ?V1,#0x0
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000102   E9           MOV       A,R1
   \   000103   F5..         MOV       ?V0,A
   \   000105   78..         MOV       R0,#?V0
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010A   E4           CLR       A
   \   00010B   F5..         MOV       ?V0,A
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000112   75..01       MOV       ?V0,#0x1
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011A   75..00       MOV       ?V0,#0x0
   \   00011D   78..         MOV       R0,#?V0
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000122   75..01       MOV       ?V0,#0x1
   \   000125   78..         MOV       R0,#?V0
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012A   75..00       MOV       ?V0,#0x0
   \   00012D   78..         MOV       R0,#?V0
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000132   7C21         MOV       R4,#0x21
   \   000134   7D00         MOV       R5,#0x0
   \   000136   AA..         MOV       R2,?V2
   \   000138   AB..         MOV       R3,?V3
   \   00013A   79F2         MOV       R1,#-0xe
   \   00013C   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00013F   740B         MOV       A,#0xb
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
    464              
    465              // Restore the NIB nwk sequence number
    466              _NIB.SequenceNum = nwkSeqNum;
   \   000144   E5..         MOV       A,?V7
   \   000146   90....       MOV       DPTR,#_NIB
   \   000149   F0           MOVX      @DPTR,A
    467              
    468              // Restore the NIB nwk address
    469              _NIB.nwkDevAddress = nwkAddr;
   \   00014A   90....       MOV       DPTR,#_NIB + 20
   \   00014D   E5..         MOV       A,?V8
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   A3           INC       DPTR
   \   000151   E5..         MOV       A,?V9
   \   000153   F0           MOVX      @DPTR,A
    470              
    471              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
   \   000154                ; Setup parameters for call to function gp_GetPHeadNotification
   \   000154   12....       LCALL     `??gp_GetPHeadNotification::?relay`; Banked call to: gp_GetPHeadNotification
   \   000157                ; Setup parameters for call to function gp_NotificationMsgClean
   \   000157   12....       LCALL     `??gp_NotificationMsgClean::?relay`; Banked call to: gp_NotificationMsgClean
    472              
    473              if ( gp_GetHeadNotificationMsg ( ) != NULL )
   \   00015A                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   00015A   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   00015D   8B..         MOV       ?V1,R3
   \   00015F   EA           MOV       A,R2
   \   000160   45..         ORL       A,?V1
   \   000162   6017         JZ        ??zcl_event_loop_6
    474              {
    475                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   000164                ; Setup parameters for call to function osal_start_timerEx
   \   000164   90....       MOV       DPTR,#__Constant_32
   \   000167   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00016A   7A20         MOV       R2,#0x20
   \   00016C   7B00         MOV       R3,#0x0
   \   00016E   90....       MOV       DPTR,#zcl_TaskID
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F9           MOV       R1,A
   \   000173   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000176   7404         MOV       A,#0x4
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
    476              }
    477            }
    478          #endif
    479          
    480            // Discard unknown events
    481            return 0;
   \                     ??zcl_event_loop_6:
   \   00017B   7A00         MOV       R2,#0x0
   \   00017D   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   00017F   7F0A         MOV       R7,#0xa
   \   000181   02....       LJMP      ?BANKED_LEAVE_XDATA
    482          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F5..         MOV       ?V4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V5,A
   \   000008   75..00       MOV       ?V6,#0x0
   \   00000B   78..         MOV       R0,#?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   E8           MOV       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006                ; Setup parameters for call to function afFindEndPointDesc
   \   000006   85..82       MOV       DPL,?V0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET
    483          #endif
    484          
    485          #if !defined ( ZCL_STANDALONE )
    486          /*********************************************************************
    487           * @fn      zcl_registerForMsg
    488           *
    489           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    490           *          messages that aren't processed to one task (if a task is
    491           *          registered).
    492           *
    493           * @param   taskId - task Id of the Application where commands will be sent to
    494           *
    495           * @return  TRUE if task registeration successful, FALSE otherwise
    496           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    498          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    499            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine1 & 0xFFFF
    500          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    501          
    502          /*********************************************************************
    503           * @fn      zcl_registerForMsgExt
    504           *
    505           * @brief   This function enables a Task to register to recieve all
    506           *          incoming Foundation Command/Response messages, for a particular
    507           *          End Point, that aren't processed by ZCL.
    508           *
    509           *          NOTE: Any Task registered for a unique end point will take
    510           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    511           *          value.  ie. If task A registers for End Point 1, task B registers
    512           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    513           *          sent to Task A and NOT Task B.
    514           *
    515           * @param   taskId - task Id of the Application where commands will be sent to
    516           * @param   endPointId - end point Id of interest
    517           *
    518           * @return  TRUE if task registeration successful, FALSE otherwise
    519           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    521          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    522            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine1 & 0xFFFF
    523          }
    524          
    525          /*********************************************************************
    526           * @fn      zcl_addExternalFoundationHandler
    527           *
    528           * @brief   This function adds a record to the internal list of external
    529           *          handlers of unhandled incoming Foundation Command/Response messages.
    530           *
    531           * @param   taskId - task Id of the Application where commands will be sent to
    532           * @param   endPointId - end point Id of interest
    533           *
    534           * @return  TRUE if task registeration successful, FALSE otherwise
    535           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    537          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    538            zclExternalFoundationHandlerList *pNewItem;
    539            zclExternalFoundationHandlerList *pLoop;
    540            zclExternalFoundationHandlerList *pLoopPrev;
    541          
    542            // Fill in the new endpoint registrant list
    543            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    544            if ( pNewItem == NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6038         JZ        ??zcl_addExternalFoundationHandler_0
    545            {
    546              return ( false );
    547            }
    548          
    549            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   000014   EF           MOV       A,R7
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
    550            pNewItem->zcl_ExternalTaskID = taskId;
   \   00001D   EE           MOV       A,R6
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ?Subroutine91 & 0xFFFF
    551            pNewItem->next = NULL;
   \                     ??CrossCallReturnLabel_213:
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    552          
    553            // Add to the list
    554            if ( externalEndPointHandlerList == NULL )
   \   00002B   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00002E   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000031   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    555            {
    556              externalEndPointHandlerList = pNewItem;
   \   000033   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000036   EA           MOV       A,R2
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   EB           MOV       A,R3
   \   00003A   8042         SJMP      ??zcl_addExternalFoundationHandler_2
    557            }
    558            else
    559            {
    560              // make sure no one else tried to register for this endpoint
    561              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
    562              pLoopPrev = externalEndPointHandlerList;
    563          
    564              while ( pLoop != NULL )
    565              {
    566                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6F           XRL       A,R7
   \   000047   7007         JNZ       ??zcl_addExternalFoundationHandler_4
    567                {
    568                  zcl_mem_free(pNewItem);
   \   000049                ; Setup parameters for call to function osal_mem_free
   \   000049   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    569                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   00004C   7900         MOV       R1,#0x0
   \   00004E   8031         SJMP      ??zcl_addExternalFoundationHandler_5
    570                }
    571                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   000050   E8           MOV       A,R0
   \   000051   FC           MOV       R4,A
   \   000052   E9           MOV       A,R1
   \   000053   FD           MOV       R5,A
    572                pLoop = pLoop->next;
   \   000054   8882         MOV       DPL,R0
   \   000056   8983         MOV       DPH,R1
   \   000058   12....       LCALL     ??Subroutine124_0 & 0xFFFF
    573              }
   \                     ??CrossCallReturnLabel_218:
   \   00005B   70E1         JNZ       ??zcl_addExternalFoundationHandler_3
    574          
    575              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   00005D   74FF         MOV       A,#-0x1
   \   00005F   6F           XRL       A,R7
   \   000060   700C         JNZ       ??zcl_addExternalFoundationHandler_6
    576              {
    577                // put new registration at the end of the list
    578                pLoopPrev->next = pNewItem;
   \   000062   8C82         MOV       DPL,R4
   \   000064   8D83         MOV       DPH,R5
   \   000066   12....       LCALL     ?Subroutine25 & 0xFFFF
    579                pNewItem->next = NULL;
    580              }
   \                     ??CrossCallReturnLabel_23:
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   8010         SJMP      ??zcl_addExternalFoundationHandler_2
    581              else
    582              {
    583                // put new registration at the front of the list
    584                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   00006E   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000071   12....       LCALL     ??Subroutine135_0 & 0xFFFF
    585                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_293:
   \   000074   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000077   12....       LCALL     ?Subroutine25 & 0xFFFF
    586                pNewItem->next = temp;
    587              }
    588            }
   \                     ??CrossCallReturnLabel_24:
   \   00007A   E8           MOV       A,R0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E9           MOV       A,R1
   \                     ??zcl_addExternalFoundationHandler_2:
   \   00007E   F0           MOVX      @DPTR,A
    589          
    590            return ( true );
   \   00007F   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000081   02....       LJMP      ?Subroutine2 & 0xFFFF
    591          
    592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    593          
    594          /*********************************************************************
    595           * @fn      zcl_getExternalFoundationHandler
    596           *
    597           * @brief   This function retrieves the Task ID of the task registered
    598           *          to received unhandled incoming Foundation Command/Response messages
    599           *          for a particular End Point ID.
    600           *
    601           * @param   pInMsg - recevied ZCL command
    602           *
    603           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    604           *          TASK_NO_TASK.
    605           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    606          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    607          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    608            zclExternalFoundationHandlerList *pLoop;
    609            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
    610          
    611            // make sure no one else tried to register for this endpoint
    612            pLoop = externalEndPointHandlerList;
   \   00000D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000010   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    613          
    614            while ( pLoop != NULL )
    615            {
    616              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    617                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    618              {
    619                return ( pLoop->zcl_ExternalTaskID );
    620              }
    621              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000016   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000019   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   EA           MOV       A,R2
   \   000025   6B           XRL       A,R3
   \   000026   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   6B           XRL       A,R3
   \   00002B   70E5         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    622            }
    623          
    624            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   000037   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   000039   02....       LJMP      ?Subroutine0 & 0xFFFF
    625          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    626          #endif
    627          
    628          #if !defined ( ZCL_STANDALONE )
    629          /*********************************************************************
    630           * @fn      zcl_HandleExternal
    631           *
    632           * @brief
    633           *
    634           * @param   pInMsg - incoming message to process
    635           *
    636           * @return  TRUE
    637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    638          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    639          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    640            zclIncomingMsg_t *pCmd;
    641            uint8 taskID;
    642          
    643            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    644          
    645            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   65..         XRL       A,?V0
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    646            {
    647              return ( TRUE );
    648            }
    649          
    650            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001F                ; Setup parameters for call to function osal_msg_allocate
   \   00001F   7A19         MOV       R2,#0x19
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    651            if ( pCmd != NULL )
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    652            {
    653              // fill in the message
    654              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   7434         MOV       A,#0x34
   \   000033   12....       LCALL     ?Subroutine93 & 0xFFFF
    655              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_244:
   \   000036   A3           INC       DPTR
   \   000037   EA           MOV       A,R2
   \   000038   2402         ADD       A,#0x2
   \   00003A   FC           MOV       R4,A
   \   00003B   E4           CLR       A
   \   00003C   3B           ADDC      A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   7406         MOV       A,#0x6
   \   000040   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    656              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00004A   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   EC           MOV       A,R4
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   ED           MOV       A,R5
   \   00005D   12....       LCALL     ?Subroutine18 & 0xFFFF
    657              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_10:
   \   000060   A3           INC       DPTR
   \   000061   EA           MOV       A,R2
   \   000062   240A         ADD       A,#0xa
   \   000064   FC           MOV       R4,A
   \   000065   E4           CLR       A
   \   000066   3B           ADDC      A,R3
   \   000067   FD           MOV       R5,A
   \   000068   740C         MOV       A,#0xc
   \   00006A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    658              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000074   C8           XCH       A,R0
   \   000075   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000078   38           ADDC      A,R0
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   C0E0         PUSH      A
   \   00007E   EA           MOV       A,R2
   \   00007F   2416         ADD       A,#0x16
   \   000081   F582         MOV       DPL,A
   \   000083   E4           CLR       A
   \   000084   3B           ADDC      A,R3
   \   000085   F583         MOV       DPH,A
   \   000087   D0E0         POP       A
   \   000089   F0           MOVX      @DPTR,A
    659              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00008A   EE           MOV       A,R6
   \   00008B   240C         ADD       A,#0xc
   \   00008D   F8           MOV       R0,A
   \   00008E   E4           CLR       A
   \   00008F   3F           ADDC      A,R7
   \   000090   F9           MOV       R1,A
   \   000091   8882         MOV       DPL,R0
   \   000093   8983         MOV       DPH,R1
   \   000095   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000098   EA           MOV       A,R2
   \   000099   2417         ADD       A,#0x17
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   3B           ADDC      A,R3
   \   00009F   F583         MOV       DPH,A
   \   0000A1   EC           MOV       A,R4
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   ED           MOV       A,R5
   \   0000A5   F0           MOVX      @DPTR,A
    660              
    661          #ifdef BDB_REPORTING
    662              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
    663              {
    664                bdb_ProcessInConfigReportCmd(pCmd);
    665                return TRUE;          
    666              }
    667              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
    668              {
    669                bdb_ProcessInReadReportCfgCmd(pCmd);
    670                return TRUE;
    671              }
    672          #endif
    673              // Application will free the attrCmd buffer
    674              pInMsg->attrCmd = NULL;
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   8983         MOV       DPH,R1
   \   0000AA   E4           CLR       A
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   F0           MOVX      @DPTR,A
    675          
    676              /* send message through task message */
    677              osal_msg_send( taskID, (uint8 *)pCmd );
   \   0000AE                ; Setup parameters for call to function osal_msg_send
   \   0000AE   A9..         MOV       R1,?V0
   \   0000B0   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    678            }
    679          
    680            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000B3   7901         MOV       R1,#0x1
   \   0000B5   02....       LJMP      ?Subroutine3 & 0xFFFF
    681          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine136_0
   \   000002                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine137_0
   \   000002                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL     ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    682          #endif
    683          
    684          
    685          /*********************************************************************
    686           * @fn          zcl_getRawAFMsg
    687           *
    688           * @brief       Call to get original unprocessed AF message
    689           *              (not parsed by ZCL).
    690           *
    691           *   NOTE:  This function can only be called during a ZCL callback function
    692           *          and the calling function must NOT change any data in the message.
    693           *
    694           * @param       none
    695           *
    696           * @return      pointer to original AF message, NULL if not processing
    697           *              AF message.
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    700          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    701            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00000A   80..         SJMP      ?Subroutine0
    702          }
    703          
    704          /*********************************************************************
    705           * @fn          zcl_getParsedTransSeqNum
    706           *
    707           * @brief       Call to the get the transaction sequence number from
    708           *              the incoming message.
    709           *
    710           *   NOTE:  This function can only be called during a ZCL callback function
    711           *          and the calling function must NOT change any data in the message.
    712           *
    713           * @param       none
    714           *
    715           * @return      transaction sequence number.
    716           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    717          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    718          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    719            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0
    720          }
    721          
    722          /*********************************************************************
    723           * @fn          zcl_registerPlugin
    724           *
    725           * @brief       Add a Cluster Library handler
    726           *
    727           * @param       startClusterID - starting cluster ID
    728           * @param       endClusterID - ending cluster ID
    729           * @param       pfnHdlr - function pointer to incoming message handler
    730           *
    731           * @return      ZSuccess if OK
    732           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    734                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    736            zclLibPlugin_t *pNewItem;
    737            zclLibPlugin_t *pLoop;
    738          
    739            // Fill in the new profile list
    740            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    741            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerPlugin_0
    742            {
    743              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   803F         SJMP      ??CrossCallReturnLabel_14
    744            }
    745          
    746            // Fill in the plugin record.
    747            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine24 & 0xFFFF
    748            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_20:
   \   00002E   A3           INC       DPTR
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   12....       LCALL     ?Subroutine13 & 0xFFFF
    749            pNewItem->endClusterID = endClusterID;
    750            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \                     ??CrossCallReturnLabel_4:
   \   000036   740C         MOV       A,#0xc
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ?Subroutine26 & 0xFFFF
    751          
    752            // Find spot in list
    753            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_350:
   \   000043   90....       MOV       DPTR,#plugins
   \   000046   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000049   90....       MOV       DPTR,#plugins
   \   00004C   6012         JZ        ??zcl_registerPlugin_1
    754            {
    755              plugins = pNewItem;
    756            }
    757            else
    758            {
    759              // Look for end of list
    760              pLoop = plugins;
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FC           MOV       R4,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   8003         SJMP      ??zcl_registerPlugin_2
    761              while ( pLoop->next != NULL )
    762              {
    763                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   000054   EA           MOV       A,R2
   \   000055   FC           MOV       R4,A
   \   000056   EB           MOV       A,R3
    764              }
   \                     ??zcl_registerPlugin_2:
   \   000057   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00005A   70F8         JNZ       ??zcl_registerPlugin_3
    765          
    766              // Put new item at end of list
    767              pLoop->next = pNewItem;
   \   00005C   8C82         MOV       DPL,R4
   \   00005E   8D83         MOV       DPH,R5
    768            }
   \                     ??zcl_registerPlugin_1:
   \   000060   12....       LCALL     ?Subroutine20 & 0xFFFF
    769          
    770            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   000063   02....       LJMP      ?Subroutine3 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E5..         MOV       A,?V1
   \   000002   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000005   A3           INC       DPTR
   \   000006   EE           MOV       A,R6
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EF           MOV       A,R7
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   FD           MOV       R5,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine114_0
   \   000005                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine142_0
   \   000002                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    772          
    773          #ifdef ZCL_DISCOVER
    774          /*********************************************************************
    775           * @fn          zcl_registerCmdList
    776           *
    777           * @brief       Register a Command List with ZCL Foundation
    778           *
    779           * @param       endpoint - endpoint the attribute list belongs to
    780           * @param       newCmdList - array of command records
    781           *
    782           * @return      ZSuccess if OK
    783           */
    784          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
    785          {
    786            zclCmdRecsList_t *pNewItem;
    787            zclCmdRecsList_t *pLoop;
    788          
    789            // Fill in the new profile list
    790            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
    791            if ( pNewItem == NULL )
    792            {
    793              return (ZMemError);
    794            }
    795          
    796            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
    797            pNewItem->endpoint = endpoint;
    798            pNewItem->numCommands = cmdListSize;
    799            pNewItem->pCmdRecs = newCmdList;
    800          
    801            // Find spot in list
    802            if ( gpCmdList == NULL )
    803            {
    804              gpCmdList = pNewItem;
    805            }
    806            else
    807            {
    808              // Look for end of list
    809              pLoop = gpCmdList;
    810              while ( pLoop->pNext != NULL )
    811              {
    812                pLoop = pLoop->pNext;
    813              }
    814          
    815              // Put new item at end of list
    816              pLoop->pNext = pNewItem;
    817            }
    818          
    819            return ( ZSuccess );
    820          }
    821          #endif  // ZCL_DISCOVER
    822          
    823          /*********************************************************************
    824           * @fn          zcl_registerAttrList
    825           *
    826           * @brief       Register an Attribute List with ZCL Foundation
    827           *
    828           * @param       endpoint - endpoint the attribute list belongs to
    829           * @param       numAttr - number of attributes in list
    830           * @param       newAttrList - array of Attribute records.
    831           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    832           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    833           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    834           *
    835           * @return      ZSuccess if OK
    836           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    837          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    838          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    839            zclAttrRecsList *pNewItem;
    840            zclAttrRecsList *pLoop;
    841          
    842            // Fill in the new profile list
    843            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    844            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerAttrList_0
    845            {
    846              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8034         SJMP      ??CrossCallReturnLabel_15
    847            }
    848          
    849            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000024   12....       LCALL     ?Subroutine11 & 0xFFFF
    850            pNewItem->endpoint = endpoint;
    851            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_2:
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ?Subroutine15 & 0xFFFF
    852            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_8:
   \   00002D   E5..         MOV       A,?V1
   \   00002F   12....       LCALL     ?Subroutine15 & 0xFFFF
    853            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_9:
   \   000032   A3           INC       DPTR
   \   000033   EE           MOV       A,R6
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EF           MOV       A,R7
   \   000037   F0           MOVX      @DPTR,A
    854          
    855            // Find spot in list
    856            if ( attrList == NULL )
   \   000038   90....       MOV       DPTR,#attrList
   \   00003B   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00003E   90....       MOV       DPTR,#attrList
   \   000041   6012         JZ        ??zcl_registerAttrList_1
    857            {
    858              attrList = pNewItem;
    859            }
    860            else
    861            {
    862              // Look for end of list
    863              pLoop = attrList;
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FC           MOV       R4,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   8003         SJMP      ??zcl_registerAttrList_2
    864              while ( pLoop->next != NULL )
    865              {
    866                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000049   EA           MOV       A,R2
   \   00004A   FC           MOV       R4,A
   \   00004B   EB           MOV       A,R3
    867              }
   \                     ??zcl_registerAttrList_2:
   \   00004C   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00004F   70F8         JNZ       ??zcl_registerAttrList_3
    868          
    869              // Put new item at end of list
    870              pLoop->next = pNewItem;
   \   000051   8C82         MOV       DPL,R4
   \   000053   8D83         MOV       DPH,R5
    871            }
   \                     ??zcl_registerAttrList_1:
   \   000055   12....       LCALL     ?Subroutine20 & 0xFFFF
    872          
    873            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_15:
   \   000058   80..         SJMP      ?Subroutine3
    874          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00000A   A3           INC       DPTR
   \   00000B   E5..         MOV       A,?V0
   \   00000D   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000010   22           RET
    875          
    876          /*********************************************************************
    877           * @fn          zcl_registerClusterOptionList
    878           *
    879           * @brief       Register a Cluster Option List with ZCL Foundation
    880           *
    881           * @param       endpoint - endpoint the option list belongs to
    882           * @param       numOption - number of options in list
    883           * @param       optionList - array of cluster option records.
    884           *
    885           *              NOTE: This API should be called to enable 'Application
    886           *                    Link Key' security and/or 'APS ACK' for a specific
    887           *                    Cluster. The 'Application Link Key' is discarded
    888           *                    if security isn't enabled on the device.
    889           *                    The default behavior is 'Network Key' when security
    890           *                    is enabled and no 'APS ACK' for the ZCL messages.
    891           *
    892           * @return      ZSuccess if OK
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    895          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    896            zclClusterOptionList *pNewItem;
    897            zclClusterOptionList *pLoop;
    898          
    899            // Fill in the new profile list
    900            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    901            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerClusterOptionList_0
    902            {
    903              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8026         SJMP      ??CrossCallReturnLabel_16
    904            }
    905          
    906            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000024   12....       LCALL     ?Subroutine11 & 0xFFFF
    907            pNewItem->endpoint = endpoint;
    908            pNewItem->numOptions = numOption;
   \                     ??CrossCallReturnLabel_3:
   \   000027   12....       LCALL     ?Subroutine13 & 0xFFFF
    909            pNewItem->options = optionList;
    910          
    911            // Find spot in list
    912            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_5:
   \   00002A   90....       MOV       DPTR,#clusterOptionList
   \   00002D   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000030   90....       MOV       DPTR,#clusterOptionList
   \   000033   6012         JZ        ??zcl_registerClusterOptionList_1
    913            {
    914              clusterOptionList = pNewItem;
    915            }
    916            else
    917            {
    918              // Look for end of list
    919              pLoop = clusterOptionList;
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FC           MOV       R4,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   8003         SJMP      ??zcl_registerClusterOptionList_2
    920              while ( pLoop->next != NULL )
    921              {
    922                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   00003B   EA           MOV       A,R2
   \   00003C   FC           MOV       R4,A
   \   00003D   EB           MOV       A,R3
    923              }
   \                     ??zcl_registerClusterOptionList_2:
   \   00003E   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000041   70F8         JNZ       ??zcl_registerClusterOptionList_3
    924          
    925              // Put new item at end of list
    926              pLoop->next = pNewItem;
   \   000043   8C82         MOV       DPL,R4
   \   000045   8D83         MOV       DPH,R5
    927            }
   \                     ??zcl_registerClusterOptionList_1:
   \   000047   12....       LCALL     ?Subroutine20 & 0xFFFF
    928          
    929            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_16:
   \   00004A                REQUIRE ?Subroutine3
   \   00004A                ; // Fall through to label ?Subroutine3
    930          }
    931          
    932          /*********************************************************************
    933           * @fn          zcl_registerValidateAttrData
    934           *
    935           * @brief       Add a validation function for attribute data
    936           *
    937           * @param       pfnValidateAttrData - function pointer to validate routine
    938           *
    939           * @return      ZSuccess if OK
    940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    941          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    942          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    943            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL     ??Subroutine142_0 & 0xFFFF
    944          
    945            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_346:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   02....       LJMP      ?Subroutine0 & 0xFFFF
    946          }
    947          
    948          /*********************************************************************
    949           * @fn          zcl_registerReadWriteCB
    950           *
    951           * @brief       Register the application's callback function to read/write
    952           *              attribute data, and authorize read/write operation.
    953           *
    954           *              Note: The pfnReadWriteCB callback function is only required
    955           *                    when the attribute data format is unknown to ZCL. The
    956           *                    callback function gets called when the pointer 'dataPtr'
    957           *                    to the attribute value is NULL in the attribute database
    958           *                    registered with the ZCL.
    959           *
    960           *              Note: The pfnAuthorizeCB callback function is only required
    961           *                    when the Read/Write operation on an attribute requires
    962           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
    963           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
    964           *
    965           * @param       endpoint - application's endpoint
    966           * @param       pfnReadWriteCB - function pointer to read/write routine
    967           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
    968           *
    969           * @return      ZSuccess if successful. ZFailure, otherwise.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
    972                                             zclAuthorizeCB_t pfnAuthorizeCB )
    973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    974            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   A8..         MOV       R0,?V4
   \   000016   A9..         MOV       R1,?V5
    975          
    976            if ( pRec != NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6019         JZ        ??zcl_registerReadWriteCB_0
    977            {
    978              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   12....       LCALL     ?Subroutine18 & 0xFFFF
    979              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_11:
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V1
   \   000030   F0           MOVX      @DPTR,A
    980          
    981              return ( ZSuccess );
   \   000031   7900         MOV       R1,#0x0
   \   000033   8002         SJMP      ??zcl_registerReadWriteCB_1
    982            }
    983          
    984            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   000035   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   000037                REQUIRE ?Subroutine4
   \   000037                ; // Fall through to label ?Subroutine4
    985          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    986          
    987          /*********************************************************************
    988           * @fn      zcl_DeviceOperational
    989           *
    990           * @brief   Used to see whether or not the device can send or respond
    991           *          to application level commands.
    992           *
    993           * @param   srcEP - source endpoint
    994           * @param   clusterID - cluster ID
    995           * @param   frameType - command type
    996           * @param   cmd - command ID
    997           *
    998           * @return  TRUE if device is operational, FALSE otherwise
    999           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1000          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
   1001                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1002          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FF           MOV       R7,A
   1003            zclAttrRec_t attrRec;
   1004            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   1005          
   1006            (void)profileID;  // Intentionally unreferenced parameter
   1007          
   1008            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1009            // cannot send or respond to application level commands, other than commands
   1010            // to read or write attributes. Note that the Identify cluster cannot be
   1011            // disabled, and remains functional regardless of this setting.
   1012            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000017   EF           MOV       A,R7
   \   000018   7006         JNZ       ??zcl_DeviceOperational_0
   \   00001A   ED           MOV       A,R5
   \   00001B   C3           CLR       C
   \   00001C   9406         SUBB      A,#0x6
   \   00001E   4050         JC        ??zcl_DeviceOperational_1
   1013            {
   1014              return ( TRUE );
   1015            }
   1016          
   1017            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV       A,#0x3
   \   000022   6A           XRL       A,R2
   \   000023   4B           ORL       A,R3
   \   000024   604A         JZ        ??zcl_DeviceOperational_1
   1018            {
   1019              return ( TRUE );
   1020            }
   1021          
   1022            // Is device enabled?
   1023            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1024                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000026                ; Setup parameters for call to function zclFindAttrRec
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP100_8
   \   00002B   88..         MOV       ?V2,R0
   \   00002D   89..         MOV       ?V3,R1
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7C12         MOV       R4,#0x12
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   601C         JZ        ??zcl_DeviceOperational_2
   1025            {
   1026          #ifdef ZCL_READ
   1027              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000049                ; Setup parameters for call to function zclReadAttrData
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   F5..         MOV       ?V3,A
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?XSTACK_DISP102_8
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   1028          #endif
   1029            }
   1030          
   1031            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6401         XRL       A,#0x1
   \   00006E   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   000070   7901         MOV       R1,#0x1
   \   000072   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   000074   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000076   7409         MOV       A,#0x9
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   02....       LJMP      ?Subroutine3 & 0xFFFF
   1032          }
   1033          
   1034          /*********************************************************************
   1035           * @fn      zcl_SendCommand
   1036           *
   1037           * @brief   Used to send Profile and Cluster Specific Command messages.
   1038           *
   1039           *          NOTE: The calling application is responsible for incrementing
   1040           *                the Sequence Number.
   1041           *
   1042           * @param   srcEp - source endpoint
   1043           * @param   destAddr - destination address
   1044           * @param   clusterID - cluster ID
   1045           * @param   cmd - command ID
   1046           * @param   specific - whether the command is Cluster Specific
   1047           * @param   direction - client/server direction of the command
   1048           * @param   disableDefaultRsp - disable Default Response command
   1049           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1050           * @param   seqNumber - identification number for the transaction
   1051           * @param   cmdFormatLen - length of the command to be sent
   1052           * @param   cmdFormat - command to be sent
   1053           *
   1054           * @return  ZSuccess if OK
   1055           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1056          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1057                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1058                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1059                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V10,R1
   \   00000C   8A..         MOV       ?V14,R2
   \   00000E   8B..         MOV       ?V15,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
   1061            endPointDesc_t *epDesc;
   1062            zclFrameHdr_t hdr;
   1063            uint8 *msgBuf;
   1064            uint16 msgLen;
   1065            uint8 *pBuf;
   1066            uint8 options;
   1067            ZStatus_t status;
   1068          
   1069            epDesc = afFindEndPointDesc( srcEP );
   \   000014                ; Setup parameters for call to function afFindEndPointDesc
   \   000014   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000017   8A..         MOV       ?V12,R2
   \   000019   8B..         MOV       ?V13,R3
   1070            if ( epDesc == NULL )
   \   00001B   EA           MOV       A,R2
   \   00001C   45..         ORL       A,?V13
   \   00001E   7005         JNZ       ??zcl_SendCommand_0
   1071            {
   1072              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   000020   7902         MOV       R1,#0x2
   \   000022   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1073            }
   1074          
   1075          #if defined ( INTER_PAN )
   1076            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   1077            {
   1078              options = AF_TX_OPTIONS_NONE;
   1079            }
   1080            else
   1081          #endif
   1082            {
   1083              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_0:
   \   000025                ; Setup parameters for call to function zclGetClusterOption
   \   000025   AA..         MOV       R2,?V0
   \   000027   AB..         MOV       R3,?V1
   \   000029   A9..         MOV       R1,?V10
   \   00002B   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00002E   E9           MOV       A,R1
   \   00002F   F5..         MOV       ?V7,A
   1084          
   1085              // The cluster might not have been defined to use security but if this message
   1086              // is in response to another message that was using APS security this message
   1087              // will be sent with APS security
   1088              if ( !( options & AF_EN_SECURITY ) )
   \   000031   A2E6         MOV       C,0xE0 /* A   */.6
   \   000033   401C         JC        ??zcl_SendCommand_2
   1089              {
   1090                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000035   90....       MOV       DPTR,#rawAFMsg
   \   000038   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1091          
   1092                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \                     ??CrossCallReturnLabel_220:
   \   00003B   6014         JZ        ??zcl_SendCommand_2
   \   00003D   E8           MOV       A,R0
   \   00003E   2419         ADD       A,#0x19
   \   000040   F582         MOV       DPL,A
   \   000042   E4           CLR       A
   \   000043   39           ADDC      A,R1
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7006         JNZ       ??zcl_SendCommand_2
   1093                {
   1094                  options |= AF_EN_SECURITY;
   \   00004B   E5..         MOV       A,?V7
   \   00004D   D2E6         SETB      0xE0 /* A   */.6
   \   00004F   F5..         MOV       ?V7,A
   1095                }
   1096              }
   1097            }
   1098          
   1099            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_2:
   \   000051                ; Setup parameters for call to function osal_memset
   \   000051   7C06         MOV       R4,#0x6
   \   000053   7D00         MOV       R5,#0x0
   \   000055   7900         MOV       R1,#0x0
   \   000057   AA..         MOV       R2,?XSP + 0
   \   000059   AB..         MOV       R3,?XSP + 1
   \   00005B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1100          
   1101            // Not Profile wide command (like READ, WRITE)
   1102            if ( specific )
   \   00005E   741F         MOV       A,#0x1f
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000066   6009         JZ        ??zcl_SendCommand_3
   1103            {
   1104              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000068   E0           MOVX      A,@DPTR
   \   000069   54FC         ANL       A,#0xfc
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   4401         ORL       A,#0x1
   \   00006F   8003         SJMP      ??zcl_SendCommand_4
   1105            }
   1106            else
   1107            {
   1108              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_3:
   \   000071   E0           MOVX      A,@DPTR
   \   000072   54FC         ANL       A,#0xfc
   1109            }
   \                     ??zcl_SendCommand_4:
   \   000074   12....       LCALL     ?Subroutine19 & 0xFFFF
   1110          
   1111            if ( ( epDesc->simpleDesc == NULL ) ||
   1112                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1113                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??CrossCallReturnLabel_12:
   \   000077   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00007A   602B         JZ        ??zcl_SendCommand_5
   \   00007C   741E         MOV       A,#0x1e
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FE           MOV       R6,A
   \   000083                ; Setup parameters for call to function zcl_DeviceOperational
   \   000083   8882         MOV       DPL,R0
   \   000085   8983         MOV       DPH,R1
   \   000087   A3           INC       DPTR
   \   000088   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008B   EE           MOV       A,R6
   \   00008C   FD           MOV       R5,A
   \   00008D   7402         MOV       A,#0x2
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   E0           MOVX      A,@DPTR
   \   000093   5403         ANL       A,#0x3
   \   000095   FC           MOV       R4,A
   \   000096   AA..         MOV       R2,?V0
   \   000098   AB..         MOV       R3,?V1
   \   00009A   A9..         MOV       R1,?V10
   \   00009C   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A4   E9           MOV       A,R1
   \   0000A5   7005         JNZ       ??zcl_SendCommand_6
   1114            {
   1115              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_5:
   \   0000A7   7901         MOV       R1,#0x1
   \   0000A9   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1116            }
   \                     ??zcl_SendCommand_6:
   \   0000AC   7422         MOV       A,#0x22
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1117          
   1118            // Fill in the Maufacturer Code
   1119            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_221:
   \   0000B4   6012         JZ        ??CrossCallReturnLabel_200
   1120            {
   1121              hdr.fc.manuSpecific = 1;
   \   0000B6   85..82       MOV       DPL,?XSP + 0
   \   0000B9   85..83       MOV       DPH,?XSP + 1
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   4404         ORL       A,#0x4
   \   0000BF   F0           MOVX      @DPTR,A
   1122              hdr.manuCode = manuCode;
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   1123            }
   1124          
   1125            // Set the Command Direction
   1126            if ( direction )
   \                     ??CrossCallReturnLabel_200:
   \   0000C8   7420         MOV       A,#0x20
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0000D0   6005         JZ        ??zcl_SendCommand_7
   1127            {
   1128              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   4408         ORL       A,#0x8
   \   0000D5   8003         SJMP      ??zcl_SendCommand_8
   1129            }
   1130            else
   1131            {
   1132              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_7:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_8:
   \   0000DA   F0           MOVX      @DPTR,A
   1133            }
   1134          
   1135            // Set the Disable Default Response field
   1136            if ( disableDefaultRsp )
   \   0000DB   7421         MOV       A,#0x21
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000E3   6005         JZ        ??zcl_SendCommand_9
   1137            {
   1138              hdr.fc.disableDefaultRsp = 1;
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   4410         ORL       A,#0x10
   \   0000E8   8003         SJMP      ??zcl_SendCommand_10
   1139            }
   1140            else
   1141            {
   1142              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_9:
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_10:
   \   0000ED   F0           MOVX      @DPTR,A
   1143            }
   1144          
   1145            // Fill in the Transaction Sequence Number
   1146            hdr.transSeqNum = seqNum;
   \   0000EE   7424         MOV       A,#0x24
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   C0E0         PUSH      A
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   D0E0         POP       A
   \   0000FD   F0           MOVX      @DPTR,A
   1147          
   1148            // Fill in the command
   1149            hdr.commandID = cmd;
   \   0000FE   7405         MOV       A,#0x5
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   EE           MOV       A,R6
   \   000104   F0           MOVX      @DPTR,A
   1150          
   1151            // calculate the needed buffer size
   1152            msgLen = zclCalcHdrSize( &hdr );
   \   000105   7803         MOV       R0,#0x3
   \   000107   85..82       MOV       DPL,?XSP + 0
   \   00010A   85..83       MOV       DPH,?XSP + 1
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   5404         ANL       A,#0x4
   \   000110   6002         JZ        ??zcl_SendCommand_11
   \   000112   7805         MOV       R0,#0x5
   \                     ??zcl_SendCommand_11:
   \   000114   7425         MOV       A,#0x25
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   12....       LCALL     ?Subroutine76 & 0xFFFF
   1153            msgLen += cmdFormatLen;
   \                     ??CrossCallReturnLabel_123:
   \   00011C   25..         ADD       A,?V8
   \   00011E   FE           MOV       R6,A
   \   00011F   E4           CLR       A
   \   000120   35..         ADDC      A,?V9
   \   000122   FF           MOV       R7,A
   1154          
   1155            // Allocate the buffer needed
   1156            msgBuf = zcl_mem_alloc( msgLen );
   \   000123                ; Setup parameters for call to function osal_mem_alloc
   \   000123   EE           MOV       A,R6
   \   000124   FA           MOV       R2,A
   \   000125   EF           MOV       A,R7
   \   000126   FB           MOV       R3,A
   \   000127   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00012A   8A..         MOV       ?V2,R2
   \   00012C   8B..         MOV       ?V3,R3
   1157            if ( msgBuf != NULL )
   \   00012E   EA           MOV       A,R2
   \   00012F   45..         ORL       A,?V3
   \   000131   6065         JZ        ??zcl_SendCommand_12
   1158            {
   1159              // Fill in the ZCL Header
   1160              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   000133                ; Setup parameters for call to function zclBuildHdr
   \   000133   AC..         MOV       R4,?V2
   \   000135   AD..         MOV       R5,?V3
   \   000137   AA..         MOV       R2,?XSP + 0
   \   000139   AB..         MOV       R3,?XSP + 1
   \   00013B   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1161          
   1162              // Fill in the command frame
   1163              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   00013E                ; Setup parameters for call to function osal_memcpy
   \   00013E   7427         MOV       A,#0x27
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000149   AC..         MOV       R4,?V8
   \   00014B   AD..         MOV       R5,?V9
   \   00014D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000150   7403         MOV       A,#0x3
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
   1164          
   1165              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1166                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );
   \   000155                ; Setup parameters for call to function AF_DataRequest
   \   000155   75..1E       MOV       ?V4,#0x1e
   \   000158   78..         MOV       R0,#?V4
   \   00015A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015D   75....       MOV       ?V4,#zcl_TransID & 0xff
   \   000160   75....       MOV       ?V5,#(zcl_TransID >> 8) & 0xff
   \   000163   78..         MOV       R0,#?V4
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000168   78..         MOV       R0,#?V2
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   8E..         MOV       ?V4,R6
   \   00016F   8F..         MOV       ?V5,R7
   \   000171   78..         MOV       R0,#?V4
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000176   78..         MOV       R0,#?V0
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017B   A9..         MOV       R1,?V7
   \   00017D   AC..         MOV       R4,?V12
   \   00017F   AD..         MOV       R5,?V13
   \   000181   AA..         MOV       R2,?V14
   \   000183   AB..         MOV       R3,?V15
   \   000185   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000188   7409         MOV       A,#0x9
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   E9           MOV       A,R1
   \   00018E   FE           MOV       R6,A
   1167              zcl_mem_free ( msgBuf );
   \   00018F                ; Setup parameters for call to function osal_mem_free
   \   00018F   AA..         MOV       R2,?V2
   \   000191   AB..         MOV       R3,?V3
   \   000193   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000196   8002         SJMP      ??zcl_SendCommand_13
   1168            }
   1169            else
   1170            {
   1171              status = ZMemError;
   \                     ??zcl_SendCommand_12:
   \   000198   7E10         MOV       R6,#0x10
   1172            }
   1173          
   1174            return ( status );
   \                     ??zcl_SendCommand_13:
   \   00019A   EE           MOV       A,R6
   \   00019B   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   00019C   7406         MOV       A,#0x6
   \   00019E                REQUIRE ?Subroutine5
   \   00019E                ; // Fall through to label ?Subroutine5
   1175          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine118_0
   \   000001                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine124_0
   \   000001                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   75..00       MOV       ?V6,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V12
   \   000004   85..83       MOV       DPH,?V13
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1176          
   1177          #ifdef ZCL_READ
   1178          /*********************************************************************
   1179           * @fn      zcl_SendRead
   1180           *
   1181           * @brief   Send a Read command
   1182           *
   1183           * @param   srcEP - Application's endpoint
   1184           * @param   dstAddr - destination address
   1185           * @param   clusterID - cluster ID
   1186           * @param   readCmd - read command to be sent
   1187           * @param   direction - direction of the command
   1188           * @param   seqNum - transaction sequence number
   1189           *
   1190           * @return  ZSuccess if OK
   1191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1193                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1194                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1195          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine45 & 0xFFFF
   1196            uint16 dataLen;
   1197            uint8 *buf;
   1198            uint8 *pBuf;
   1199            ZStatus_t status;
   1200          
   1201            dataLen = readCmd->numAttr * 2; // Attribute ID
   \                     ??CrossCallReturnLabel_61:
   \   000017   25E0         ADD       A,0xE0 /* A   */
   \   000019   F5..         MOV       ?V6,A
   \   00001B   E4           CLR       A
   \   00001C   33           RLC       A
   \   00001D   F5..         MOV       ?V7,A
   1202          
   1203            buf = zcl_mem_alloc( dataLen );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   AA..         MOV       R2,?V6
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV       ?V0,R2
   \   000027   8B..         MOV       ?V1,R3
   1204            if ( buf != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   45..         ORL       A,?V1
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1205            {
   1206              uint8 i;
   1207          
   1208              // Load the buffer - serially
   1209              pBuf = buf;
   \   000031   A8..         MOV       R0,?V0
   \   000033   A9..         MOV       R1,?V1
   1210              for (i = 0; i < readCmd->numAttr; i++)
   \   000035   7C00         MOV       R4,#0x0
   \   000037   801D         SJMP      ??zcl_SendRead_1
   1211              {
   1212                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   000039   EC           MOV       A,R4
   \   00003A   25E0         ADD       A,0xE0 /* A   */
   \   00003C   FA           MOV       R2,A
   \   00003D   E4           CLR       A
   \   00003E   33           RLC       A
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     ?Subroutine87 & 0xFFFF
   1213                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1214              }
   \                     ??CrossCallReturnLabel_146:
   \   000043   AA82         MOV       R2,DPL
   \   000045   AB83         MOV       R3,DPH
   \   000047   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00004A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   E8           MOV       A,R0
   \   00004F   2402         ADD       A,#0x2
   \   000051   F8           MOV       R0,A
   \   000052   5001         JNC       ??zcl_SendRead_3
   \   000054   09           INC       R1
   \                     ??zcl_SendRead_3:
   \   000055   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   000056   85..82       MOV       DPL,?V4
   \   000059   85..83       MOV       DPH,?V5
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   EC           MOV       A,R4
   \   00005F   C3           CLR       C
   \   000060   9A           SUBB      A,R2
   \   000061   40D6         JC        ??zcl_SendRead_2
   1215          
   1216              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1217                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000063                ; Setup parameters for call to function zcl_SendCommand
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV       R0,#?V6
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   741C         MOV       A,#0x1c
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000078   E4           CLR       A
   \   000079   F5..         MOV       ?V4,A
   \   00007B   F5..         MOV       ?V5,A
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   741E         MOV       A,#0x1e
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008D   741E         MOV       A,#0x1e
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000098   75..00       MOV       ?V3,#0x0
   \   00009B   78..         MOV       R0,#?V3
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   78..         MOV       R0,#?V3
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   EE           MOV       A,R6
   \   0000A6   FC           MOV       R4,A
   \   0000A7   EF           MOV       A,R7
   \   0000A8   FD           MOV       R5,A
   \   0000A9   AA..         MOV       R2,?V8
   \   0000AB   AB..         MOV       R3,?V9
   \   0000AD   A9..         MOV       R1,?V2
   \   0000AF   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000B2   740B         MOV       A,#0xb
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B7   E9           MOV       A,R1
   \   0000B8   FE           MOV       R6,A
   1218              zcl_mem_free( buf );
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   AA..         MOV       R2,?V0
   \   0000BB   AB..         MOV       R3,?V1
   \   0000BD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C0   8002         SJMP      ??zcl_SendRead_4
   1219            }
   1220            else
   1221            {
   1222              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000C2   7E10         MOV       R6,#0x10
   1223            }
   1224          
   1225            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000C4                REQUIRE ?Subroutine6
   \   0000C4                ; // Fall through to label ?Subroutine6
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002                REQUIRE ??Subroutine113_0
   \   000002                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E5..         MOV       A,?V4
   \   000002   2A           ADD       A,R2
   \   000003   F582         MOV       DPL,A
   \   000005   E5..         MOV       A,?V5
   \   000007   3B           ADDC      A,R3
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V3,A
   \   000003   78..         MOV       R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   85..82       MOV       DPL,?V4
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   1227          
   1228          /*********************************************************************
   1229           * @fn      zcl_SendReadRsp
   1230           *
   1231           * @brief   Send a Read Response command.
   1232           *
   1233           * @param   srcEP - Application's endpoint
   1234           * @param   dstAddr - destination address
   1235           * @param   clusterID - cluster ID
   1236           * @param   readRspCmd - read response command to be sent
   1237           * @param   direction - direction of the command
   1238           * @param   seqNum - transaction sequence number
   1239           *
   1240           * @return  ZSuccess if OK
   1241           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1242          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1243                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1244                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1245          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
   1246            uint8 *buf;
   1247            uint16 len = 0;
   \   000014   7E00         MOV       R6,#0x0
   \   000016   7F00         MOV       R7,#0x0
   1248            ZStatus_t status;
   1249            uint8 i;
   1250          
   1251            // calculate the size of the command
   1252            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000023   8011         SJMP      ??zcl_SendReadRsp_0
   1253            {
   1254              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1255          
   1256              len += 2 + 1; // Attribute ID + Status
   1257          
   1258              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1259              {
   1260                len++; // Attribute Data Type length
   1261          
   1262                // Attribute Data length
   1263                if ( statusRec->data != NULL )
   1264                {
   1265                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1266                }
   1267                else
   1268                {
   1269                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   000025                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000025   12....       LCALL     ?Subroutine55 & 0xFFFF
   1270                }
   \                     ??CrossCallReturnLabel_80:
   \   000028   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   00002B   8B..         MOV       ?V1,R3
   \   00002D   EE           MOV       A,R6
   \   00002E   2A           ADD       A,R2
   \   00002F   FE           MOV       R6,A
   \   000030   EF           MOV       A,R7
   \   000031   35..         ADDC      A,?V1
   \   000033   FF           MOV       R7,A
   \                     ??zcl_SendReadRsp_3:
   \   000034   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000036   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000039   503F         JNC       ??zcl_SendReadRsp_4
   \   00003B   E5..         MOV       A,?V2
   \   00003D   75F006       MOV       B,#0x6
   \   000040   A4           MUL       AB
   \   000041   F8           MOV       R0,A
   \   000042   A9F0         MOV       R1,B
   \   000044   E5..         MOV       A,?V8
   \   000046   28           ADD       A,R0
   \   000047   F582         MOV       DPL,A
   \   000049   E5..         MOV       A,?V9
   \   00004B   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00004E   EE           MOV       A,R6
   \   00004F   2403         ADD       A,#0x3
   \   000051   FE           MOV       R6,A
   \   000052   E4           CLR       A
   \   000053   3F           ADDC      A,R7
   \   000054   FF           MOV       R7,A
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   70DA         JNZ       ??zcl_SendReadRsp_3
   \   00005A   0E           INC       R6
   \   00005B   EE           MOV       A,R6
   \   00005C   7001         JNZ       ??zcl_SendReadRsp_5
   \   00005E   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   00005F   8882         MOV       DPL,R0
   \   000061   8983         MOV       DPH,R1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00006A   8882         MOV       DPL,R0
   \   00006C   8983         MOV       DPH,R1
   \   00006E   60B5         JZ        ??zcl_SendReadRsp_1
   \   000070                ; Setup parameters for call to function zclGetAttrDataLength
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000078   80B1         SJMP      ??zcl_SendReadRsp_2
   1271              }
   1272            }
   1273          
   1274            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   00007A                ; Setup parameters for call to function osal_mem_alloc
   \   00007A   EE           MOV       A,R6
   \   00007B   FA           MOV       R2,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FB           MOV       R3,A
   \   00007E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000081   8A..         MOV       ?V0,R2
   \   000083   8B..         MOV       ?V1,R3
   \   000085   8A..         MOV       ?V4,R2
   \   000087   8B..         MOV       ?V5,R3
   1275            if ( buf != NULL )
   \   000089   EA           MOV       A,R2
   \   00008A   45..         ORL       A,?V5
   \   00008C   7003         JNZ       $+5
   \   00008E   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1276            {
   1277              // Load the buffer - serially
   1278              uint8 *pBuf = buf;
   1279          
   1280              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000091   75..00       MOV       ?V2,#0x0
   \   000094   8030         SJMP      ??zcl_SendReadRsp_7
   1281              {
   1282                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1283          
   1284                *pBuf++ = LO_UINT16( statusRec->attrID );
   1285                *pBuf++ = HI_UINT16( statusRec->attrID );
   1286                *pBuf++ = statusRec->status;
   1287          
   1288                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1289                {
   1290                  *pBuf++ = statusRec->dataType;
   1291          
   1292                  if ( statusRec->data != NULL )
   1293                  {
   1294                    // Copy attribute data to the buffer to be sent out
   1295                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1296                  }
   1297                  else
   1298                  {
   1299                    uint16 dataLen;
   1300          
   1301                    // Read attribute data directly into the buffer to be sent out
   1302                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   000096                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000096   A8..         MOV       R0,?XSP + 0
   \   000098   A9..         MOV       R1,?XSP + 1
   \   00009A   88..         MOV       ?V10,R0
   \   00009C   89..         MOV       ?V11,R1
   \   00009E   78..         MOV       R0,#?V10
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   8A82         MOV       DPL,R2
   \   0000AA   8B83         MOV       DPH,R3
   \   0000AC   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000AF   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0000B2   7404         MOV       A,#0x4
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
   1303                    pBuf += dataLen;
   \   0000B7   12....       LCALL     ?Subroutine68 & 0xFFFF
   1304                  }
   \                     ??CrossCallReturnLabel_298:
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   28           ADD       A,R0
   \   0000BD   F5..         MOV       ?V0,A
   \   0000BF   E5..         MOV       A,?V1
   \   0000C1   39           ADDC      A,R1
   \   0000C2   F5..         MOV       ?V1,A
   \                     ??zcl_SendReadRsp_9:
   \   0000C4   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000C6   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000C9   5077         JNC       ??zcl_SendReadRsp_10
   \   0000CB   E5..         MOV       A,?V2
   \   0000CD   75F006       MOV       B,#0x6
   \   0000D0   A4           MUL       AB
   \   0000D1   F8           MOV       R0,A
   \   0000D2   A9F0         MOV       R1,B
   \   0000D4   E5..         MOV       A,?V8
   \   0000D6   28           ADD       A,R0
   \   0000D7   F582         MOV       DPL,A
   \   0000D9   E5..         MOV       A,?V9
   \   0000DB   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000DE   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000E1   8A82         MOV       DPL,R2
   \   0000E3   8B83         MOV       DPH,R3
   \   0000E5   A3           INC       DPTR
   \   0000E6   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000E9   F0           MOVX      @DPTR,A
   \   0000EA   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000ED   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   E5..         MOV       A,?V0
   \   0000F3   2403         ADD       A,#0x3
   \   0000F5   F5..         MOV       ?V0,A
   \   0000F7   5002         JNC       ??zcl_SendReadRsp_11
   \   0000F9   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   0000FB   8882         MOV       DPL,R0
   \   0000FD   8983         MOV       DPH,R1
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   70C2         JNZ       ??zcl_SendReadRsp_9
   \   000102   EA           MOV       A,R2
   \   000103   2403         ADD       A,#0x3
   \   000105   08           INC       R0
   \   000106   E4           CLR       A
   \   000107   3B           ADDC      A,R3
   \   000108   F9           MOV       R1,A
   \   000109   8882         MOV       DPL,R0
   \   00010B   8983         MOV       DPH,R1
   \   00010D   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000110   A3           INC       DPTR
   \   000111   8582..       MOV       ?V0,DPL
   \   000114   8583..       MOV       ?V1,DPH
   \   000117   8A82         MOV       DPL,R2
   \   000119   8B83         MOV       DPH,R3
   \   00011B   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00011E   8C82         MOV       DPL,R4
   \   000120   8D83         MOV       DPH,R5
   \   000122   E582         MOV       A,DPL
   \   000124   4583         ORL       A,DPH
   \   000126   7003         JNZ       $+5
   \   000128   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   00012B                ; Setup parameters for call to function zclSerializeData
   \   00012B   AC..         MOV       R4,?V0
   \   00012D   AD..         MOV       R5,?V1
   \   00012F   AA82         MOV       R2,DPL
   \   000131   AB83         MOV       R3,DPH
   \   000133   8882         MOV       DPL,R0
   \   000135   8983         MOV       DPH,R1
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F9           MOV       R1,A
   \   000139   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   00013C   8A..         MOV       ?V0,R2
   \   00013E   8B..         MOV       ?V1,R3
   \   000140   8082         SJMP      ??zcl_SendReadRsp_9
   1305                }
   1306              } // for loop
   1307          
   1308              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1309                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   000142                ; Setup parameters for call to function zcl_SendCommand
   \   000142   78..         MOV       R0,#?V4
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   8E..         MOV       ?V0,R6
   \   000149   8F..         MOV       ?V1,R7
   \   00014B   78..         MOV       R0,#?V0
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000150   7420         MOV       A,#0x20
   \   000152   12....       LCALL     ?XSTACK_DISP0_8
   \   000155   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000158   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015B   E4           CLR       A
   \   00015C   F5..         MOV       ?V0,A
   \   00015E   F5..         MOV       ?V1,A
   \   000160   78..         MOV       R0,#?V0
   \   000162   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000165   7422         MOV       A,#0x22
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000170   7422         MOV       A,#0x22
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017B   75..00       MOV       ?V0,#0x0
   \   00017E   78..         MOV       R0,#?V0
   \   000180   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000183   75..01       MOV       ?V0,#0x1
   \   000186   78..         MOV       R0,#?V0
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018B   AC..         MOV       R4,?V6
   \   00018D   AD..         MOV       R5,?V7
   \   00018F   AA..         MOV       R2,?V12
   \   000191   AB..         MOV       R3,?V13
   \   000193   A9..         MOV       R1,?V3
   \   000195   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000198   740B         MOV       A,#0xb
   \   00019A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019D   E9           MOV       A,R1
   \   00019E   FE           MOV       R6,A
   1310              zcl_mem_free( buf );
   \   00019F                ; Setup parameters for call to function osal_mem_free
   \   00019F   AA..         MOV       R2,?V4
   \   0001A1   AB..         MOV       R3,?V5
   \   0001A3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001A6   8002         SJMP      ??zcl_SendReadRsp_12
   1311            }
   1312            else
   1313            {
   1314              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   0001A8   7E10         MOV       R6,#0x10
   1315            }
   1316          
   1317            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   0001AA   EE           MOV       A,R6
   \   0001AB   F9           MOV       R1,A
   \   0001AC   7402         MOV       A,#0x2
   \   0001AE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B1   80..         SJMP      ??Subroutine115_0
   1318          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   AA..         MOV       R2,?V6
   \   000005   AB..         MOV       R3,?V7
   \   000007   A9..         MOV       R1,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   A882         MOV       R0,DPL
   \   000006   A983         MOV       R1,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   AA82         MOV       R2,DPL
   \   000006   AB83         MOV       R3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine128_0
   \   000006                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V2
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine135_0
   \   000006                ; // Fall through to label ??Subroutine135_0
   1319          #endif // ZCL_READ
   1320          
   1321          #ifdef ZCL_WRITE
   1322          /*********************************************************************
   1323           * @fn      sendWriteRequest
   1324           *
   1325           * @brief   Send a Write command
   1326           *
   1327           * @param   dstAddr - destination address
   1328           * @param   clusterID - cluster ID
   1329           * @param   writeCmd - write command to be sent
   1330           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1331           * @param   direction - direction of the command
   1332           * @param   seqNum - transaction sequence number
   1333           *
   1334           * @return  ZSuccess if OK
   1335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1336          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1337                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1338                                          uint8 disableDefaultRsp, uint8 seqNum )
   1339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
   1340            uint8 *buf;
   1341            uint16 dataLen = 0;
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   1342            ZStatus_t status;
   1343            uint8 i;
   1344          
   1345            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   7416         MOV       A,#0x16
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00001E   8030         SJMP      ??zcl_SendWriteRequest_0
   1346            {
   1347              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   000020   E5..         MOV       A,?V2
   \   000022   75F005       MOV       B,#0x5
   \   000025   A4           MUL       AB
   \   000026   F8           MOV       R0,A
   \   000027   A9F0         MOV       R1,B
   \   000029   E5..         MOV       A,?V4
   \   00002B   28           ADD       A,R0
   \   00002C   F582         MOV       DPL,A
   \   00002E   E5..         MOV       A,?V5
   \   000030   12....       LCALL     ?Subroutine88 & 0xFFFF
   1348          
   1349              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1350          
   1351              // Attribute Data
   1352              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??CrossCallReturnLabel_149:
   \   000033                ; Setup parameters for call to function zclGetAttrDataLength
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ?Subroutine53 & 0xFFFF
   1353            }
   \                     ??CrossCallReturnLabel_79:
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00003E   8B..         MOV       ?V1,R3
   \   000040   EA           MOV       A,R2
   \   000041   2403         ADD       A,#0x3
   \   000043   F8           MOV       R0,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V1
   \   000047   F9           MOV       R1,A
   \   000048   EE           MOV       A,R6
   \   000049   28           ADD       A,R0
   \   00004A   FE           MOV       R6,A
   \   00004B   EF           MOV       A,R7
   \   00004C   39           ADDC      A,R1
   \   00004D   FF           MOV       R7,A
   \   00004E   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_0:
   \   000050   85..82       MOV       DPL,?V4
   \   000053   85..83       MOV       DPH,?V5
   \   000056   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000059   40C5         JC        ??zcl_SendWriteRequest_1
   1354          
   1355            buf = zcl_mem_alloc( dataLen );
   \   00005B                ; Setup parameters for call to function osal_mem_alloc
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FB           MOV       R3,A
   \   00005F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV       ?V0,R2
   \   000064   8B..         MOV       ?V1,R3
   1356            if ( buf != NULL )
   \   000066   EA           MOV       A,R2
   \   000067   45..         ORL       A,?V1
   \   000069   7003         JNZ       $+5
   \   00006B   02....       LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
   1357            {
   1358              // Load the buffer - serially
   1359              uint8 *pBuf = buf;
   \   00006E   A8..         MOV       R0,?V0
   \   000070   A9..         MOV       R1,?V1
   1360              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000072   75..00       MOV       ?V2,#0x0
   \   000075   8057         SJMP      ??zcl_SendWriteRequest_3
   1361              {
   1362                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_4:
   \   000077   E5..         MOV       A,?V2
   \   000079   75F005       MOV       B,#0x5
   \   00007C   A4           MUL       AB
   \   00007D   FA           MOV       R2,A
   \   00007E   ABF0         MOV       R3,B
   \   000080   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000083   8582..       MOV       ?V12,DPL
   \   000086   8583..       MOV       ?V13,DPH
   1363          
   1364                *pBuf++ = LO_UINT16( statusRec->attrID );
   \   000089   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00008C   12....       LCALL     ?Subroutine95 & 0xFFFF
   1365                *pBuf++ = HI_UINT16( statusRec->attrID );
   \                     ??CrossCallReturnLabel_158:
   \   00008F   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000092   F0           MOVX      @DPTR,A
   1366                *pBuf++ = statusRec->dataType;
   \   000093   E5..         MOV       A,?V12
   \   000095   2402         ADD       A,#0x2
   \   000097   FA           MOV       R2,A
   \   000098   E4           CLR       A
   \   000099   35..         ADDC      A,?V13
   \   00009B   FB           MOV       R3,A
   \   00009C   8A..         MOV       ?V10,R2
   \   00009E   8B..         MOV       ?V11,R3
   \   0000A0   8A82         MOV       DPL,R2
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
   1367          
   1368                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   \   0000A9                ; Setup parameters for call to function zclSerializeData
   \   0000A9   E8           MOV       A,R0
   \   0000AA   2403         ADD       A,#0x3
   \   0000AC   FC           MOV       R4,A
   \   0000AD   E4           CLR       A
   \   0000AE   39           ADDC      A,R1
   \   0000AF   FD           MOV       R5,A
   \   0000B0   85..82       MOV       DPL,?V12
   \   0000B3   85..83       MOV       DPH,?V13
   \   0000B6   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   1369              }
   \                     ??CrossCallReturnLabel_273:
   \   0000B9   85..82       MOV       DPL,?V10
   \   0000BC   85..83       MOV       DPH,?V11
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F9           MOV       R1,A
   \   0000C1   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   0000C4   8A..         MOV       ?V10,R2
   \   0000C6   8B..         MOV       ?V11,R3
   \   0000C8   A8..         MOV       R0,?V10
   \   0000CA   A9..         MOV       R1,?V11
   \   0000CC   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_3:
   \   0000CE   85..82       MOV       DPL,?V4
   \   0000D1   85..83       MOV       DPH,?V5
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FA           MOV       R2,A
   \   0000D6   E5..         MOV       A,?V2
   \   0000D8   C3           CLR       C
   \   0000D9   9A           SUBB      A,R2
   \   0000DA   409B         JC        ??zcl_SendWriteRequest_4
   1370          
   1371              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1372                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000DC                ; Setup parameters for call to function zcl_SendCommand
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E1   8E..         MOV       ?V4,R6
   \   0000E3   8F..         MOV       ?V5,R7
   \   0000E5   78..         MOV       R0,#?V4
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EA   741F         MOV       A,#0x1f
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F5   E4           CLR       A
   \   0000F6   F5..         MOV       ?V4,A
   \   0000F8   F5..         MOV       ?V5,A
   \   0000FA   78..         MOV       R0,#?V4
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   7421         MOV       A,#0x21
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010A   7421         MOV       A,#0x21
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000112   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000115   75..00       MOV       ?V2,#0x0
   \   000118   78..         MOV       R0,#?V2
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011D   7422         MOV       A,#0x22
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000128   AC..         MOV       R4,?V6
   \   00012A   AD..         MOV       R5,?V7
   \   00012C   AA..         MOV       R2,?V8
   \   00012E   AB..         MOV       R3,?V9
   \   000130   A9..         MOV       R1,?V3
   \   000132   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000135   740B         MOV       A,#0xb
   \   000137   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013A   E9           MOV       A,R1
   \   00013B   FE           MOV       R6,A
   1373              zcl_mem_free( buf );
   \   00013C                ; Setup parameters for call to function osal_mem_free
   \   00013C   AA..         MOV       R2,?V0
   \   00013E   AB..         MOV       R3,?V1
   \   000140   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000143   8002         SJMP      ??zcl_SendWriteRequest_5
   1374            }
   1375            else
   1376            {
   1377              status = ZMemError;
   \                     ??zcl_SendWriteRequest_2:
   \   000145   7E10         MOV       R6,#0x10
   1378            }
   1379          
   1380            return ( status);
   \                     ??zcl_SendWriteRequest_5:
   \   000147   EE           MOV       A,R6
   \   000148   F9           MOV       R1,A
   \   000149   02....       LJMP      ??Subroutine115_0 & 0xFFFF
   1381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine132_0
   \   000003                ; // Fall through to label ??Subroutine132_0
   1382          
   1383          /*********************************************************************
   1384           * @fn      zcl_SendWriteRsp
   1385           *
   1386           * @brief   Send a Write Response command
   1387           *
   1388           * @param   dstAddr - destination address
   1389           * @param   clusterID - cluster ID
   1390           * @param   wrtieRspCmd - write response command to be sent
   1391           * @param   direction - direction of the command
   1392           * @param   seqNum - transaction sequence number
   1393           *
   1394           * @return  ZSuccess if OK
   1395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1396          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1397                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1398                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1399          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine45 & 0xFFFF
   1400            uint16 dataLen;
   1401            uint8 *buf;
   1402            ZStatus_t status;
   1403          
   1404            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \                     ??CrossCallReturnLabel_62:
   \   000017   75F003       MOV       B,#0x3
   \   00001A   A4           MUL       AB
   \   00001B   F5..         MOV       ?V6,A
   \   00001D   E5F0         MOV       A,B
   \   00001F   F5..         MOV       ?V7,A
   1405          
   1406            buf = zcl_mem_alloc( dataLen );
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   AA..         MOV       R2,?V6
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   1407            if ( buf != NULL )
   \   00002B   EA           MOV       A,R2
   \   00002C   45..         ORL       A,?V1
   \   00002E   7003         JNZ       $+5
   \   000030   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1408            {
   1409              // Load the buffer - serially
   1410              uint8 i;
   1411              uint8 *pBuf = buf;
   \   000033   A8..         MOV       R0,?V0
   \   000035   A9..         MOV       R1,?V1
   1412              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   000037   7C00         MOV       R4,#0x0
   \   000039   8034         SJMP      ??zcl_SendWriteRsp_1
   1413              {
   1414                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   00003B   EC           MOV       A,R4
   \   00003C   75F003       MOV       B,#0x3
   \   00003F   A4           MUL       AB
   \   000040   FA           MOV       R2,A
   \   000041   ABF0         MOV       R3,B
   \   000043   E5..         MOV       A,?V4
   \   000045   2A           ADD       A,R2
   \   000046   FA           MOV       R2,A
   \   000047   E5..         MOV       A,?V5
   \   000049   3B           ADDC      A,R3
   \   00004A   FB           MOV       R3,A
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000053   F0           MOVX      @DPTR,A
   1415                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \   000054   EA           MOV       A,R2
   \   000055   2402         ADD       A,#0x2
   \   000057   FA           MOV       R2,A
   \   000058   5001         JNC       ??zcl_SendWriteRsp_3
   \   00005A   0B           INC       R3
   \                     ??zcl_SendWriteRsp_3:
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   12....       LCALL     ?Subroutine69 & 0xFFFF
   1416                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   1417              }
   \                     ??CrossCallReturnLabel_109:
   \   000062   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000065   A3           INC       DPTR
   \   000066   F0           MOVX      @DPTR,A
   \   000067   E8           MOV       A,R0
   \   000068   2403         ADD       A,#0x3
   \   00006A   F8           MOV       R0,A
   \   00006B   5001         JNC       ??zcl_SendWriteRsp_4
   \   00006D   09           INC       R1
   \                     ??zcl_SendWriteRsp_4:
   \   00006E   0C           INC       R4
   \                     ??zcl_SendWriteRsp_1:
   \   00006F   85..82       MOV       DPL,?V4
   \   000072   85..83       MOV       DPH,?V5
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   EC           MOV       A,R4
   \   000078   C3           CLR       C
   \   000079   9A           SUBB      A,R2
   \   00007A   40BF         JC        ??zcl_SendWriteRsp_2
   1418          
   1419              // If there's only a single status record and its status field is set to
   1420              // SUCCESS then omit the attribute ID field.
   1421              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00007C   7401         MOV       A,#0x1
   \   00007E   6A           XRL       A,R2
   \   00007F   700A         JNZ       ??zcl_SendWriteRsp_5
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   7006         JNZ       ??zcl_SendWriteRsp_5
   1422              {
   1423                dataLen = 1;
   \   000085   75..01       MOV       ?V6,#0x1
   \   000088   75..00       MOV       ?V7,#0x0
   1424              }
   1425          
   1426              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1427                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   00008B                ; Setup parameters for call to function zcl_SendCommand
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV       R0,#?V6
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   741C         MOV       A,#0x1c
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V4,A
   \   0000A3   F5..         MOV       ?V5,A
   \   0000A5   78..         MOV       R0,#?V4
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   741E         MOV       A,#0x1e
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   741E         MOV       A,#0x1e
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   75..00       MOV       ?V3,#0x0
   \   0000C3   78..         MOV       R0,#?V3
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   75..04       MOV       ?V3,#0x4
   \   0000CB   78..         MOV       R0,#?V3
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D0   EE           MOV       A,R6
   \   0000D1   FC           MOV       R4,A
   \   0000D2   EF           MOV       A,R7
   \   0000D3   FD           MOV       R5,A
   \   0000D4   AA..         MOV       R2,?V8
   \   0000D6   AB..         MOV       R3,?V9
   \   0000D8   A9..         MOV       R1,?V2
   \   0000DA   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000DD   740B         MOV       A,#0xb
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV       A,R1
   \   0000E3   FE           MOV       R6,A
   1428              zcl_mem_free( buf );
   \   0000E4                ; Setup parameters for call to function osal_mem_free
   \   0000E4   AA..         MOV       R2,?V0
   \   0000E6   AB..         MOV       R3,?V1
   \   0000E8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000EB   8002         SJMP      ??zcl_SendWriteRsp_6
   1429            }
   1430            else
   1431            {
   1432              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   0000ED   7E10         MOV       R6,#0x10
   1433            }
   1434          
   1435            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   0000EF   02....       LJMP      ?Subroutine6 & 0xFFFF
   1436          }
   1437          #endif // ZCL_WRITE
   1438          
   1439          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1440          /*********************************************************************
   1441           * @fn      zcl_SendConfigReportCmd
   1442           *
   1443           * @brief   Send a Configure Reporting command
   1444           *
   1445           * @param   dstAddr - destination address
   1446           * @param   clusterID - cluster ID
   1447           * @param   cfgReportCmd - configure reporting command to be sent
   1448           * @param   direction - direction of the command
   1449           * @param   seqNum - transaction sequence number
   1450           *
   1451           * @return  ZSuccess if OK
   1452           */
   1453          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1454                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1455                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1456          {
   1457            uint8 *buf;
   1458            uint16 dataLen = 0;
   1459            ZStatus_t status;
   1460            uint8 i;
   1461          
   1462            // Find out the data length
   1463            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1464            {
   1465              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1466          
   1467              dataLen += 1 + 2; // Direction + Attribute ID
   1468          
   1469              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1470              {
   1471                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1472          
   1473                // Find out the size of the Reportable Change field (for Analog data types)
   1474                if ( zclAnalogDataType( reportRec->dataType ) )
   1475                {
   1476                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1477                }
   1478              }
   1479              else
   1480              {
   1481                dataLen += 2; // Timeout Period
   1482              }
   1483            }
   1484          
   1485            buf = zcl_mem_alloc( dataLen );
   1486            if ( buf != NULL )
   1487            {
   1488              // Load the buffer - serially
   1489              uint8 *pBuf = buf;
   1490          
   1491              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1492              {
   1493                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1494          
   1495                *pBuf++ = reportRec->direction;
   1496                *pBuf++ = LO_UINT16( reportRec->attrID );
   1497                *pBuf++ = HI_UINT16( reportRec->attrID );
   1498          
   1499                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1500                {
   1501                  *pBuf++ = reportRec->dataType;
   1502                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1503                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1504                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1505                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1506          
   1507                  if ( zclAnalogDataType( reportRec->dataType ) )
   1508                  {
   1509                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1510                  }
   1511                }
   1512                else
   1513                {
   1514                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1515                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1516                }
   1517              } // for loop
   1518          
   1519              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1520                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1521              zcl_mem_free( buf );
   1522            }
   1523            else
   1524            {
   1525              status = ZMemError;
   1526            }
   1527          
   1528            return ( status );
   1529          }
   1530          #endif
   1531          
   1532          #ifdef ZCL_REPORTING_DEVICE
   1533          /*********************************************************************
   1534           * @fn      zcl_SendConfigReportRspCmd
   1535           *
   1536           * @brief   Send a Configure Reporting Response command
   1537           *
   1538           * @param   dstAddr - destination address
   1539           * @param   clusterID - cluster ID
   1540           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1541           * @param   direction - direction of the command
   1542           * @param   seqNum - transaction sequence number
   1543           *
   1544           * @return  ZSuccess if OK
   1545           */
   1546          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1547                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1548                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1549          {
   1550            uint16 dataLen;
   1551            uint8 *buf;
   1552            ZStatus_t status;
   1553          
   1554            // Atrribute list (Status, Direction and Attribute ID)
   1555            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   1556          
   1557            buf = zcl_mem_alloc( dataLen );
   1558            if ( buf != NULL )
   1559            {
   1560              // Load the buffer - serially
   1561              uint8 *pBuf = buf;
   1562              uint8 i;
   1563          
   1564              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   1565              {
   1566                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   1567                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   1568                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1569                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1570              }
   1571          
   1572              // If there's only a single status record and its status field is set to
   1573              // SUCCESS then omit the attribute ID field.
   1574              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1575              {
   1576                dataLen = 1;
   1577              }
   1578          
   1579              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1580                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1581                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   1582              zcl_mem_free( buf );
   1583            }
   1584            else
   1585            {
   1586              status = ZMemError;
   1587            }
   1588          
   1589            return ( status );
   1590          }
   1591          #endif
   1592          
   1593          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1594          /*********************************************************************
   1595           * @fn      zcl_SendReadReportCfgCmd
   1596           *
   1597           * @brief   Send a Read Reporting Configuration command
   1598           *
   1599           * @param   dstAddr - destination address
   1600           * @param   clusterID - cluster ID
   1601           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1602           * @param   direction - direction of the command
   1603           * @param   seqNum - transaction sequence number
   1604           *
   1605           * @return  ZSuccess if OK
   1606           */
   1607          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1608                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1609                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1610          {
   1611            uint16 dataLen;
   1612            uint8 *buf;
   1613            ZStatus_t status;
   1614          
   1615            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1616          
   1617            buf = zcl_mem_alloc( dataLen );
   1618            if ( buf != NULL )
   1619            {
   1620              // Load the buffer - serially
   1621              uint8 *pBuf = buf;
   1622              uint8 i;
   1623          
   1624              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1625              {
   1626                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1627                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1628                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1629              }
   1630          
   1631              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1632                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1633              zcl_mem_free( buf );
   1634            }
   1635            else
   1636            {
   1637              status = ZMemError;
   1638            }
   1639          
   1640            return ( status );
   1641          }
   1642          #endif
   1643          
   1644          #ifdef ZCL_REPORTING_DEVICE
   1645          /*********************************************************************
   1646           * @fn      zcl_SendReadReportCfgRspCmd
   1647           *
   1648           * @brief   Send a Read Reporting Configuration Response command
   1649           *
   1650           * @param   dstAddr - destination address
   1651           * @param   clusterID - cluster ID
   1652           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1653           * @param   direction - direction of the command
   1654           * @param   seqNum - transaction sequence number
   1655           *
   1656           * @return  ZSuccess if OK
   1657           */
   1658          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1659                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1660                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1661          {
   1662            uint8 *buf;
   1663            uint16 dataLen = 0;
   1664            ZStatus_t status;
   1665            uint8 i;
   1666          
   1667            // Find out the data length
   1668            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1669            {
   1670              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1671          
   1672              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1673          
   1674              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1675              {
   1676                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1677                {
   1678                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1679          
   1680                  // Find out the size of the Reportable Change field (for Analog data types)
   1681                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1682                  {
   1683                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1684                  }
   1685                }
   1686                else
   1687                {
   1688                  dataLen += 2; // Timeout Period
   1689                }
   1690              }
   1691            }
   1692          
   1693            buf = zcl_mem_alloc( dataLen );
   1694            if ( buf != NULL )
   1695            {
   1696              // Load the buffer - serially
   1697              uint8 *pBuf = buf;
   1698          
   1699              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1700              {
   1701                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1702          
   1703                *pBuf++ = reportRspRec->status;
   1704                *pBuf++ = reportRspRec->direction;
   1705                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1706                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1707          
   1708                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1709                {
   1710                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1711                  {
   1712                    *pBuf++ = reportRspRec->dataType;
   1713                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1714                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1715                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1716                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1717          
   1718                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1719                    {
   1720                      pBuf = zclSerializeData( reportRspRec->dataType,
   1721                                               reportRspRec->reportableChange, pBuf );
   1722                    }
   1723                  }
   1724                  else
   1725                  {
   1726                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1727                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1728                  }
   1729                }
   1730              }
   1731          
   1732              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1733                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1734                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1735              zcl_mem_free( buf );
   1736            }
   1737            else
   1738            {
   1739              status = ZMemError;
   1740            }
   1741          
   1742            return ( status );
   1743          }
   1744          
   1745          /*********************************************************************
   1746           * @fn      zcl_SendReportCmd
   1747           *
   1748           * @brief   Send a Report command
   1749           *
   1750           * @param   dstAddr - destination address
   1751           * @param   clusterID - cluster ID
   1752           * @param   reportCmd - report command to be sent
   1753           * @param   direction - direction of the command
   1754           * @param   seqNum - transaction sequence number
   1755           *
   1756           * @return  ZSuccess if OK
   1757           */
   1758          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1759                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1760                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1761          {
   1762            uint16 dataLen = 0;
   1763            uint8 *buf;
   1764            ZStatus_t status;
   1765            uint8 i;
   1766          
   1767            // calculate the size of the command
   1768            for ( i = 0; i < reportCmd->numAttr; i++ )
   1769            {
   1770              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1771          
   1772              dataLen += 2 + 1; // Attribute ID + data type
   1773          
   1774              // Attribute Data
   1775              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1776            }
   1777          
   1778            buf = zcl_mem_alloc( dataLen );
   1779            if ( buf != NULL )
   1780            {
   1781              // Load the buffer - serially
   1782              uint8 *pBuf = buf;
   1783          
   1784              for ( i = 0; i < reportCmd->numAttr; i++ )
   1785              {
   1786                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1787          
   1788                *pBuf++ = LO_UINT16( reportRec->attrID );
   1789                *pBuf++ = HI_UINT16( reportRec->attrID );
   1790                *pBuf++ = reportRec->dataType;
   1791          
   1792                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1793              }
   1794          
   1795              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1796                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1797              zcl_mem_free( buf );
   1798            }
   1799            else
   1800            {
   1801              status = ZMemError;
   1802            }
   1803          
   1804            return ( status );
   1805          }
   1806          #endif
   1807          
   1808          /*********************************************************************
   1809           * @fn      zcl_SendDefaultRspCmd
   1810           *
   1811           * @brief   Send a Default Response command
   1812           *
   1813           *          Note: The manufacturer code field should be set if this
   1814           *          command is being sent in response to a manufacturer specific
   1815           *          command.
   1816           *
   1817           * @param   dstAddr - destination address
   1818           * @param   clusterID - cluster ID
   1819           * @param   defaultRspCmd - default response command to be sent
   1820           * @param   direction - direction of the command
   1821           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1822           * @param   seqNum - transaction sequence number
   1823           *
   1824           * @return  ZSuccess if OK
   1825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1826          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1827                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1828                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine66 & 0xFFFF
   1830            uint8 buf[2]; // Command ID and Status;
   1831          
   1832            // Load the buffer - serially
   1833            buf[0] = defaultRspCmd->commandID;
   \                     ??CrossCallReturnLabel_103:
   \   000014   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000017   12....       LCALL     ?Subroutine24 & 0xFFFF
   1834            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_21:
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   C0E0         PUSH      A
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
   1835          
   1836            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1837                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \   000025                ; Setup parameters for call to function zcl_SendCommand
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V0,R0
   \   00002B   89..         MOV       ?V1,R1
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..02       MOV       ?V0,#0x2
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7416         MOV       A,#0x16
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   7415         MOV       A,#0x15
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000050   7416         MOV       A,#0x16
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   7416         MOV       A,#0x16
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   75..00       MOV       ?V0,#0x0
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   75..0B       MOV       ?V0,#0xb
   \   000071   78..         MOV       R0,#?V0
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000076   EE           MOV       A,R6
   \   000077   F9           MOV       R1,A
   \   000078   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00007B   740B         MOV       A,#0xb
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   7402         MOV       A,#0x2
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   02....       LJMP      ?Subroutine2 & 0xFFFF
   1838          }
   1839          
   1840          #ifdef ZCL_DISCOVER
   1841          /*********************************************************************
   1842           * @fn      zcl_SendDiscoverCmdsCmd
   1843           *
   1844           * @brief   Send a Discover Commands command
   1845           *
   1846           * @param   dstAddr - destination address
   1847           * @param   clusterID - cluster ID
   1848           * @param   cmdType - requesting command ID
   1849           * @param   pDiscoverCmd - discover command to be sent
   1850           * @param   direction - direction of the command
   1851           * @param   seqNum - transaction sequence number
   1852           *
   1853           * @return  ZSuccess if OK
   1854           */
   1855          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   1856                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1857                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1858          {
   1859            uint8 payload[2]; // size of startCmdID and maxCmdID
   1860            ZStatus_t status;
   1861          
   1862            payload[0] = pDiscoverCmd->startCmdID;
   1863            payload[1] = pDiscoverCmd->maxCmdID;
   1864          
   1865            // Send message for either commands received or generated
   1866            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   1867            {
   1868              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1869                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   1870            }
   1871            else  // generated
   1872            {
   1873              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1874                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   1875            }
   1876          
   1877            return ( status );
   1878          }
   1879          
   1880          /*********************************************************************
   1881           * @fn      zcl_SendDiscoverCmdsRspCmd
   1882           *
   1883           * @brief   Send a Discover Commands Response command
   1884           *
   1885           * @param   dstAddr - destination address
   1886           * @param   clusterID - cluster ID
   1887           * @param   pDiscoverRspCmd - response command to be sent
   1888           * @param   direction - direction of the command
   1889           * @param   seqNum - transaction sequence number
   1890           *
   1891           * @return  ZSuccess if OK
   1892           */
   1893          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1894                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1895                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1896          {
   1897            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   1898            uint8 *pCmdBuf;
   1899            uint8 i;
   1900            ZStatus_t status = ZSuccess;
   1901          
   1902            // allocate memory
   1903            pCmdBuf = zcl_mem_alloc( payloadSize );
   1904            if ( pCmdBuf != NULL )
   1905            {
   1906              uint8 *pBuf = pCmdBuf;
   1907          
   1908              // Load the buffer - serially
   1909              *pBuf++ = pDiscoverRspCmd->discComplete;
   1910              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   1911              {
   1912                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   1913              }
   1914          
   1915              // Send response message for either commands received or generated
   1916              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   1917              {
   1918                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1919                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   1920              }
   1921              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   1922              {
   1923                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1924                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   1925              }
   1926          
   1927              zcl_mem_free( pCmdBuf );
   1928            }
   1929            else
   1930            {
   1931              status = ZMemError;
   1932            }
   1933          
   1934            return ( status );
   1935          }
   1936          
   1937          /*********************************************************************
   1938           * @fn      zcl_SendDiscoverAttrsCmd
   1939           *
   1940           * @brief   Send a Discover Attributes command
   1941           *
   1942           * @param   dstAddr - destination address
   1943           * @param   clusterID - cluster ID
   1944           * @param   pDiscoverCmd - discover command to be sent
   1945           * @param   direction - direction of the command
   1946           * @param   seqNum - transaction sequence number
   1947           *
   1948           * @return  ZSuccess if OK
   1949           */
   1950          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1951                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1952                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1953          {
   1954            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1955            uint8 *buf;
   1956            ZStatus_t status;
   1957          
   1958            buf = zcl_mem_alloc( dataLen );
   1959            if ( buf != NULL )
   1960            {
   1961              // Load the buffer - serially
   1962              uint8 *pBuf = buf;
   1963              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   1964              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   1965              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   1966          
   1967              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   1968                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1969              zcl_mem_free( buf );
   1970            }
   1971            else
   1972            {
   1973              status = ZMemError;
   1974            }
   1975          
   1976            return ( status );
   1977          }
   1978          
   1979          /*********************************************************************
   1980           * @fn      zcl_SendDiscoverAttrsRspCmd
   1981           *
   1982           * @brief   Send a Discover Attributes Response command
   1983           *
   1984           * @param   dstAddr - destination address
   1985           * @param   clusterID - cluster ID
   1986           * @param   reportRspCmd - report response command to be sent
   1987           * @param   direction - direction of the command
   1988           * @param   seqNum - transaction sequence number
   1989           *
   1990           * @return  ZSuccess if OK
   1991           */
   1992          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1993                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   1994                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1995          {
   1996            uint16 dataLen = 1; // Discovery complete
   1997            uint8 *buf;
   1998            ZStatus_t status;
   1999          
   2000            // calculate the size of the command
   2001            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   2002          
   2003            buf = zcl_mem_alloc( dataLen );
   2004            if ( buf != NULL )
   2005            {
   2006              // Load the buffer - serially
   2007              uint8 i;
   2008              uint8 *pBuf = buf;
   2009          
   2010              *pBuf++ = pDiscoverRspCmd->discComplete;
   2011          
   2012              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   2013              {
   2014                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2015                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2016                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   2017              }
   2018          
   2019              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2020                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   2021              zcl_mem_free( buf );
   2022            }
   2023            else
   2024            {
   2025              status = ZMemError;
   2026            }
   2027          
   2028            return ( status );
   2029          }
   2030          
   2031          /*********************************************************************
   2032           * @fn      zcl_SendDiscoverAttrsExt
   2033           *
   2034           * @brief   Send a Discover Attributes Extended command
   2035           *
   2036           * @param   dstAddr - destination address
   2037           * @param   clusterID - cluster ID
   2038           * @param   pDiscoverAttrsExt:
   2039           *            - startAttrID: the first attribute to be selected
   2040           *            - maxAttrIDs: maximum number of returned attributes
   2041           * @param   direction - direction of the command
   2042           * @param   seqNum - transaction sequence number
   2043           *
   2044           * @return  ZSuccess if OK
   2045           */
   2046          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   2047                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2048                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2049          {
   2050            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2051            ZStatus_t status;
   2052          
   2053            // Load the buffer - serially
   2054            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   2055            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   2056            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   2057          
   2058            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2059                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2060          
   2061            return ( status );
   2062          }
   2063          
   2064          /*********************************************************************
   2065           * @fn      zcl_SendDiscoverAttrsExtRsp
   2066           *
   2067           * @brief   Send a Discover Attributes Extended Response command
   2068           *
   2069           * @param   dstAddr - destination address
   2070           * @param   clusterID - cluster ID
   2071           * @param   pDiscoverRspCmd:
   2072           *            - discComplete: indicates whether all requested attributes returned
   2073           *            - attrID: attribute ID
   2074           *            - attrDataType: data type of the given attribute
   2075           *            - attrAccessControl: access control of the given attribute
   2076           * @param   direction - direction of the command
   2077           * @param   seqNum - transaction sequence number
   2078           *
   2079           * @return  ZSuccess if OK
   2080           */
   2081          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   2082                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2083                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2084          {
   2085            uint8 *buf;
   2086            uint8 i;
   2087            uint16 dataLen = 1; // Discovery complete
   2088            ZStatus_t status;
   2089          
   2090            // calculate the size of the command
   2091            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   2092          
   2093            buf = zcl_mem_alloc( dataLen );
   2094            if ( buf != NULL )
   2095            {
   2096              // Load the buffer - serially
   2097              uint8 *pBuf = buf;
   2098              *pBuf++ = pDiscoverRspCmd->discComplete;
   2099              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   2100              {
   2101                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2102                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2103                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   2104                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2105              }
   2106          
   2107              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2108                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   2109              zcl_mem_free( buf );
   2110            }
   2111            else
   2112            {
   2113              status = ZMemError;
   2114            }
   2115          
   2116            return ( status );
   2117          }
   2118          #endif // ZCL_DISCOVER
   2119          
   2120          /*********************************************************************
   2121           * @fn      zcl_ProcessMessageMSG
   2122           *
   2123           * @brief   Data message processor callback.  This function processes
   2124           *          any incoming data - probably from other devices.  So, based
   2125           *          on cluster ID, perform the intended action.
   2126           *
   2127           * @param   pkt - incoming message
   2128           *
   2129           * @return  zclProcMsgStatus_t
   2130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2131          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2132          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2133            endPointDesc_t *epDesc;
   2134            zclIncoming_t inMsg;
   2135            zclLibPlugin_t *pInPlugin;
   2136            zclDefaultRspCmd_t defautlRspCmd;
   2137            uint8 options;
   2138            uint8 securityEnable;
   2139            uint8 interPanMsg;
   2140            ZStatus_t status = ZFailure;
   2141            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2142          
   2143            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EE           MOV       A,R6
   \   000011   2420         ADD       A,#0x20
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   F9           MOV       R1,A
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   8882         MOV       DPL,R0
   \   00001D   F583         MOV       DPH,A
   \   00001F   C3           CLR       C
   \   000020   E0           MOVX      A,@DPTR
   \   000021   9403         SUBB      A,#0x3
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   9400         SUBB      A,#0x0
   \   000027   5005         JNC       ??zcl_ProcessMessageMSG_0
   2144            {
   2145              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000029   7901         MOV       R1,#0x1
   \   00002B   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2146            }
   2147          
   2148            // Initialize
   2149            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   00002E   90....       MOV       DPTR,#rawAFMsg
   \   000031   EE           MOV       A,R6
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   EF           MOV       A,R7
   \   000035   F0           MOVX      @DPTR,A
   2150            inMsg.msg = pkt;
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   EE           MOV       A,R6
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   EF           MOV       A,R7
   \   00003F   F0           MOVX      @DPTR,A
   2151            inMsg.attrCmd = NULL;
   \   000040   740E         MOV       A,#0xe
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   2152            inMsg.pData = NULL;
   \   000049   740A         MOV       A,#0xa
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
   2153            inMsg.pDataLen = 0;
   \   000052   740C         MOV       A,#0xc
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E4           CLR       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   F0           MOVX      @DPTR,A
   2154          
   2155            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   00005B   EE           MOV       A,R6
   \   00005C   2422         ADD       A,#0x22
   \   00005E   F8           MOV       R0,A
   \   00005F   E4           CLR       A
   \   000060   3F           ADDC      A,R7
   \   000061   F9           MOV       R1,A
   \   000062   88..         MOV       ?V2,R0
   \   000064   89..         MOV       ?V3,R1
   \   000066                ; Setup parameters for call to function zclParseHdr
   \   000066   8882         MOV       DPL,R0
   \   000068   F583         MOV       DPH,A
   \   00006A   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   AA82         MOV       R2,DPL
   \   000074   AB83         MOV       R3,DPH
   \   000076   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000079   8A..         MOV       ?V4,R2
   \   00007B   8B..         MOV       ?V5,R3
   \   00007D   A8..         MOV       R0,?V4
   \   00007F   A9..         MOV       R1,?V5
   \   000081   740A         MOV       A,#0xa
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E8           MOV       A,R0
   \   000087   12....       LCALL     ?Subroutine17 & 0xFFFF
   2156            inMsg.pDataLen = pkt->cmd.DataLength;
   2157            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_207:
   \   00008A   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00008D   EA           MOV       A,R2
   \   00008E   C3           CLR       C
   \   00008F   98           SUBB      A,R0
   \   000090   F8           MOV       R0,A
   \   000091   EB           MOV       A,R3
   \   000092   99           SUBB      A,R1
   \   000093   F9           MOV       R1,A
   \   000094   85..82       MOV       DPL,?V2
   \   000097   85..83       MOV       DPH,?V3
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   28           ADD       A,R0
   \   00009C   F8           MOV       R0,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   39           ADDC      A,R1
   \   0000A0   F9           MOV       R1,A
   \   0000A1   740C         MOV       A,#0xc
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   2158          
   2159            // Temporary workaround to allow callback functions access to the
   2160            // transaction sequence number.  Callback functions will call
   2161            // zcl_getParsedTransSeqNum() to retrieve this number.
   2162            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_201:
   \   0000A9   7408         MOV       A,#0x8
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000B2   F0           MOVX      @DPTR,A
   2163          
   2164            // Find the wanted endpoint
   2165            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000B3   EE           MOV       A,R6
   \   0000B4   2414         ADD       A,#0x14
   \   0000B6   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F9           MOV       R1,A
   \   0000BB   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000BE   8A82         MOV       DPL,R2
   \   0000C0   8B83         MOV       DPH,R3
   2166            if ( epDesc == NULL )
   \   0000C2   E582         MOV       A,DPL
   \   0000C4   4583         ORL       A,DPH
   \   0000C6   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2167            {
   2168              rawAFMsg = NULL;
   \   0000C8   90....       MOV       DPTR,#rawAFMsg
   \   0000CB   E4           CLR       A
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   F0           MOVX      @DPTR,A
   2169              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000CF   7902         MOV       R1,#0x2
   \   0000D1   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2170            }
   2171          
   2172            if ( ( epDesc->simpleDesc == NULL ) ||
   2173                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2174                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000D4   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000D7   602B         JZ        ??zcl_ProcessMessageMSG_3
   \   0000D9   EE           MOV       A,R6
   \   0000DA   2404         ADD       A,#0x4
   \   0000DC   F5..         MOV       ?V2,A
   \   0000DE   E4           CLR       A
   \   0000DF   3F           ADDC      A,R7
   \   0000E0   F5..         MOV       ?V3,A
   \   0000E2                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E2   A3           INC       DPTR
   \   0000E3   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000E6   740B         MOV       A,#0xb
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   FD           MOV       R5,A
   \   0000ED   7406         MOV       A,#0x6
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   5403         ANL       A,#0x3
   \   0000F5   FC           MOV       R4,A
   \   0000F6   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000F9   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?DEALLOC_XSTACK8
   \   000101   E9           MOV       A,R1
   \   000102   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2175            {
   2176              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   000104   90....       MOV       DPTR,#rawAFMsg
   \   000107   E4           CLR       A
   \   000108   F0           MOVX      @DPTR,A
   \   000109   A3           INC       DPTR
   \   00010A   F0           MOVX      @DPTR,A
   2177              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   00010B   7903         MOV       R1,#0x3
   \   00010D   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2178            }
   2179          
   2180          #if defined ( INTER_PAN )
   2181            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   2182            {
   2183              // No foundation command is supported thru Inter-PAN communication.
   2184              // But the Light Link cluster uses a different Frame Control format
   2185              // for it's Inter-PAN messages, where the messages could be confused
   2186              // with the foundation commands.
   2187              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   2188              {
   2189                rawAFMsg = NULL;
   2190                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   2191              }
   2192          
   2193              interPanMsg = TRUE;
   2194              options = AF_TX_OPTIONS_NONE;
   2195            }
   2196            else
   2197          #endif
   2198            {
   2199              interPanMsg = FALSE;
   2200              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \                     ??zcl_ProcessMessageMSG_4:
   \   000110                ; Setup parameters for call to function zclGetClusterOption
   \   000110   12....       LCALL     ?Subroutine32 & 0xFFFF
   2201            }
   \                     ??CrossCallReturnLabel_28:
   \   000113   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000116   E9           MOV       A,R1
   \   000117   F5..         MOV       ?V6,A
   2202          
   2203            // Find the appropriate plugin
   2204            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   000119   85..82       MOV       DPL,?V2
   \   00011C   85..83       MOV       DPH,?V3
   \   00011F   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000122   EA           MOV       A,R2
   \   000123   FC           MOV       R4,A
   \   000124   EB           MOV       A,R3
   \   000125   FD           MOV       R5,A
   \   000126   90....       MOV       DPTR,#plugins
   \   000129   8004         SJMP      ??zcl_ProcessMessageMSG_5
   \                     ??zcl_ProcessMessageMSG_6:
   \   00012B   8882         MOV       DPL,R0
   \   00012D   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_5:
   \   00012F   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000132   7003         JNZ       $+5
   \   000134   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   \   000137   8882         MOV       DPL,R0
   \   000139   8983         MOV       DPH,R1
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000140   C3           CLR       C
   \   000141   EC           MOV       A,R4
   \   000142   95..         SUBB      A,?V4
   \   000144   ED           MOV       A,R5
   \   000145   95..         SUBB      A,?V5
   \   000147   40E2         JC        ??zcl_ProcessMessageMSG_6
   \   000149   8882         MOV       DPL,R0
   \   00014B   8983         MOV       DPH,R1
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   C3           CLR       C
   \   000152   E0           MOVX      A,@DPTR
   \   000153   9C           SUBB      A,R4
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   9D           SUBB      A,R5
   \   000157   40D2         JC        ??zcl_ProcessMessageMSG_6
   \   000159   E8           MOV       A,R0
   \   00015A   FC           MOV       R4,A
   \   00015B   E9           MOV       A,R1
   \   00015C   FD           MOV       R5,A
   \   00015D   7404         MOV       A,#0x4
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E0           MOVX      A,@DPTR
   \   000163   5407         ANL       A,#0x7
   \   000165   700D         JNZ       ??zcl_ProcessMessageMSG_8
   \   000167   7409         MOV       A,#0x9
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   640B         XRL       A,#0xb
   \   00016F   7003         JNZ       $+5
   \   000171   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2205          
   2206            // Local and remote Security options must match except for Default Response command
   2207            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2208            {
   2209              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_8:
   \   000174   E5..         MOV       A,?V6
   \   000176   A2E6         MOV       C,0xE0 /* A   */.6
   \   000178   4003         JC        $+5
   \   00017A   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   \   00017D   EE           MOV       A,R6
   \   00017E   2419         ADD       A,#0x19
   \   000180   F582         MOV       DPL,A
   \   000182   E4           CLR       A
   \   000183   3F           ADDC      A,R7
   \   000184   F583         MOV       DPH,A
   \   000186   E0           MOVX      A,@DPTR
   \   000187   6003         JZ        $+5
   \   000189   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2210          
   2211              // Make sure that Clusters specifically defined to use security are received secure,
   2212              // any other cluster that wants to use APS security will be allowed
   2213              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2214              {
   2215                if ( UNICAST_MSG( inMsg.msg ) )
   \   00018C   7402         MOV       A,#0x2
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000194   6003         JZ        $+5
   \   000196   02....       LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
   \   000199   7402         MOV       A,#0x2
   \   00019B   12....       LCALL     ?XSTACK_DISP0_8
   \   00019E   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   0001A1   7079         JNZ       ??zcl_ProcessMessageMSG_10
   2216                {
   2217                  // Send a Default Response command back with no Application Link Key security
   2218                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   0001A3                ; Setup parameters for call to function zclSetSecurityOption
   \   0001A3   7C00         MOV       R4,#0x0
   \   0001A5   85..82       MOV       DPL,?V0
   \   0001A8   85..83       MOV       DPH,?V1
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   F9           MOV       R1,A
   \   0001AD   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2219          
   2220                  defautlRspCmd.statusCode = status;
   \   0001B0   7401         MOV       A,#0x1
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   7401         MOV       A,#0x1
   \   0001B7   F0           MOVX      @DPTR,A
   2221                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001B8   7409         MOV       A,#0x9
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine61 & 0xFFFF
   2222                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2223                                         inMsg.msg->clusterId, &defautlRspCmd,
   2224                                         !inMsg.hdr.fc.direction, true,
   2225                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_91:
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   F5..         MOV       ?V4,A
   \   0001C6   78..         MOV       R0,#?V4
   \   0001C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CB   7407         MOV       A,#0x7
   \   0001CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001D3   75..01       MOV       ?V4,#0x1
   \   0001D6   78..         MOV       R0,#?V4
   \   0001D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DB   7408         MOV       A,#0x8
   \   0001DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E0   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001E3   F5..         MOV       ?V4,A
   \   0001E5   78..         MOV       R0,#?V4
   \   0001E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EA   7405         MOV       A,#0x5
   \   0001EC   12....       LCALL     ?XSTACK_DISP100_8
   \   0001EF   88..         MOV       ?V4,R0
   \   0001F1   89..         MOV       ?V5,R1
   \   0001F3   78..         MOV       R0,#?V4
   \   0001F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F8   7409         MOV       A,#0x9
   \   0001FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00020C   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   00020F   7407         MOV       A,#0x7
   \   000211   12....       LCALL     ?DEALLOC_XSTACK8
   2226          
   2227                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   000214                ; Setup parameters for call to function zclSetSecurityOption
   \   000214   7C01         MOV       R4,#0x1
   \   000216   12....       LCALL     ?Subroutine32 & 0xFFFF
   2228                }
   \                     ??CrossCallReturnLabel_29:
   \   000219   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2229          
   2230                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_10:
   \   00021C   90....       MOV       DPTR,#rawAFMsg
   \   00021F   E4           CLR       A
   \   000220   F0           MOVX      @DPTR,A
   \   000221   A3           INC       DPTR
   \   000222   F0           MOVX      @DPTR,A
   2231                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   000223   7905         MOV       R1,#0x5
   \   000225   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2232              }
   2233            }
   \                     ??zcl_ProcessMessageMSG_7:
   \   000228   7C00         MOV       R4,#0x0
   \   00022A   7D00         MOV       R5,#0x0
   2234          
   2235            // Is this a foundation type message
   2236            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_9:
   \   00022C   7404         MOV       A,#0x4
   \   00022E   12....       LCALL     ?XSTACK_DISP0_8
   \   000231   E0           MOVX      A,@DPTR
   \   000232   F8           MOV       R0,A
   \   000233   5403         ANL       A,#0x3
   \   000235   6003         JZ        $+5
   \   000237   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   2237            {
   2238              if ( inMsg.hdr.fc.manuSpecific )
   \   00023A   E8           MOV       A,R0
   \   00023B   5404         ANL       A,#0x4
   \   00023D   6005         JZ        ??zcl_ProcessMessageMSG_12
   2239              {
   2240                // We don't support any manufacturer specific command
   2241                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   00023F   7E84         MOV       R6,#-0x7c
   \   000241   02....       LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
   2242              }
   2243              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2244                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_12:
   \   000244   7409         MOV       A,#0x9
   \   000246   12....       LCALL     ?XSTACK_DISP0_8
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   F8           MOV       R0,A
   \   00024B   C3           CLR       C
   \   00024C   9417         SUBB      A,#0x17
   \   00024E   4003         JC        $+5
   \   000250   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   \   000253   E8           MOV       A,R0
   \   000254   F5..         MOV       ?V2,A
   \   000256   75..00       MOV       ?V3,#0x0
   \   000259   7402         MOV       A,#0x2
   \   00025B   78..         MOV       R0,#?V2
   \   00025D   12....       LCALL     ?S_SHL
   \   000260   74..         MOV       A,#zclCmdTable & 0xff
   \   000262   25..         ADD       A,?V2
   \   000264   F582         MOV       DPL,A
   \   000266   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   000268   35..         ADDC      A,?V3
   \   00026A   F583         MOV       DPH,A
   \   00026C   E4           CLR       A
   \   00026D   93           MOVC      A,@A+DPTR
   \   00026E   F8           MOV       R0,A
   \   00026F   7401         MOV       A,#0x1
   \   000271   93           MOVC      A,@A+DPTR
   \   000272   F9           MOV       R1,A
   \   000273   E8           MOV       A,R0
   \   000274   49           ORL       A,R1
   \   000275   7003         JNZ       $+5
   \   000277   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   2245              {
   2246                zclParseCmd_t parseCmd;
   2247          
   2248                parseCmd.endpoint = pkt->endPoint;
   \   00027A   85..82       MOV       DPL,?V0
   \   00027D   85..83       MOV       DPH,?V1
   \   000280   E0           MOVX      A,@DPTR
   \   000281   C0E0         PUSH      A
   \   000283   7410         MOV       A,#0x10
   \   000285   12....       LCALL     ?XSTACK_DISP0_8
   \   000288   D0E0         POP       A
   \   00028A   F0           MOVX      @DPTR,A
   2249                parseCmd.dataLen = inMsg.pDataLen;
   \   00028B   740C         MOV       A,#0xc
   \   00028D   12....       LCALL     ?XSTACK_DISP0_8
   \   000290   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000293   7411         MOV       A,#0x11
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   2250                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_347:
   \   00029B   740A         MOV       A,#0xa
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0002A3   7413         MOV       A,#0x13
   \   0002A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A8   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   2251          
   2252                // Parse the command, remember that the return value is a pointer to allocated memory
   2253                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_348:
   \   0002AB                ; Setup parameters for indirect call
   \   0002AB   7410         MOV       A,#0x10
   \   0002AD   12....       LCALL     ?XSTACK_DISP101_8
   \   0002B0   8882         MOV       DPL,R0
   \   0002B2   8983         MOV       DPH,R1
   \   0002B4   12....       LCALL     ?CALL_IND
   \   0002B7   8A..         MOV       ?V0,R2
   \   0002B9   8B..         MOV       ?V1,R3
   \   0002BB   A8..         MOV       R0,?V0
   \   0002BD   A9..         MOV       R1,?V1
   \   0002BF   740E         MOV       A,#0xe
   \   0002C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C4   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   2254                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_202:
   \   0002C7   E8           MOV       A,R0
   \   0002C8   49           ORL       A,R1
   \   0002C9   604C         JZ        ??zcl_ProcessMessageMSG_15
   \   0002CB   7409         MOV       A,#0x9
   \   0002CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D0   E0           MOVX      A,@DPTR
   \   0002D1   F5..         MOV       ?V0,A
   \   0002D3   75..00       MOV       ?V1,#0x0
   \   0002D6   7402         MOV       A,#0x2
   \   0002D8   78..         MOV       R0,#?V0
   \   0002DA   12....       LCALL     ?S_SHL
   \   0002DD   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   0002DF   25..         ADD       A,?V0
   \   0002E1   F582         MOV       DPL,A
   \   0002E3   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   0002E5   35..         ADDC      A,?V1
   \   0002E7   F583         MOV       DPH,A
   \   0002E9   E4           CLR       A
   \   0002EA   93           MOVC      A,@A+DPTR
   \   0002EB   F8           MOV       R0,A
   \   0002EC   7401         MOV       A,#0x1
   \   0002EE   93           MOVC      A,@A+DPTR
   \   0002EF   F9           MOV       R1,A
   \   0002F0   8882         MOV       DPL,R0
   \   0002F2   8983         MOV       DPH,R1
   \   0002F4   E582         MOV       A,DPL
   \   0002F6   4583         ORL       A,DPH
   \   0002F8   6012         JZ        ??zcl_ProcessMessageMSG_16
   2255                {
   2256                  // Process the command
   2257                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0002FA                ; Setup parameters for indirect call
   \   0002FA   7402         MOV       A,#0x2
   \   0002FC   12....       LCALL     ?XSTACK_DISP101_8
   \   0002FF   12....       LCALL     ?CALL_IND
   2258                  {
   2259                    // Couldn't find attribute in the table.
   2260                  }
   2261                }
   2262          
   2263                // Free the buffer
   2264                if ( inMsg.attrCmd )
   \   000302   740E         MOV       A,#0xe
   \   000304   12....       LCALL     ?XSTACK_DISP0_8
   \   000307   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00030A   600B         JZ        ??zcl_ProcessMessageMSG_15
   2265                {
   2266                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_16:
   \   00030C                ; Setup parameters for call to function osal_mem_free
   \   00030C   740E         MOV       A,#0xe
   \   00030E   12....       LCALL     ?XSTACK_DISP0_8
   \   000311   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   2267                }
   \                     ??CrossCallReturnLabel_267:
   \   000314   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2268          
   2269                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zcl_ProcessMessageMSG_15:
   \   000317   7409         MOV       A,#0x9
   \   000319   12....       LCALL     ?XSTACK_DISP0_8
   \   00031C   E0           MOVX      A,@DPTR
   \   00031D   F8           MOV       R0,A
   \   00031E   6058         JZ        ??zcl_ProcessMessageMSG_17
   \   000320   7402         MOV       A,#0x2
   \   000322   68           XRL       A,R0
   \   000323   6053         JZ        ??zcl_ProcessMessageMSG_17
   \   000325   7403         MOV       A,#0x3
   \   000327   68           XRL       A,R0
   \   000328   604E         JZ        ??zcl_ProcessMessageMSG_17
   \   00032A   7405         MOV       A,#0x5
   \   00032C   68           XRL       A,R0
   \   00032D   6049         JZ        ??zcl_ProcessMessageMSG_17
   \   00032F   7406         MOV       A,#0x6
   \   000331   68           XRL       A,R0
   \   000332   6044         JZ        ??zcl_ProcessMessageMSG_17
   \   000334   7408         MOV       A,#0x8
   \   000336   68           XRL       A,R0
   \   000337   603F         JZ        ??zcl_ProcessMessageMSG_17
   \   000339   740C         MOV       A,#0xc
   \   00033B   68           XRL       A,R0
   \   00033C   603A         JZ        ??zcl_ProcessMessageMSG_17
   \   00033E   7411         MOV       A,#0x11
   \   000340   68           XRL       A,R0
   \   000341   6035         JZ        ??zcl_ProcessMessageMSG_17
   \   000343   7413         MOV       A,#0x13
   \   000345   68           XRL       A,R0
   \   000346   6030         JZ        ??zcl_ProcessMessageMSG_17
   \   000348   7415         MOV       A,#0x15
   \   00034A   68           XRL       A,R0
   \   00034B   602B         JZ        ??zcl_ProcessMessageMSG_17
   \   00034D   740B         MOV       A,#0xb
   \   00034F   68           XRL       A,R0
   \   000350   6026         JZ        ??zcl_ProcessMessageMSG_17
   2270                {
   2271                  rawAFMsg = NULL;
   2272                  return ( ZCL_PROC_SUCCESS ); // We're done
   2273                }
   2274          
   2275                status = ZSuccess;
   \   000352   7E00         MOV       R6,#0x0
   \   000354   8042         SJMP      ??zcl_ProcessMessageMSG_13
   2276              }
   2277              else
   2278              {
   2279                // Unsupported message
   2280                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_14:
   \   000356   7E82         MOV       R6,#-0x7e
   \   000358   803E         SJMP      ??zcl_ProcessMessageMSG_13
   2281              }
   2282            }
   2283            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2284            {
   2285              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_11:
   \   00035A   EC           MOV       A,R4
   \   00035B   4D           ORL       A,R5
   \   00035C   602A         JZ        ??zcl_ProcessMessageMSG_18
   \   00035E   8C82         MOV       DPL,R4
   \   000360   8D83         MOV       DPH,R5
   \   000362   A3           INC       DPTR
   \   000363   A3           INC       DPTR
   \   000364   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000367   601F         JZ        ??zcl_ProcessMessageMSG_18
   2286              {
   2287                // The return value of the plugin function will be
   2288                //  ZSuccess - Supported and need default response
   2289                //  ZFailure - Unsupported
   2290                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2291                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2292                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2293                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2294                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   000369                ; Setup parameters for indirect call
   \   000369   7402         MOV       A,#0x2
   \   00036B   12....       LCALL     ?XSTACK_DISP101_8
   \   00036E   12....       LCALL     ?CALL_IND
   \   000371   E9           MOV       A,R1
   \   000372   FE           MOV       R6,A
   2295                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   000373   74FF         MOV       A,#-0x1
   \   000375   6E           XRL       A,R6
   \   000376   700B         JNZ       ??zcl_ProcessMessageMSG_19
   2296                {
   2297                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_17:
   \   000378   90....       MOV       DPTR,#rawAFMsg
   \   00037B   E4           CLR       A
   \   00037C   F0           MOVX      @DPTR,A
   \   00037D   A3           INC       DPTR
   \   00037E   F0           MOVX      @DPTR,A
   2298                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   00037F   F9           MOV       R1,A
   \   000380   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2299                }
   2300              }
   2301          
   2302              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_19:
   \   000383   7401         MOV       A,#0x1
   \   000385   6E           XRL       A,R6
   \   000386   7010         JNZ       ??zcl_ProcessMessageMSG_13
   2303              {
   2304                // Unsupported message
   2305                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_18:
   \   000388   7404         MOV       A,#0x4
   \   00038A   12....       LCALL     ?XSTACK_DISP0_8
   \   00038D   E0           MOVX      A,@DPTR
   \   00038E   5404         ANL       A,#0x4
   \   000390   6004         JZ        ??zcl_ProcessMessageMSG_20
   2306                {
   2307                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   000392   7E83         MOV       R6,#-0x7d
   \   000394   8002         SJMP      ??zcl_ProcessMessageMSG_13
   2308                }
   2309                else
   2310                {
   2311                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_20:
   \   000396   7E81         MOV       R6,#-0x7f
   2312                }
   2313              }
   2314            }
   2315          
   2316            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_13:
   \   000398   7402         MOV       A,#0x2
   \   00039A   12....       LCALL     ?XSTACK_DISP0_8
   \   00039D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0003A0   707A         JNZ       ??zcl_ProcessMessageMSG_21
   \   0003A2   7402         MOV       A,#0x2
   \   0003A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A7   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0003AA   7070         JNZ       ??zcl_ProcessMessageMSG_21
   \   0003AC   7404         MOV       A,#0x4
   \   0003AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B1   E0           MOVX      A,@DPTR
   \   0003B2   FA           MOV       R2,A
   \   0003B3   5410         ANL       A,#0x10
   \   0003B5   7065         JNZ       ??zcl_ProcessMessageMSG_21
   2317            {
   2318              // Send a Default Response command back
   2319              defautlRspCmd.statusCode = status;
   \   0003B7   7401         MOV       A,#0x1
   \   0003B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0003BC   EE           MOV       A,R6
   \   0003BD   F0           MOVX      @DPTR,A
   2320              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0003BE   7409         MOV       A,#0x9
   \   0003C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C3   12....       LCALL     ?Subroutine61 & 0xFFFF
   2321              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2322                                     inMsg.msg->clusterId, &defautlRspCmd,
   2323                                     !inMsg.hdr.fc.direction, true,
   2324                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_92:
   \   0003C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C9   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0003CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003CF   7407         MOV       A,#0x7
   \   0003D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0003D7   75..01       MOV       ?V0,#0x1
   \   0003DA   78..         MOV       R0,#?V0
   \   0003DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003DF   EA           MOV       A,R2
   \   0003E0   13           RRC       A
   \   0003E1   13           RRC       A
   \   0003E2   13           RRC       A
   \   0003E3   541F         ANL       A,#0x1f
   \   0003E5   6401         XRL       A,#0x1
   \   0003E7   5401         ANL       A,#0x1
   \   0003E9   F5..         MOV       ?V0,A
   \   0003EB   78..         MOV       R0,#?V0
   \   0003ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003F0   7405         MOV       A,#0x5
   \   0003F2   12....       LCALL     ?XSTACK_DISP100_8
   \   0003F5   88..         MOV       ?V0,R0
   \   0003F7   89..         MOV       ?V1,R1
   \   0003F9   78..         MOV       R0,#?V0
   \   0003FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003FE   7409         MOV       A,#0x9
   \   000400   12....       LCALL     ?XSTACK_DISP0_8
   \   000403   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000406   12....       LCALL     ?XSTACK_DISP0_8
   \   000409   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00040C   12....       LCALL     ?XSTACK_DISP0_8
   \   00040F   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000412   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000415   7407         MOV       A,#0x7
   \   000417   12....       LCALL     ?DEALLOC_XSTACK8
   2325              defaultResponseSent = TRUE;
   \   00041A   D2..         SETB      ?VB.0
   2326            }
   2327          
   2328            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_21:
   \   00041C   90....       MOV       DPTR,#rawAFMsg
   \   00041F   E4           CLR       A
   \   000420   F0           MOVX      @DPTR,A
   \   000421   A3           INC       DPTR
   \   000422   F0           MOVX      @DPTR,A
   2329            if ( status == ZSuccess )
   \   000423   EE           MOV       A,R6
   \   000424   7004         JNZ       ??zcl_ProcessMessageMSG_22
   2330            {
   2331              return ( ZCL_PROC_SUCCESS );
   \   000426   7900         MOV       R1,#0x0
   \   000428   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2332            }
   2333            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_22:
   \   00042A   7484         MOV       A,#-0x7c
   \   00042C   6E           XRL       A,R6
   \   00042D   A2..         MOV       C,?VB.0
   \   00042F   700A         JNZ       ??zcl_ProcessMessageMSG_23
   2334            {
   2335              if ( defaultResponseSent )
   \   000431   5004         JNC       ??zcl_ProcessMessageMSG_24
   2336              {
   2337                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   000433   7907         MOV       R1,#0x7
   \   000435   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2338              }
   2339              else
   2340              {
   2341                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_24:
   \   000437   7906         MOV       R1,#0x6
   \   000439   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2342              }
   2343            }
   2344            else
   2345            {
   2346              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_23:
   \   00043B   5004         JNC       ??zcl_ProcessMessageMSG_25
   2347              {
   2348                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   00043D   7909         MOV       R1,#0x9
   \   00043F   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2349              }
   2350              else
   2351              {
   2352                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_25:
   \   000441   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   000443   7415         MOV       A,#0x15
   \   000445   12....       LCALL     ?DEALLOC_XSTACK8
   2353              }
   2354            }
   \   000448   02....       LJMP      ?Subroutine8 & 0xFFFF
   2355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV       A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7409         MOV       A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   C8           XCH       A,R0
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000006   7409         MOV       A,#0x9
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine116_0
   \   000004                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   E582         MOV       A,DPL
   \   000005   4583         ORL       A,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine123_0
   \   000004                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   6401         XRL       A,#0x1
   \   000008   5401         ANL       A,#0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine141_0
   \   000004                ; // Fall through to label ??Subroutine141_0
   2356          
   2357          /*********************************************************************
   2358           * PRIVATE FUNCTIONS
   2359           *********************************************************************/
   2360          
   2361          /*********************************************************************
   2362           * @fn      zclParseHdr
   2363           *
   2364           * @brief   Parse header of the ZCL format
   2365           *
   2366           * @param   hdr - place to put the frame control information
   2367           * @param   pData - incoming buffer to parse
   2368           *
   2369           * @return  pointer past the header
   2370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2371          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2373            // Clear the header
   2374            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2375          
   2376            // Parse the Frame Control
   2377            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E9           MOV       A,R1
   \   000036   12....       LCALL     ?Subroutine22 & 0xFFFF
   2378            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_17:
   \   000039   A2E2         MOV       C,0xE0 /* A   */.2
   \   00003B   5004         JNC       ??zclParseHdr_0
   \   00003D   D2F0         SETB      B.0
   \   00003F   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   000041   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   54FB         ANL       A,#0xfb
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A2F0         MOV       C,B.0
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   F5..         MOV       ?V2,A
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   7402         MOV       A,#0x2
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?S_SHL
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   45..         ORL       A,?V2
   \   000060   12....       LCALL     ?Subroutine22 & 0xFFFF
   2379            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_18:
   \   000063   A2E3         MOV       C,0xE0 /* A   */.3
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   5004         JNC       ??zclParseHdr_2
   2380            {
   2381              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006E   4408         ORL       A,#0x8
   \   000070   8002         SJMP      ??zclParseHdr_3
   2382            }
   2383            else
   2384            {
   2385              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   000072   54F7         ANL       A,#0xf7
   2386            }
   \                     ??zclParseHdr_3:
   \   000074   12....       LCALL     ?Subroutine22 & 0xFFFF
   2387          
   2388            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_19:
   \   000077   A2E4         MOV       C,0xE0 /* A   */.4
   \   000079   5004         JNC       ??zclParseHdr_4
   \   00007B   D2F0         SETB      B.0
   \   00007D   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007F   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   000081   85..82       MOV       DPL,?V0
   \   000084   85..83       MOV       DPH,?V1
   \   000087   E0           MOVX      A,@DPTR
   \   000088   54EF         ANL       A,#0xef
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A2F0         MOV       C,B.0
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   F5..         MOV       ?V2,A
   \   000091   7404         MOV       A,#0x4
   \   000093   78..         MOV       R0,#?V2
   \   000095   12....       LCALL     ?S_SHL
   \   000098   E0           MOVX      A,@DPTR
   \   000099   45..         ORL       A,?V2
   \   00009B   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   2389            pData++;  // move past the frame control field
   2390          
   2391            // parse the manfacturer code
   2392            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_241:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   5404         ANL       A,#0x4
   \   0000A7   601C         JZ        ??zclParseHdr_6
   2393            {
   2394              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FA           MOV       R2,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   EA           MOV       A,R2
   \   0000B3   85..82       MOV       DPL,?V0
   \   0000B6   85..83       MOV       DPH,?V1
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   2395              pData += 2;
   \                     ??CrossCallReturnLabel_198:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   2402         ADD       A,#0x2
   \   0000C1   FE           MOV       R6,A
   \   0000C2   5001         JNC       ??zclParseHdr_6
   \   0000C4   0F           INC       R7
   2396            }
   2397          
   2398            // parse the Transaction Sequence Number
   2399            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000C5   8E82         MOV       DPL,R6
   \   0000C7   8F83         MOV       DPH,R7
   \   0000C9   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   2400          
   2401            // parse the Cluster's command ID
   2402            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_236:
   \   0000D1   85..82       MOV       DPL,?V0
   \   0000D4   85..83       MOV       DPH,?V1
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   F0           MOVX      @DPTR,A
   2403          
   2404            // Should point to the frame payload
   2405            return ( pData );
   \   0000DD   EE           MOV       A,R6
   \   0000DE   2402         ADD       A,#0x2
   \   0000E0   FA           MOV       R2,A
   \   0000E1   E4           CLR       A
   \   0000E2   3F           ADDC      A,R7
   \   0000E3   FB           MOV       R3,A
   \   0000E4   02....       LJMP      ?Subroutine3 & 0xFFFF
   2406          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   AE82         MOV       R6,DPL
   \   000005   AF83         MOV       R7,DPH
   \   000007   22           RET
   2407          
   2408          /*********************************************************************
   2409           * @fn      zclBuildHdr
   2410           *
   2411           * @brief   Build header of the ZCL format
   2412           *
   2413           * @param   hdr - outgoing header information
   2414           * @param   pData - outgoing header space
   2415           *
   2416           * @return  pointer past the header
   2417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2419          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2420            // Build the Frame Control byte
   2421            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   2422            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_212:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine21 & 0xFFFF
   2423            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_210:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine21 & 0xFFFF
   2424            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_211:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2425            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2426          
   2427            // Add the manfacturer code
   2428            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   6012         JZ        ??zclBuildHdr_0
   2429            {
   2430              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   12....       LCALL     ?Subroutine80 & 0xFFFF
   2431              *pData++ = HI_UINT16( hdr->manuCode );
   2432            }
   \                     ??CrossCallReturnLabel_129:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   8C82         MOV       DPL,R4
   \   00003B   8D83         MOV       DPH,R5
   \   00003D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000040   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000043   FC           MOV       R4,A
   \   000044   5001         JNC       ??zclBuildHdr_0
   \   000046   0D           INC       R5
   2433          
   2434            // Add the Transaction Sequence Number
   2435            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   8C82         MOV       DPL,R4
   \   000052   8D83         MOV       DPH,R5
   \   000054   12....       LCALL     ?Subroutine91 & 0xFFFF
   2436          
   2437            // Add the Cluster's command ID
   2438            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_216:
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   12....       LCALL     ?Subroutine64 & 0xFFFF
   2439          
   2440            // Should point to the frame payload
   2441            return ( pData );
   \                     ??CrossCallReturnLabel_99:
   \   00005F   FA           MOV       R2,A
   \   000060   E4           CLR       A
   \   000061   3D           ADDC      A,R5
   \   000062   FB           MOV       R3,A
   \   000063   80..         SJMP      ??Subroutine121_0
   2442          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EC           MOV       A,R4
   \   000008   2402         ADD       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine120_0
   \   000007                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2443          
   2444          /*********************************************************************
   2445           * @fn      zclCalcHdrSize
   2446           *
   2447           * @brief   Calculate the number of bytes needed for an outgoing
   2448           *          ZCL header.
   2449           *
   2450           * @param   hdr - outgoing header information
   2451           *
   2452           * @return  returns the number of bytes needed
   2453           */
   2454          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2455          {
   2456            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2457          
   2458            // Add the manfacturer code
   2459            if ( hdr->fc.manuSpecific )
   2460            {
   2461              needed += 2;
   2462            }
   2463          
   2464            return ( needed );
   2465          }
   2466          
   2467          /*********************************************************************
   2468           * @fn      zclFindPlugin
   2469           *
   2470           * @brief   Find the right plugin for a cluster ID
   2471           *
   2472           * @param   clusterID - cluster ID to look for
   2473           * @param   profileID - profile ID
   2474           *
   2475           * @return  pointer to plugin, NULL if not found
   2476           */
   2477          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2478          {
   2479            zclLibPlugin_t *pLoop = plugins;
   2480          
   2481            (void)profileID;  // Intentionally unreferenced parameter
   2482          
   2483            while ( pLoop != NULL )
   2484            {
   2485              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2486              {
   2487                return ( pLoop );
   2488              }
   2489          
   2490              pLoop = pLoop->next;
   2491            }
   2492          
   2493            return ( (zclLibPlugin_t *)NULL );
   2494          }
   2495          
   2496          #ifdef ZCL_DISCOVER
   2497          /*********************************************************************
   2498           * @fn      zclFindCmdRecsList
   2499           *
   2500           * @brief   Find the right command record list for an endpoint
   2501           *
   2502           * @param   endpoint - endpoint to look for
   2503           *
   2504           * @return  pointer to record list, NULL if not found
   2505           */
   2506          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   2507          {
   2508            zclCmdRecsList_t *pLoop = gpCmdList;
   2509          
   2510            while ( pLoop != NULL )
   2511            {
   2512              if ( pLoop->endpoint == endpoint )
   2513              {
   2514                return ( pLoop );
   2515              }
   2516          
   2517              pLoop = pLoop->pNext;
   2518            }
   2519          
   2520            return ( NULL );
   2521          }
   2522          
   2523          /*********************************************************************
   2524           * @fn      zclFindCmdRec
   2525           *
   2526           * @brief   Find the command record that matchs the parameters
   2527           *
   2528           * @param   endpoint - Application's endpoint
   2529           * @param   clusterID - cluster ID
   2530           * @param   attrId - attribute looking for
   2531           * @param   pAttr - attribute record to be returned
   2532           *
   2533           * @return  TRUE if record found. FALSE, otherwise.
   2534           */
   2535          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   2536          {
   2537            uint8 i;
   2538            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   2539          
   2540            if ( pRec != NULL )
   2541            {
   2542              for ( i = 0; i < pRec->numCommands; i++ )
   2543              {
   2544                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   2545                {
   2546                  *pCmd = pRec->pCmdRecs[i];
   2547          
   2548                  return ( TRUE ); // EMBEDDED RETURN
   2549                }
   2550              }
   2551            }
   2552          
   2553            return ( FALSE );
   2554          }
   2555          #endif // ZCL_DISCOVER
   2556          
   2557          /*********************************************************************
   2558           * @fn      zclFindAttrRecsList
   2559           *
   2560           * @brief   Find the right attribute record list for an endpoint
   2561           *
   2562           * @param   clusterID - endpointto look for
   2563           *
   2564           * @return  pointer to record list, NULL if not found
   2565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2566          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2567          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2568            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2569          
   2570            while ( pLoop != NULL )
   2571            {
   2572              if ( pLoop->endpoint == endpoint )
   2573              {
   2574                return ( pLoop );
   2575              }
   2576          
   2577              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2578            }
   2579          
   2580            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2581          }
   2582          
   2583          /*********************************************************************
   2584           * @fn      zclFindAttrRec
   2585           *
   2586           * @brief   Find the attribute record that matchs the parameters
   2587           *
   2588           * @param   endpoint - Application's endpoint
   2589           * @param   clusterID - cluster ID
   2590           * @param   attrId - attribute looking for
   2591           * @param   pAttr - attribute record to be returned
   2592           *
   2593           * @return  TRUE if record found. FALSE, otherwise.
   2594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2595          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2597            uint8 x;
   2598            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2599          
   2600            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V5
   \   000017   6078         JZ        ??zclFindAttrRec_0
   2601            {
   2602              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000019   7C00         MOV       R4,#0x0
   \   00001B   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   00001D   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   00001E   85..82       MOV       DPL,?V4
   \   000021   85..83       MOV       DPH,?V5
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   EC           MOV       A,R4
   \   00002E   C3           CLR       C
   \   00002F   98           SUBB      A,R0
   \   000030   505F         JNC       ??zclFindAttrRec_0
   2603              {
   2604                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   000032   EC           MOV       A,R4
   \   000033   F5..         MOV       ?V6,A
   \   000035   75..00       MOV       ?V7,#0x0
   \   000038   7403         MOV       A,#0x3
   \   00003A   78..         MOV       R0,#?V6
   \   00003C   12....       LCALL     ?S_SHL
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   25..         ADD       A,?V6
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   35..         ADDC      A,?V7
   \   000055   F9           MOV       R1,A
   \   000056   8882         MOV       DPL,R0
   \   000058   8983         MOV       DPH,R1
   \   00005A   E4           CLR       A
   \   00005B   93           MOVC      A,@A+DPTR
   \   00005C   FA           MOV       R2,A
   \   00005D   7401         MOV       A,#0x1
   \   00005F   93           MOVC      A,@A+DPTR
   \   000060   FB           MOV       R3,A
   \   000061   E5..         MOV       A,?V0
   \   000063   6A           XRL       A,R2
   \   000064   7003         JNZ       ??zclFindAttrRec_3
   \   000066   E5..         MOV       A,?V1
   \   000068   6B           XRL       A,R3
   \                     ??zclFindAttrRec_3:
   \   000069   70B2         JNZ       ??zclFindAttrRec_2
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   E4           CLR       A
   \   00006E   93           MOVC      A,@A+DPTR
   \   00006F   FA           MOV       R2,A
   \   000070   7401         MOV       A,#0x1
   \   000072   93           MOVC      A,@A+DPTR
   \   000073   FB           MOV       R3,A
   \   000074   EE           MOV       A,R6
   \   000075   6A           XRL       A,R2
   \   000076   7002         JNZ       ??zclFindAttrRec_4
   \   000078   EF           MOV       A,R7
   \   000079   6B           XRL       A,R3
   \                     ??zclFindAttrRec_4:
   \   00007A   70A1         JNZ       ??zclFindAttrRec_2
   2605                {
   2606                  *pAttr = pRec->attrs[x];
   \   00007C   7410         MOV       A,#0x10
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000084   8983         MOV       DPH,R1
   \   000086   8882         MOV       DPL,R0
   \   000088   7408         MOV       A,#0x8
   \   00008A   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2607          
   2608                  return ( TRUE ); // EMBEDDED RETURN
   \   00008D   7901         MOV       R1,#0x1
   \   00008F   8002         SJMP      ??zclFindAttrRec_5
   2609                }
   2610              }
   2611            }
   2612          
   2613            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   000091   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   000093   80..         SJMP      ??Subroutine122_0
   2614          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2615          
   2616          #if defined ( ZCL_STANDALONE )
   2617          /*********************************************************************
   2618           * @fn      zclSetAttrRecList
   2619           *
   2620           * @brief   Set attribute record list for end point
   2621           *
   2622           * @param   endpoint - endpoint the attribute list belongs to
   2623           * @param   numAttr - number of attributes in list
   2624           * @param   attrList - array of attribute records.
   2625           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2626           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2627           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2628           *                     ATTRIBUTE INFO
   2629           *
   2630           * @return  TRUE if successful, FALSE otherwise.
   2631           */
   2632          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2633          {
   2634            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2635          
   2636            if ( pRecsList != NULL )
   2637            {
   2638              pRecsList->numAttributes = numAttr;
   2639              pRecsList->attrs = attrList;
   2640              return ( TRUE );
   2641            }
   2642          
   2643            return ( FALSE );
   2644          }
   2645          
   2646          #endif // ZCL_STANDALONE
   2647          
   2648          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2649          /*********************************************************************
   2650           * @fn      zclGetReadWriteCB
   2651           *
   2652           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2653           *
   2654           * @param   endpoint - Application's endpoint
   2655           *
   2656           * @return  Read/Write CB, NULL if not found
   2657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2658          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2659          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2660            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2661          
   2662            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetReadWriteCB_0
   2663            {
   2664              return ( pRec->pfnReadWriteCB );
   \   000012   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   2665            }
   \                     ??CrossCallReturnLabel_274:
   \   000015   8004         SJMP      ??zclGetReadWriteCB_1
   2666          
   2667            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   00001B   80..         SJMP      ?Subroutine2
   2668          }
   2669          
   2670          /*********************************************************************
   2671           * @fn      zclGetAuthorizeCB
   2672           *
   2673           * @brief   Get the Read/Write Authorization callback function pointer
   2674           *          for a given endpoint.
   2675           *
   2676           * @param   endpoint - Application's endpoint
   2677           *
   2678           * @return  Authorization CB, NULL if not found
   2679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2680          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2681          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2682            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2683          
   2684            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetAuthorizeCB_0
   2685            {
   2686              return ( pRec->pfnAuthorizeCB );
   \   000012   12....       LCALL     ?Subroutine54 & 0xFFFF
   2687            }
   \                     ??CrossCallReturnLabel_278:
   \   000015   8004         SJMP      ??zclGetAuthorizeCB_1
   2688          
   2689            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   00001B                REQUIRE ?Subroutine2
   \   00001B                ; // Fall through to label ?Subroutine2
   2690          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine130_0
   \   000001                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine131_0
   \   000001                ; // Fall through to label ??Subroutine131_0
   2691          #endif // ZCL_READ || ZCL_WRITE
   2692          
   2693          /*********************************************************************
   2694           * @fn      zclFindClusterOption
   2695           *
   2696           * @brief   Find the option record that matchs the cluster id
   2697           *
   2698           * @param   endpoint - Application's endpoint
   2699           * @param   clusterID - cluster ID looking for
   2700           *
   2701           * @return  pointer to clutser option, NULL if not found
   2702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2703          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2704          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2705            zclClusterOptionList *pLoop;
   2706          
   2707            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2708            while ( pLoop != NULL )
   2709            {
   2710              if ( pLoop->endpoint == endpoint )
   2711              {
   2712                uint8 x;
   2713                for ( x = 0; x < pLoop->numOptions; x++ )
   2714                {
   2715                  if ( pLoop->options[x].clusterID == clusterID )
   2716                  {
   2717                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2718                  }
   2719                }
   2720              }
   2721          
   2722              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000017   6046         JZ        ??zclFindClusterOption_2
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6F           XRL       A,R7
   \   000021   70ED         JNZ       ??zclFindClusterOption_1
   \   000023   7E00         MOV       R6,#0x0
   \   000025   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000027   0E           INC       R6
   \                     ??zclFindClusterOption_3:
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   EE           MOV       A,R6
   \   000032   C3           CLR       C
   \   000033   9A           SUBB      A,R2
   \   000034   50DA         JNC       ??zclFindClusterOption_1
   \   000036   EE           MOV       A,R6
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FA           MOV       R2,A
   \   00003C   85F0..       MOV       ?V0,B
   \   00003F   AB..         MOV       R3,?V0
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   3B           ADDC      A,R3
   \   00004F   FB           MOV       R3,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6C           XRL       A,R4
   \   000056   7003         JNZ       ??zclFindClusterOption_5
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005B   70CA         JNZ       ??zclFindClusterOption_4
   \   00005D   8004         SJMP      ??zclFindClusterOption_6
   2723            }
   2724          
   2725            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000063   02....       LJMP      ??Subroutine121_0 & 0xFFFF
   2726          }
   2727          
   2728          /*********************************************************************
   2729           * @fn      zclGetClusterOption
   2730           *
   2731           * @brief   Get the option record that matchs the cluster id
   2732           *
   2733           * @param   endpoint - Application's endpoint
   2734           * @param   clusterID - cluster ID looking for
   2735           *
   2736           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2738          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2740            uint8 option;
   2741            zclOptionRec_t *pOption;
   2742          
   2743            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2744            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2745            {
   2746              option = pOption->option;
   2747              if ( !ZG_SECURE_ENABLED )
   2748              {
   2749                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2750              }
   2751          
   2752              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2753            }
   2754          
   2755            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A   02....       LJMP      ?Subroutine2 & 0xFFFF
   2756          }
   2757          
   2758          /*********************************************************************
   2759           * @fn      zclSetSecurityOption
   2760           *
   2761           * @brief   Set the security option for the cluster id
   2762           *
   2763           * @param   endpoint - Application's endpoint
   2764           * @param   clusterID - cluster ID looking for
   2765           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2766           *
   2767           * @return  none
   2768           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2769          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2771            zclOptionRec_t *pOption;
   2772          
   2773            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   2774            if ( pOption != NULL )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6015         JZ        ??zclSetSecurityOption_0
   2775            {
   2776              if ( enable )
   \   000016   E8           MOV       A,R0
   \   000017   2402         ADD       A,#0x2
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??zclSetSecurityOption_1
   2777              {
   2778                pOption->option |= AF_EN_SECURITY;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E6         SETB      0xE0 /* A   */.6
   \   000025   8003         SJMP      ??zclSetSecurityOption_2
   2779              }
   2780              else
   2781              {
   2782                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   00002A   F0           MOVX      @DPTR,A
   2783              }
   2784            }
   2785          }
   \                     ??zclSetSecurityOption_0:
   \   00002B   02....       LJMP      ?Subroutine2 & 0xFFFF
   2786          
   2787          #ifdef ZCL_DISCOVER
   2788          /*********************************************************************
   2789           * @fn      zclFindNextCmdRec
   2790           *
   2791           * @brief   Find the command (or next) record that matchs the parameters
   2792           *
   2793           * @param   endpoint - Application's endpoint
   2794           * @param   clusterID - cluster ID
   2795           * @param   commandID - command ID from requesting command
   2796           * @param   direction- direction of received command
   2797           * @param   pCmdID - command looking for
   2798           * @param   pCmd - command information within command record list
   2799           *
   2800           * @return  pointer to command record, NULL no more records of this cluster
   2801           */
   2802          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   2803                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2804          {
   2805            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   2806            uint8 i;
   2807          
   2808            if ( pRec != NULL )
   2809            {
   2810              for ( i = 0; i < pRec->numCommands; i++ )
   2811              {
   2812                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2813                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2814                {
   2815                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2816                  {
   2817                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   2818                    {
   2819                      *pCmd = pRec->pCmdRecs[i];
   2820          
   2821                      // Update command ID
   2822                      *pCmdID = pCmd->cmdID;
   2823          
   2824                      return ( TRUE ); // EMBEDDED RETURN
   2825                    }
   2826                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   2827                    {
   2828                      *pCmd = pRec->pCmdRecs[i];
   2829          
   2830                      // Update command ID
   2831                      *pCmdID = pCmd->cmdID;
   2832          
   2833                      return ( TRUE ); // EMBEDDED RETURN
   2834                    }
   2835                  }
   2836                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   2837                  {
   2838                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   2839                    {
   2840                      *pCmd = pRec->pCmdRecs[i];
   2841          
   2842                      // Update command ID
   2843                      *pCmdID = pCmd->cmdID;
   2844          
   2845                      return ( TRUE ); // EMBEDDED RETURN
   2846                    }
   2847                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   2848                    {
   2849                      *pCmd = pRec->pCmdRecs[i];
   2850          
   2851                      // Update command ID
   2852                      *pCmdID = pCmd->cmdID;
   2853          
   2854                      return ( TRUE ); // EMBEDDED RETURN
   2855                    }
   2856                  }
   2857                  else
   2858                  {
   2859                    return ( FALSE ); // Incorrect Command ID
   2860                  }
   2861                }
   2862              }
   2863            }
   2864          
   2865            return ( FALSE );
   2866          }
   2867          
   2868          /*********************************************************************
   2869           * @fn      zclFindNextAttrRec
   2870           *
   2871           * @brief   Find the attribute (or next) record that matchs the parameters
   2872           *
   2873           * @param   endpoint - Application's endpoint
   2874           * @param   clusterID - cluster ID
   2875           * @param   attr - attribute looking for
   2876           *
   2877           * @return  pointer to attribute record, NULL if not found
   2878           */
   2879          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   2880                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2881          {
   2882            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   2883            uint8 attrDir;
   2884          
   2885            if ( pRec != NULL )
   2886            {
   2887              uint16 x;
   2888          
   2889              for ( x = 0; x < pRec->numAttributes; x++ )
   2890              {
   2891                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2892                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   2893                {
   2894                  // also make sure direction is right
   2895                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2896                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   2897                  {
   2898                    // return attribute and found attribute ID
   2899                    *pAttr = pRec->attrs[x];
   2900                    *attrId = pAttr->attr.attrId;
   2901          
   2902                    return ( TRUE ); // EMBEDDED RETURN
   2903                  }
   2904                }
   2905              }
   2906            }
   2907          
   2908            return ( FALSE );
   2909          }
   2910          #endif // ZCL_DISCOVER
   2911          
   2912          /*********************************************************************
   2913           * @fn      zclSerializeData
   2914           *
   2915           * @brief   Builds a buffer from the attribute data to sent out over
   2916           *          the air.
   2917           *          NOTE - Not compatible with application's attributes callbacks.
   2918           *
   2919           * @param   dataType - data types defined in zcl.h
   2920           * @param   attrData - pointer to the attribute data
   2921           * @param   buf - where to put the serialized data
   2922           *
   2923           * @return  pointer to end of destination buffer
   2924           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2925          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2926          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2927            uint8 *pStr;
   2928            uint16 len;
   2929          
   2930            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2931            {
   2932              return ( buf );
   2933            }
   2934          
   2935            switch ( dataType )
   \   000014   EA           MOV       A,R2
   \   000015   2402         ADD       A,#0x2
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E..         MOV       ?V0,R6
   \   000028   8F..         MOV       ?V1,R7
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   E9           MOV       A,R1
   \   00002E   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000031   04           DB        4
   \   000032   41           DB        65
   \   000033   42           DB        66
   \   000034   ....         DW        ??zclSerializeData_1
   \   000036   43           DB        67
   \   000037   44           DB        68
   \   000038   ....         DW        ??zclSerializeData_2
   \   00003A   E0           DB        224
   \   00003B   E2           DB        226
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   E8           DB        232
   \   00003F   E9           DB        233
   \   000040   ....         DW        ??zclSerializeData_4
   \   000042   21           DB        33
   \   000043   08           DB        8
   \   000044   ....         DW        ??zclSerializeData_5
   \   000046   09           DB        9
   \   000047   ....         DW        ??zclSerializeData_4
   \   000049   0A           DB        10
   \   00004A   ....         DW        ??zclSerializeData_6
   \   00004C   0B           DB        11
   \   00004D   ....         DW        ??zclSerializeData_3
   \   00004F   10           DB        16
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   18           DB        24
   \   000053   ....         DW        ??zclSerializeData_5
   \   000055   19           DB        25
   \   000056   ....         DW        ??zclSerializeData_4
   \   000058   1A           DB        26
   \   000059   ....         DW        ??zclSerializeData_6
   \   00005B   1B           DB        27
   \   00005C   ....         DW        ??zclSerializeData_3
   \   00005E   20           DB        32
   \   00005F   ....         DW        ??zclSerializeData_5
   \   000061   21           DB        33
   \   000062   ....         DW        ??zclSerializeData_4
   \   000064   22           DB        34
   \   000065   ....         DW        ??zclSerializeData_6
   \   000067   23           DB        35
   \   000068   ....         DW        ??zclSerializeData_3
   \   00006A   24           DB        36
   \   00006B   ....         DW        ??zclSerializeData_7
   \   00006D   25           DB        37
   \   00006E   ....         DW        ??zclSerializeData_8
   \   000070   26           DB        38
   \   000071   ....         DW        ??zclSerializeData_9
   \   000073   27           DB        39
   \   000074   ....         DW        ??zclSerializeData_10
   \   000076   28           DB        40
   \   000077   ....         DW        ??zclSerializeData_5
   \   000079   29           DB        41
   \   00007A   ....         DW        ??zclSerializeData_4
   \   00007C   2A           DB        42
   \   00007D   ....         DW        ??zclSerializeData_6
   \   00007F   2B           DB        43
   \   000080   ....         DW        ??zclSerializeData_3
   \   000082   2C           DB        44
   \   000083   ....         DW        ??zclSerializeData_7
   \   000085   2D           DB        45
   \   000086   ....         DW        ??zclSerializeData_8
   \   000088   2E           DB        46
   \   000089   ....         DW        ??zclSerializeData_9
   \   00008B   2F           DB        47
   \   00008C   ....         DW        ??zclSerializeData_10
   \   00008E   30           DB        48
   \   00008F   ....         DW        ??zclSerializeData_5
   \   000091   31           DB        49
   \   000092   ....         DW        ??zclSerializeData_4
   \   000094   38           DB        56
   \   000095   ....         DW        ??zclSerializeData_4
   \   000097   39           DB        57
   \   000098   ....         DW        ??zclSerializeData_3
   \   00009A   3A           DB        58
   \   00009B   ....         DW        ??zclSerializeData_10
   \   00009D   EA           DB        234
   \   00009E   ....         DW        ??zclSerializeData_3
   \   0000A0   F0           DB        240
   \   0000A1   ....         DW        ??zclSerializeData_10
   \   0000A3   F1           DB        241
   \   0000A4   ....         DW        ??zclSerializeData_11
   \   0000A6   ....         DW        ??zclSerializeData_0
   2936            {
   2937              case ZCL_DATATYPE_DATA8:
   2938              case ZCL_DATATYPE_BOOLEAN:
   2939              case ZCL_DATATYPE_BITMAP8:
   2940              case ZCL_DATATYPE_INT8:
   2941              case ZCL_DATATYPE_UINT8:
   2942              case ZCL_DATATYPE_ENUM8:
   2943                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   0000A8   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   EC           MOV       A,R4
   \   0000AD   FA           MOV       R2,A
   \   0000AE   ED           MOV       A,R5
   \   0000AF   FB           MOV       R3,A
   2944                 break;
   \   0000B0   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2945          
   2946              case ZCL_DATATYPE_DATA16:
   2947              case ZCL_DATATYPE_BITMAP16:
   2948              case ZCL_DATATYPE_UINT16:
   2949              case ZCL_DATATYPE_INT16:
   2950              case ZCL_DATATYPE_ENUM16:
   2951              case ZCL_DATATYPE_SEMI_PREC:
   2952              case ZCL_DATATYPE_CLUSTER_ID:
   2953              case ZCL_DATATYPE_ATTR_ID:
   2954                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000B3   12....       LCALL     ?Subroutine16 & 0xFFFF
   2955                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_234:
   \   0000B6   8C82         MOV       DPL,R4
   \   0000B8   8D83         MOV       DPH,R5
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   0A           INC       R2
   \   0000BC   0A           INC       R2
   \   0000BD   AB..         MOV       R3,?V5
   2956                break;
   \   0000BF   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2957          
   2958              case ZCL_DATATYPE_DATA24:
   2959              case ZCL_DATATYPE_BITMAP24:
   2960              case ZCL_DATATYPE_UINT24:
   2961              case ZCL_DATATYPE_INT24:
   2962                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?L_MOV_X
   \   0000CB   8A82         MOV       DPL,R2
   \   0000CD   8B83         MOV       DPH,R3
   \   0000CF   E5..         MOV       A,?V0
   \   0000D1   12....       LCALL     ?Subroutine109 & 0xFFFF
   2963                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_248:
   \   0000D4   78..         MOV       R0,#?V0
   \   0000D6   12....       LCALL     ?L_MOV_X
   \   0000D9   E5..         MOV       A,?V1
   \   0000DB   8C82         MOV       DPL,R4
   \   0000DD   8D83         MOV       DPH,R5
   \   0000DF   12....       LCALL     ?Subroutine109 & 0xFFFF
   2964                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_249:
   \   0000E2   78..         MOV       R0,#?V0
   \   0000E4   12....       LCALL     ?L_MOV_X
   \   0000E7   7410         MOV       A,#0x10
   \   0000E9   78..         MOV       R0,#?V0
   \   0000EB   12....       LCALL     ?UL_SHR
   \   0000EE   85..82       MOV       DPL,?V4
   \   0000F1   85..83       MOV       DPH,?V5
   \   0000F4   E5..         MOV       A,?V0
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   EA           MOV       A,R2
   \   0000F8   2403         ADD       A,#0x3
   \   0000FA   FA           MOV       R2,A
   \   0000FB   506D         JNC       ??zclSerializeData_0
   \   0000FD   0B           INC       R3
   2965                break;
   \   0000FE   806A         SJMP      ??zclSerializeData_0
   2966          
   2967              case ZCL_DATATYPE_DATA32:
   2968              case ZCL_DATATYPE_BITMAP32:
   2969              case ZCL_DATATYPE_UINT32:
   2970              case ZCL_DATATYPE_INT32:
   2971              case ZCL_DATATYPE_SINGLE_PREC:
   2972              case ZCL_DATATYPE_TOD:
   2973              case ZCL_DATATYPE_DATE:
   2974              case ZCL_DATATYPE_UTC:
   2975              case ZCL_DATATYPE_BAC_OID:
   2976                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000100                ; Setup parameters for call to function osal_buffer_uint32
   \   000100   8E82         MOV       DPL,R6
   \   000102   8F83         MOV       DPH,R7
   \   000104   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000107   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00010A   7404         MOV       A,#0x4
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   2977                break;
   \   00010F   8059         SJMP      ??zclSerializeData_0
   2978          
   2979              case ZCL_DATATYPE_UINT40:
   2980              case ZCL_DATATYPE_INT40:
   2981                pStr = (uint8*)attrData;
   2982                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000111                ; Setup parameters for call to function osal_memcpy
   \   000111   78..         MOV       R0,#?V0
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000116   7C05         MOV       R4,#0x5
   \   000118   8046         SJMP      ??zclSerializeData_12
   2983                break;
   2984          
   2985              case ZCL_DATATYPE_UINT48:
   2986              case ZCL_DATATYPE_INT48:
   2987                pStr = (uint8*)attrData;
   2988                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   00011A                ; Setup parameters for call to function osal_memcpy
   \   00011A   78..         MOV       R0,#?V0
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011F   7C06         MOV       R4,#0x6
   \   000121   803D         SJMP      ??zclSerializeData_12
   2989                break;
   2990          
   2991              case ZCL_DATATYPE_UINT56:
   2992              case ZCL_DATATYPE_INT56:
   2993                pStr = (uint8*)attrData;
   2994                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000123                ; Setup parameters for call to function osal_memcpy
   \   000123   78..         MOV       R0,#?V0
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000128   7C07         MOV       R4,#0x7
   \   00012A   8034         SJMP      ??zclSerializeData_12
   2995                break;
   2996          
   2997              case ZCL_DATATYPE_DOUBLE_PREC:
   2998              case ZCL_DATATYPE_IEEE_ADDR:
   2999              case ZCL_DATATYPE_UINT64:
   3000              case ZCL_DATATYPE_INT64:
   3001                pStr = (uint8*)attrData;
   3002                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   00012C                ; Setup parameters for call to function osal_memcpy
   \   00012C   78..         MOV       R0,#?V0
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000131   7C08         MOV       R4,#0x8
   \   000133   802B         SJMP      ??zclSerializeData_12
   3003                break;
   3004          
   3005              case ZCL_DATATYPE_CHAR_STR:
   3006              case ZCL_DATATYPE_OCTET_STR:
   3007                pStr = (uint8*)attrData;
   3008                len = *pStr;
   3009                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   000135                ; Setup parameters for call to function osal_memcpy
   \   000135   78..         MOV       R0,#?V0
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013A   8E82         MOV       DPL,R6
   \   00013C   8F83         MOV       DPH,R7
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   2401         ADD       A,#0x1
   \   000141   FC           MOV       R4,A
   \   000142   E4           CLR       A
   \   000143   3400         ADDC      A,#0x0
   \   000145   800F         SJMP      ??zclSerializeData_13
   3010                break;
   3011          
   3012              case ZCL_DATATYPE_LONG_CHAR_STR:
   3013              case ZCL_DATATYPE_LONG_OCTET_STR:
   3014                pStr = (uint8*)attrData;
   3015                len = BUILD_UINT16( pStr[0], pStr[1] );
   3016                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   000147                ; Setup parameters for call to function osal_memcpy
   \   000147   78..         MOV       R0,#?V0
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014C   8E82         MOV       DPL,R6
   \   00014E   8F83         MOV       DPH,R7
   \   000150   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000153   FC           MOV       R4,A
   \   000154   E4           CLR       A
   \   000155   39           ADDC      A,R1
   \                     ??zclSerializeData_13:
   \   000156   FD           MOV       R5,A
   \   000157   8009         SJMP      ??zclSerializeData_14
   3017                break;
   3018          
   3019              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3020                pStr = (uint8*)attrData;
   3021                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   000159                ; Setup parameters for call to function osal_memcpy
   \   000159   78..         MOV       R0,#?V0
   \   00015B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015E   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_12:
   \   000160   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_14:
   \   000162   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000165   7403         MOV       A,#0x3
   \   000167   12....       LCALL     ?DEALLOC_XSTACK8
   3022                break;
   3023          
   3024              case ZCL_DATATYPE_NO_DATA:
   3025              case ZCL_DATATYPE_UNKNOWN:
   3026                // Fall through
   3027          
   3028              default:
   3029                break;
   3030            }
   3031          
   3032            return ( buf );
   \                     ??zclSerializeData_0:
   \   00016A   02....       LJMP      ?Subroutine8 & 0xFFFF
   3033          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine126_0
   \   000004                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EC           MOV       A,R4
   \   000006   2402         ADD       A,#0x2
   \   000008   22           RET
   3034          
   3035          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3036          /*********************************************************************
   3037           * @fn      zclAnalogDataType
   3038           *
   3039           * @brief   Checks to see if Data Type is Analog
   3040           *
   3041           * @param   dataType - data type
   3042           *
   3043           * @return  TRUE if data type is analog
   3044           */
   3045          uint8 zclAnalogDataType( uint8 dataType )
   3046          {
   3047            uint8 analog;
   3048          
   3049            switch ( dataType )
   3050            {
   3051              case ZCL_DATATYPE_UINT8:
   3052              case ZCL_DATATYPE_UINT16:
   3053              case ZCL_DATATYPE_UINT24:
   3054              case ZCL_DATATYPE_UINT32:
   3055              case ZCL_DATATYPE_UINT40:
   3056              case ZCL_DATATYPE_UINT48:
   3057              case ZCL_DATATYPE_UINT56:
   3058              case ZCL_DATATYPE_UINT64:
   3059              case ZCL_DATATYPE_INT8:
   3060              case ZCL_DATATYPE_INT16:
   3061              case ZCL_DATATYPE_INT24:
   3062              case ZCL_DATATYPE_INT32:
   3063              case ZCL_DATATYPE_INT40:
   3064              case ZCL_DATATYPE_INT48:
   3065              case ZCL_DATATYPE_INT56:
   3066              case ZCL_DATATYPE_INT64:
   3067              case ZCL_DATATYPE_SEMI_PREC:
   3068              case ZCL_DATATYPE_SINGLE_PREC:
   3069              case ZCL_DATATYPE_DOUBLE_PREC:
   3070              case ZCL_DATATYPE_TOD:
   3071              case ZCL_DATATYPE_DATE:
   3072              case ZCL_DATATYPE_UTC:
   3073                analog = TRUE;
   3074                break;
   3075          
   3076              default:
   3077                analog = FALSE;
   3078                break;
   3079            }
   3080          
   3081            return ( analog );
   3082          }
   3083          
   3084          /*********************************************************************
   3085           * @fn      zclIsLittleEndianMachine
   3086           *
   3087           * @brief   Verifies endianness in system.
   3088           *
   3089           * @param   none
   3090           *
   3091           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3092           */
   3093          static int zclIsLittleEndianMachine(void)
   3094          {
   3095            uint16 test = 0x0001;
   3096          
   3097            return (*((uint8 *)(&test)));
   3098          }
   3099          
   3100          /*********************************************************************
   3101           * @fn      zcl_BuildAnalogData
   3102           *
   3103           * @brief   Build an analog arribute out of sequential bytes.
   3104           *
   3105           * @param   dataType - type of data
   3106           * @param   pData - pointer to data
   3107           * @param   pBuf - where to put the data
   3108           *
   3109           * @return  none
   3110           */
   3111          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3112          {
   3113            int current_byte_index;
   3114            int remaining_bytes;
   3115            int step;
   3116          
   3117            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3118          
   3119            // decide if move forward or backwards to copy data
   3120            if ( zclIsLittleEndianMachine() )
   3121            {
   3122              step = 1;
   3123              current_byte_index = 0;
   3124            }
   3125            else
   3126            {
   3127              step = -1;
   3128              current_byte_index = remaining_bytes - 1;
   3129            }
   3130          
   3131            while ( remaining_bytes-- )
   3132            {
   3133              pData[current_byte_index] = *(pBuf++);
   3134              current_byte_index += step;
   3135            }
   3136          }
   3137          #endif
   3138          
   3139          /*********************************************************************
   3140           * @fn      zclGetDataTypeLength
   3141           *
   3142           * @brief   Return the length of the datatype in octet.
   3143           *
   3144           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3145           *                ZCL_DATATYPE_CHAR_STR data types.
   3146           *
   3147           * @param   dataType - data type
   3148           *
   3149           * @return  length of data
   3150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3151          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3152          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3153            uint8 len;
   3154          
   3155            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3156            {
   3157              case ZCL_DATATYPE_DATA8:
   3158              case ZCL_DATATYPE_BOOLEAN:
   3159              case ZCL_DATATYPE_BITMAP8:
   3160              case ZCL_DATATYPE_INT8:
   3161              case ZCL_DATATYPE_UINT8:
   3162              case ZCL_DATATYPE_ENUM8:
   3163                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3164                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3165          
   3166              case ZCL_DATATYPE_DATA16:
   3167              case ZCL_DATATYPE_BITMAP16:
   3168              case ZCL_DATATYPE_UINT16:
   3169              case ZCL_DATATYPE_INT16:
   3170              case ZCL_DATATYPE_ENUM16:
   3171              case ZCL_DATATYPE_SEMI_PREC:
   3172              case ZCL_DATATYPE_CLUSTER_ID:
   3173              case ZCL_DATATYPE_ATTR_ID:
   3174                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3175                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3176          
   3177              case ZCL_DATATYPE_DATA24:
   3178              case ZCL_DATATYPE_BITMAP24:
   3179              case ZCL_DATATYPE_UINT24:
   3180              case ZCL_DATATYPE_INT24:
   3181                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3182                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3183          
   3184              case ZCL_DATATYPE_DATA32:
   3185              case ZCL_DATATYPE_BITMAP32:
   3186              case ZCL_DATATYPE_UINT32:
   3187              case ZCL_DATATYPE_INT32:
   3188              case ZCL_DATATYPE_SINGLE_PREC:
   3189              case ZCL_DATATYPE_TOD:
   3190              case ZCL_DATATYPE_DATE:
   3191              case ZCL_DATATYPE_UTC:
   3192              case ZCL_DATATYPE_BAC_OID:
   3193                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3194                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3195          
   3196             case ZCL_DATATYPE_UINT40:
   3197             case ZCL_DATATYPE_INT40:
   3198                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3199                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3200          
   3201             case ZCL_DATATYPE_UINT48:
   3202             case ZCL_DATATYPE_INT48:
   3203                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3204                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3205          
   3206             case ZCL_DATATYPE_UINT56:
   3207             case ZCL_DATATYPE_INT56:
   3208                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3209                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3210          
   3211             case ZCL_DATATYPE_DOUBLE_PREC:
   3212             case ZCL_DATATYPE_IEEE_ADDR:
   3213             case ZCL_DATATYPE_UINT64:
   3214             case ZCL_DATATYPE_INT64:
   3215               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3216               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3217          
   3218              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3219               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3220               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3221          
   3222              case ZCL_DATATYPE_NO_DATA:
   3223              case ZCL_DATATYPE_UNKNOWN:
   3224                // Fall through
   3225          
   3226              default:
   3227                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3228                break;
   3229            }
   3230          
   3231            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3232          }
   3233          
   3234          /*********************************************************************
   3235           * @fn      zclGetAttrDataLength
   3236           *
   3237           * @brief   Return the length of the attribute.
   3238           *
   3239           * @param   dataType - data type
   3240           * @param   pData - pointer to data
   3241           *
   3242           * @return  returns atrribute length
   3243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3244          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3245          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3246            uint16 dataLen = 0;
   3247          
   3248            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3249            {
   3250              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine78 & 0xFFFF
   3251            }
   \                     ??CrossCallReturnLabel_125:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3252            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3253            {
   3254              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3255            }
   3256            else
   3257            {
   3258              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3259            }
   3260          
   3261            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine121_0 & 0xFFFF
   3262          }
   3263          
   3264          #ifdef ZCL_READ
   3265          /*********************************************************************
   3266           * @fn      zclReadAttrData
   3267           *
   3268           * @brief   Read the attribute's current value into pAttrData.
   3269           *          NOTE - Not compatible with application's attributes callbacks.
   3270           *
   3271           * @param   pAttrData - where to put attribute data
   3272           * @param   pAttr - pointer to attribute
   3273           * @param   pDataLen - where to put attribute data length
   3274           *
   3275           * @return Success
   3276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3277          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3279            uint16 dataLen;
   3280          
   3281            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   88..         MOV       ?V0,R0
   \   000012   89..         MOV       ?V1,R1
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00001B   7004         JNZ       ??zclReadAttrData_0
   3282            {
   3283              return ( ZCL_STATUS_FAILURE );
   \   00001D   7901         MOV       R1,#0x1
   \   00001F   804C         SJMP      ??zclReadAttrData_1
   3284            }
   3285          
   3286            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000021                ; Setup parameters for call to function zclGetAttrDataLength
   \   000021   8C82         MOV       DPL,R4
   \   000023   8D83         MOV       DPH,R5
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00002E   8A..         MOV       ?V2,R2
   \   000030   8B..         MOV       ?V3,R3
   3287            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   85..82       MOV       DPL,?V0
   \   000035   85..83       MOV       DPH,?V1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V0,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   85....       MOV       ?V4,?V0
   \   000040   F5..         MOV       ?V5,A
   \   000042   75..00       MOV       ?V6,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   AC..         MOV       R4,?V2
   \   00004C   AD..         MOV       R5,?V3
   \   00004E   EE           MOV       A,R6
   \   00004F   FA           MOV       R2,A
   \   000050   EF           MOV       A,R7
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000055   7403         MOV       A,#0x3
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   740F         MOV       A,#0xf
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   3288          
   3289            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_193:
   \   000062   6007         JZ        ??zclReadAttrData_2
   3290            {
   3291              *pDataLen = dataLen;
   \   000064   E5..         MOV       A,?V2
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   E5..         MOV       A,?V3
   \   00006A   F0           MOVX      @DPTR,A
   3292            }
   3293          
   3294            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclReadAttrData_2:
   \   00006B   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   00006D                REQUIRE ?Subroutine8
   \   00006D                ; // Fall through to label ?Subroutine8
   3295          }
   3296          
   3297          /*********************************************************************
   3298           * @fn      zcl_ReadAttrData
   3299           *
   3300           * @brief   Read the attribute's current value into pAttrData.
   3301           *          Use application's callback function if assigned to this attribute.
   3302           *
   3303           * @param   endpoint - application's endpoint
   3304           * @param   clusterId - cluster that attribute belongs to
   3305           * @param   attrId - attribute id
   3306           * @param   pAttrData - where to put attribute data
   3307           * @param   pDataLen - where to put attribute data length
   3308           *
   3309           * @return  Successful if data was read
   3310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3311          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3312                                                   uint8 *pAttrData, uint16 *pDataLen )
   3313          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   3314            zclAttrRec_t attrRec;
   3315          
   3316            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V2
   \   000023   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??zcl_ReadAttrData_0
   3317            {
   3318              return ( ZCL_STATUS_FAILURE );
   \   00002E   7901         MOV       R1,#0x1
   \   000030   804C         SJMP      ??zcl_ReadAttrData_1
   3319            }
   \                     ??zcl_ReadAttrData_0:
   \   000032   7418         MOV       A,#0x18
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00003A   741A         MOV       A,#0x1a
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine57 & 0xFFFF
   3320          
   3321            if ( attrRec.attr.dataPtr != NULL )
   \                     ??CrossCallReturnLabel_84:
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   6016         JZ        ??zcl_ReadAttrData_2
   3322            {
   3323              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00004E                ; Setup parameters for call to function zclReadAttrData
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP102_8
   \   000056   AA..         MOV       R2,?V6
   \   000058   AB..         MOV       R3,?V7
   \   00005A   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000062   801A         SJMP      ??zcl_ReadAttrData_1
   3324            }
   3325            else
   3326            {
   3327              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   000064                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   78..         MOV       R0,#?V6
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   EE           MOV       A,R6
   \   00006D   FC           MOV       R4,A
   \   00006E   EF           MOV       A,R7
   \   00006F   FD           MOV       R5,A
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   A9..         MOV       R1,?V2
   \   000076   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00007E   7408         MOV       A,#0x8
   3328            }
   \   000080   02....       LJMP      ?Subroutine9 & 0xFFFF
   3329          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET
   3330          
   3331          /*********************************************************************
   3332           * @fn      zclGetAttrDataLengthUsingCB
   3333           *
   3334           * @brief   Use application's callback to get the length of the attribute's
   3335           *          current value stored in the database.
   3336           *
   3337           * @param   endpoint - application's endpoint
   3338           * @param   clusterId - cluster that attribute belongs to
   3339           * @param   attrId - attribute id
   3340           *
   3341           * @return  returns attribute length
   3342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3343          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3344          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3345            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3346            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   3347          
   3348            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV       A,R2
   \   000024   45..         ORL       A,?V1
   \   000026   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3349            {
   3350              // Only get the attribute length
   3351              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000028                ; Setup parameters for indirect call
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V6,R0
   \   00002E   89..         MOV       ?V7,R1
   \   000030   78..         MOV       R0,#?V6
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V6,A
   \   000038   F5..         MOV       ?V7,A
   \   00003A   78..         MOV       R0,#?V6
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7900         MOV       R1,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   FC           MOV       R4,A
   \   000043   EF           MOV       A,R7
   \   000044   FD           MOV       R5,A
   \   000045   AA..         MOV       R2,?V4
   \   000047   AB..         MOV       R3,?V5
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?CALL_IND
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   3352            }
   3353          
   3354            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000060   7402         MOV       A,#0x2
   \   000062   02....       LJMP      ?Subroutine9 & 0xFFFF
   3355          }
   3356          
   3357          /*********************************************************************
   3358           * @fn      zclReadAttrDataUsingCB
   3359           *
   3360           * @brief   Use application's callback to read the attribute's current
   3361           *          value stored in the database.
   3362           *
   3363           * @param   endpoint - application's endpoint
   3364           * @param   clusterId - cluster that attribute belongs to
   3365           * @param   attrId - attribute id
   3366           * @param   pAttrData - where to put attribute data
   3367           * @param   pDataLen - where to put attribute data length
   3368           *
   3369           * @return  Successful if data was read
   3370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3371          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3372                                                   uint8 *pAttrData, uint16 *pDataLen )
   3373          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3374            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   3375          
   3376            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_322:
   \   00001C   E5..         MOV       A,?V6
   \   00001E   45..         ORL       A,?V7
   \   000020   600A         JZ        ??zclReadAttrDataUsingCB_0
   3377            {
   3378              *pDataLen = 0; // Always initialize it to 0
   \   000022   85..82       MOV       DPL,?V6
   \   000025   85..83       MOV       DPH,?V7
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   3379            }
   3380          
   3381            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   00002C   EA           MOV       A,R2
   \   00002D   45..         ORL       A,?V3
   \   00002F   6027         JZ        ??zclReadAttrDataUsingCB_1
   3382            {
   3383              // Read the attribute value and its length
   3384              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000031                ; Setup parameters for indirect call
   \   000031   78..         MOV       R0,#?V6
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7412         MOV       A,#0x12
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7901         MOV       R1,#0x1
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   85..82       MOV       DPL,?V2
   \   00004B   85..83       MOV       DPH,?V3
   \   00004E   12....       LCALL     ?CALL_IND
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3385            }
   3386          
   3387            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   000058   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   00005A   02....       LJMP      ??Subroutine122_0 & 0xFFFF
   3388          }
   3389          
   3390          /*********************************************************************
   3391           * @fn      zclAuthorizeRead
   3392           *
   3393           * @brief   Use application's callback to authorize a Read operation
   3394           *          on a given attribute.
   3395           *
   3396           * @param   endpoint - application's endpoint
   3397           * @param   srcAddr - source Address
   3398           * @param   pAttr - pointer to attribute
   3399           *
   3400           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3401           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3402           */
   3403          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3404          {
   3405            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3406            {
   3407              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3408          
   3409              if ( pfnAuthorizeCB != NULL )
   3410              {
   3411                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3412              }
   3413            }
   3414          
   3415            return ( ZCL_STATUS_SUCCESS );
   3416          }
   3417          #endif // ZCL_READ
   3418          
   3419          #ifdef ZCL_WRITE
   3420          /*********************************************************************
   3421           * @fn      zclWriteAttrData
   3422           *
   3423           * @brief   Write the received data.
   3424           *
   3425           * @param   endpoint - application's endpoint
   3426           * @param   pAttr - where to write data to
   3427           * @param   pWriteRec - data to be written
   3428           *
   3429           * @return  Successful if data was written
   3430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3431          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3432                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3433          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3434            uint8 status;
   3435          
   3436            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5077         JNC       ??zclWriteAttrData_0
   3437            {
   3438              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000017                ; Setup parameters for call to function zclAuthorizeWrite
   \   000017   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001A   E9           MOV       A,R1
   \   00001B   F5..         MOV       ?V2,A
   3439              if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   7072         JNZ       ??zclWriteAttrData_1
   \   00001F   740F         MOV       A,#0xf
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine52 & 0xFFFF
   3440              {
   3441                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \                     ??CrossCallReturnLabel_75:
   \   000027   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   00002A   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00002D   6013         JZ        ??zclWriteAttrData_2
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AC..         MOV       R4,?V0
   \   000031   AD..         MOV       R5,?V1
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F583         MOV       DPH,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   12....       LCALL     ?CALL_IND
   \   00003F   E9           MOV       A,R1
   \   000040   6047         JZ        ??zclWriteAttrData_3
   3442                {
   3443                  // Write the attribute value
   3444                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000042   E5..         MOV       A,?V0
   \   000044   2403         ADD       A,#0x3
   \   000046   F8           MOV       R0,A
   \   000047   E4           CLR       A
   \   000048   35..         ADDC      A,?V1
   \   00004A   F9           MOV       R1,A
   \   00004B   88..         MOV       ?V0,R0
   \   00004D   89..         MOV       ?V1,R1
   \   00004F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00004F   8882         MOV       DPL,R0
   \   000051   F583         MOV       DPH,A
   \   000053   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000063   8A..         MOV       ?V4,R2
   \   000065   8B..         MOV       ?V5,R3
   \   000067   AC..         MOV       R4,?V4
   \   000069   AD..         MOV       R5,?V5
   3445                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00007F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000082   7403         MOV       A,#0x3
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   3446          
   3447                  status = ZCL_STATUS_SUCCESS;
   \   000087   8008         SJMP      ??zclWriteAttrData_1
   3448                }
   3449                else
   3450                {
   3451                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000089   75..87       MOV       ?V2,#-0x79
   \   00008C   8003         SJMP      ??zclWriteAttrData_1
   3452                }
   3453              }
   3454            }
   3455            else
   3456            {
   3457              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   00008E   75..88       MOV       ?V2,#-0x78
   3458            }
   3459          
   3460            return ( status );
   \                     ??zclWriteAttrData_1:
   \   000091   A9..         MOV       R1,?V2
   \   000093   02....       LJMP      ?Subroutine8 & 0xFFFF
   3461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
   3462          
   3463          /*********************************************************************
   3464           * @fn      zclWriteAttrDataUsingCB
   3465           *
   3466           * @brief   Use application's callback to write the attribute's current
   3467           *          value stored in the database.
   3468           *
   3469           * @param   endpoint - application's endpoint
   3470           * @param   pAttr - where to write data to
   3471           * @param   pAttrData - data to be written
   3472           *
   3473           * @return  Successful if data was written
   3474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3475          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3476                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3477          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3478            uint8 status;
   3479          
   3480            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   504D         JNC       ??zclWriteAttrDataUsingCB_0
   3481            {
   3482              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3483              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   7048         JNZ       ??zclWriteAttrDataUsingCB_1
   3484              {
   3485                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V0
   \   000022   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   3486                if ( pfnReadWriteCB != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   45..         ORL       A,?V3
   \   00002C   6034         JZ        ??zclWriteAttrDataUsingCB_2
   3487                {
   3488                  // Write the attribute value
   3489                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3490                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   00002E                ; Setup parameters for indirect call
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V4,A
   \   000031   F5..         MOV       ?V5,A
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7410         MOV       A,#0x10
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000040   7902         MOV       R1,#0x2
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   3491                }
   \                     ??CrossCallReturnLabel_317:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000050   85..82       MOV       DPL,?V2
   \   000053   85..83       MOV       DPH,?V3
   \   000056   12....       LCALL     ?CALL_IND
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   F9           MOV       R1,A
   \   000060   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3492                else
   3493                {
   3494                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000062   79C1         MOV       R1,#-0x3f
   \   000064   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3495                }
   3496              }
   3497            }
   3498            else
   3499            {
   3500              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   000066   7988         MOV       R1,#-0x78
   3501            }
   3502          
   3503            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   000068   02....       LJMP      ?Subroutine4 & 0xFFFF
   3504          }
   3505          
   3506          /*********************************************************************
   3507           * @fn      zclAuthorizeWrite
   3508           *
   3509           * @brief   Use application's callback to authorize a Write operation
   3510           *          on a given attribute.
   3511           *
   3512           * @param   endpoint - application's endpoint
   3513           * @param   srcAddr - source Address
   3514           * @param   pAttr - pointer to attribute
   3515           *
   3516           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3517           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3518           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3519          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3520          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3521            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   501C         JNC       ??zclAuthorizeWrite_0
   3522            {
   3523              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   3524          
   3525              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV       A,DPL
   \   000024   4583         ORL       A,DPH
   \   000026   600F         JZ        ??zclAuthorizeWrite_0
   3526              {
   3527                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7902         MOV       R1,#0x2
   \   00002A   AC..         MOV       R4,?V0
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8002         SJMP      ??zclAuthorizeWrite_1
   3528              }
   3529            }
   3530          
   3531            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000039   02....       LJMP      ?Subroutine4 & 0xFFFF
   3532          }
   3533          #endif // ZCL_WRITE
   3534          
   3535          #ifdef ZCL_READ
   3536          /*********************************************************************
   3537           * @fn      zclParseInReadCmd
   3538           *
   3539           * @brief   Parse the "Profile" Read Commands
   3540           *
   3541           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3542           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3543           *
   3544           * @param   pCmd - pointer to incoming data to parse
   3545           *
   3546           * @return  pointer to the parsed command structure
   3547           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3548          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3549          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3550            zclReadCmd_t *readCmd;
   3551            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine67 & 0xFFFF
   3552          
   3553            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_105:
   \   000008   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00000B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3554            if ( readCmd != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6054         JZ        ??zclParseInReadCmd_0
   3555            {
   3556              uint8 i;
   3557              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00001B   C3           CLR       C
   \   00001C   13           RRC       A
   \   00001D   E8           MOV       A,R0
   \   00001E   13           RRC       A
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   F0           MOVX      @DPTR,A
   3558              for ( i = 0; i < readCmd->numAttr; i++ )
   \   000024   7C00         MOV       R4,#0x0
   \   000026   8033         SJMP      ??zclParseInReadCmd_1
   3559              {
   3560                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   C8           XCH       A,R0
   \   000034   F9           MOV       R1,A
   \   000035   E5..         MOV       A,?V0
   \   000037   28           ADD       A,R0
   \   000038   E4           CLR       A
   \   000039   39           ADDC      A,R1
   \   00003A   F5..         MOV       ?V1,A
   \   00003C   EC           MOV       A,R4
   \   00003D   25E0         ADD       A,0xE0 /* A   */
   \   00003F   F8           MOV       R0,A
   \   000040   E4           CLR       A
   \   000041   33           RLC       A
   \   000042   F9           MOV       R1,A
   \   000043   EA           MOV       A,R2
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   EB           MOV       A,R3
   \   000048   39           ADDC      A,R1
   \   000049   F583         MOV       DPH,A
   \   00004B   A3           INC       DPTR
   \   00004C   E5..         MOV       A,?V0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   E5..         MOV       A,?V1
   \   000052   F0           MOVX      @DPTR,A
   3561                pBuf += 2;
   \   000053   EE           MOV       A,R6
   \   000054   2402         ADD       A,#0x2
   \   000056   FE           MOV       R6,A
   \   000057   5001         JNC       ??zclParseInReadCmd_3
   \   000059   0F           INC       R7
   3562              }
   \                     ??zclParseInReadCmd_3:
   \   00005A   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   EC           MOV       A,R4
   \   000062   C3           CLR       C
   \   000063   98           SUBB      A,R0
   \   000064   40C2         JC        ??zclParseInReadCmd_2
   3563            }
   3564          
   3565            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000066   02....       LJMP      ?Subroutine3 & 0xFFFF
   3566          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   8582..       MOV       ?V0,DPL
   \   000008   8583..       MOV       ?V1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   2401         ADD       A,#0x1
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   3400         ADDC      A,#0x0
   \   000013   FB           MOV       R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00000A   E8           MOV       A,R0
   \   00000B   FE           MOV       R6,A
   \   00000C   E9           MOV       A,R1
   \   00000D   FF           MOV       R7,A
   \   00000E   22           RET
   3567          
   3568          /*********************************************************************
   3569           * @fn      zclParseInReadRspCmd
   3570           *
   3571           * @brief   Parse the "Profile" Read Response Commands
   3572           *
   3573           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3574           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3575           *
   3576           * @param   pCmd - pointer to incoming data to parse
   3577           *
   3578           * @return  pointer to the parsed command structure
   3579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   AA..         MOV       R2,?V10
   \   000002   AB..         MOV       R3,?V11
   \   000004                REQUIRE ??Subroutine115_0
   \   000004                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3580          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3582            zclReadRspCmd_t *readRspCmd;
   3583            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V4,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V5,A
   \   000013   85..82       MOV       DPL,?V4
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   3584            uint8 *dataPtr;
   3585            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_281:
   \   00001B   75..00       MOV       ?V2,#0x0
   3586            uint8 hdrLen;
   3587            uint16 dataLen = 0;
   \   00001E   75..00       MOV       ?V6,#0x0
   \   000021   75..00       MOV       ?V7,#0x0
   \   000024   8049         SJMP      ??zclParseInReadRspCmd_0
   3588            uint16 attrDataLen;
   3589          
   3590            // find out the number of attributes and the length of attribute data
   3591            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3592            {
   3593              uint8 status;
   3594          
   3595              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   000026   05..         INC       ?V2
   3596              pBuf += 2; // move pass attribute id
   3597          
   3598              status = *pBuf++;
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??zclParseInReadRspCmd_2
   \   000036   0F           INC       R7
   3599              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_2:
   \   000037   E8           MOV       A,R0
   \   000038   7035         JNZ       ??zclParseInReadRspCmd_0
   3600              {
   3601                uint8 dataType = *pBuf++;
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   A3           INC       DPTR
   \   000041   AE82         MOV       R6,DPL
   \   000043   AF83         MOV       R7,DPH
   3602          
   3603                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000045                ; Setup parameters for call to function zclGetAttrDataLength
   \   000045   EE           MOV       A,R6
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   3604                pBuf += attrDataLen; // move pass attribute data
   \   000050   EE           MOV       A,R6
   \   000051   2A           ADD       A,R2
   \   000052   FE           MOV       R6,A
   \   000053   EF           MOV       A,R7
   \   000054   35..         ADDC      A,?V1
   \   000056   FF           MOV       R7,A
   3605          
   3606                // add padding if needed
   3607                if ( PADDING_NEEDED( attrDataLen ) )
   \   000057   EA           MOV       A,R2
   \   000058   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005A   5007         JNC       ??zclParseInReadRspCmd_3
   3608                {
   3609                  attrDataLen++;
   \   00005C   05..         INC       ?V0
   \   00005E   04           INC       A
   \   00005F   7002         JNZ       ??zclParseInReadRspCmd_3
   \   000061   05..         INC       ?V1
   3610                }
   3611          
   3612                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_3:
   \   000063   E5..         MOV       A,?V6
   \   000065   25..         ADD       A,?V0
   \   000067   F5..         MOV       ?V6,A
   \   000069   E5..         MOV       A,?V7
   \   00006B   35..         ADDC      A,?V1
   \   00006D   F5..         MOV       ?V7,A
   3613              }
   3614            }
   \                     ??zclParseInReadRspCmd_0:
   \   00006F   85..82       MOV       DPL,?V8
   \   000072   85..83       MOV       DPH,?V9
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000079   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00007C   EE           MOV       A,R6
   \   00007D   98           SUBB      A,R0
   \   00007E   EF           MOV       A,R7
   \   00007F   99           SUBB      A,R1
   \   000080   40A4         JC        ??zclParseInReadRspCmd_1
   3615          
   3616            // calculate the length of the response header
   3617            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   000082   75F006       MOV       B,#0x6
   \   000085   E5..         MOV       A,?V2
   \   000087   A4           MUL       AB
   \   000088   04           INC       A
   \   000089   F5..         MOV       ?V0,A
   3618          
   3619            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   25..         ADD       A,?V6
   \   00008D   FA           MOV       R2,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V7
   \   000091   FB           MOV       R3,A
   \   000092   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000095   8A..         MOV       ?V10,R2
   \   000097   8B..         MOV       ?V11,R3
   3620            if ( readRspCmd != NULL )
   \   000099   EA           MOV       A,R2
   \   00009A   45..         ORL       A,?V11
   \   00009C   7003         JNZ       $+5
   \   00009E   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3621            {
   3622              uint8 i;
   3623              pBuf = pCmd->pData;
   \   0000A1   12....       LCALL     ?Subroutine39 & 0xFFFF
   3624              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_286:
   \   0000A4   A8..         MOV       R0,?V0
   \   0000A6   EA           MOV       A,R2
   \   0000A7   28           ADD       A,R0
   \   0000A8   F5..         MOV       ?V8,A
   \   0000AA   E4           CLR       A
   \   0000AB   3B           ADDC      A,R3
   \   0000AC   F5..         MOV       ?V9,A
   3625          
   3626              readRspCmd->numAttr = numAttr;
   \   0000AE   8A82         MOV       DPL,R2
   \   0000B0   8B83         MOV       DPH,R3
   \   0000B2   E5..         MOV       A,?V2
   \   0000B4   F0           MOVX      @DPTR,A
   3627              for ( i = 0; i < numAttr; i++ )
   \   0000B5   75..00       MOV       ?V3,#0x0
   \   0000B8   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3628              {
   3629                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   0000BB   E5..         MOV       A,?V3
   \   0000BD   75F006       MOV       B,#0x6
   \   0000C0   12....       LCALL     ?Subroutine86 & 0xFFFF
   3630          
   3631                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_144:
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000CA   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   3632                pBuf += 2;
   3633          
   3634                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_199:
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F8           MOV       R0,A
   \   0000D5   85..82       MOV       DPL,?V12
   \   0000D8   85..83       MOV       DPH,?V13
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   EE           MOV       A,R6
   \   0000DF   2403         ADD       A,#0x3
   \   0000E1   FE           MOV       R6,A
   \   0000E2   5001         JNC       ??zclParseInReadRspCmd_7
   \   0000E4   0F           INC       R7
   3635                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_7:
   \   0000E5   E8           MOV       A,R0
   \   0000E6   7063         JNZ       ??zclParseInReadRspCmd_8
   3636                {
   3637                  statusRec->dataType = *pBuf++;
   \   0000E8   8E82         MOV       DPL,R6
   \   0000EA   8F83         MOV       DPH,R7
   \   0000EC   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000EF   12....       LCALL     ?Subroutine12 & 0xFFFF
   3638          
   3639                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_242:
   \   0000F2                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000F2   EE           MOV       A,R6
   \   0000F3   FA           MOV       R2,A
   \   0000F4   EF           MOV       A,R7
   \   0000F5   FB           MOV       R3,A
   \   0000F6   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000F9   8A..         MOV       ?V0,R2
   \   0000FB   8B..         MOV       ?V1,R3
   3640                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000FD                ; Setup parameters for call to function osal_memcpy
   \   0000FD   8E..         MOV       ?V4,R6
   \   0000FF   8F..         MOV       ?V5,R7
   \   000101   75..00       MOV       ?V6,#0x0
   \   000104   78..         MOV       R0,#?V4
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000109   AC..         MOV       R4,?V0
   \   00010B   AD..         MOV       R5,?V1
   \   00010D   AA..         MOV       R2,?V8
   \   00010F   AB..         MOV       R3,?V9
   \   000111   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000114   7403         MOV       A,#0x3
   \   000116   12....       LCALL     ?DEALLOC_XSTACK8
   3641                  statusRec->data = dataPtr;
   \   000119   85..82       MOV       DPL,?V12
   \   00011C   85..83       MOV       DPH,?V13
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   E5..         MOV       A,?V8
   \   000125   F0           MOVX      @DPTR,A
   \   000126   A3           INC       DPTR
   \   000127   E5..         MOV       A,?V9
   \   000129   F0           MOVX      @DPTR,A
   3642          
   3643                  pBuf += attrDataLen; // move pass attribute data
   \   00012A   EE           MOV       A,R6
   \   00012B   25..         ADD       A,?V0
   \   00012D   FE           MOV       R6,A
   \   00012E   EF           MOV       A,R7
   \   00012F   35..         ADDC      A,?V1
   \   000131   FF           MOV       R7,A
   3644          
   3645                  // advance attribute data pointer
   3646                  if ( PADDING_NEEDED( attrDataLen ) )
   \   000132   E5..         MOV       A,?V0
   \   000134   A2E0         MOV       C,0xE0 /* A   */.0
   \   000136   5007         JNC       ??zclParseInReadRspCmd_9
   3647                  {
   3648                    attrDataLen++;
   \   000138   05..         INC       ?V0
   \   00013A   04           INC       A
   \   00013B   7002         JNZ       ??zclParseInReadRspCmd_9
   \   00013D   05..         INC       ?V1
   3649                  }
   3650          
   3651                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_9:
   \   00013F   E5..         MOV       A,?V8
   \   000141   25..         ADD       A,?V0
   \   000143   F5..         MOV       ?V8,A
   \   000145   E5..         MOV       A,?V9
   \   000147   35..         ADDC      A,?V1
   \   000149   F5..         MOV       ?V9,A
   3652                }
   3653              }
   \                     ??zclParseInReadRspCmd_8:
   \   00014B   05..         INC       ?V3
   \                     ??zclParseInReadRspCmd_5:
   \   00014D   E5..         MOV       A,?V3
   \   00014F   C3           CLR       C
   \   000150   95..         SUBB      A,?V2
   \   000152   5003         JNC       $+5
   \   000154   02....       LJMP      ??zclParseInReadRspCmd_6 & 0xFFFF
   3654            }
   3655          
   3656            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   000157   02....       LJMP      ?Subroutine7 & 0xFFFF
   3657          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine127_0
   \   000001                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   A4           MUL       AB
   \   000001   F8           MOV       R0,A
   \   000002   A9F0         MOV       R1,B
   \   000004   E5..         MOV       A,?V10
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   E5..         MOV       A,?V11
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   A3           INC       DPTR
   \   00000F   8582..       MOV       ?V12,DPL
   \   000012   8583..       MOV       ?V13,DPH
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   85..82       MOV       DPL,?V12
   \   000005   85..83       MOV       DPH,?V13
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   85..82       MOV       DPL,?V12
   \   000009   85..83       MOV       DPH,?V13
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   F9           MOV       R1,A
   \   000007   C3           CLR       C
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine133_0
   \   000006                ; // Fall through to label ??Subroutine133_0
   3658          #endif // ZCL_READ
   3659          
   3660          #ifdef ZCL_WRITE
   3661          /*********************************************************************
   3662           * @fn      zclParseInWriteCmd
   3663           *
   3664           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3665           *          Response Commands
   3666           *
   3667           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3668           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3669           *
   3670           * @param   pCmd - pointer to incoming data to parse
   3671           *
   3672           * @return  pointer to the parsed command structure
   3673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3674          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3676            zclWriteCmd_t *writeCmd;
   3677            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V3,A
   \   000013   85..82       MOV       DPL,?V2
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ?Subroutine52 & 0xFFFF
   3678            uint16 attrDataLen;
   3679            uint8 *dataPtr;
   3680            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_76:
   \   00001B   75..00       MOV       ?V7,#0x0
   3681            uint8 hdrLen;
   3682            uint16 dataLen = 0;
   \   00001E   75..00       MOV       ?V4,#0x0
   \   000021   75..00       MOV       ?V5,#0x0
   \   000024   8042         SJMP      ??zclParseInWriteCmd_0
   3683          
   3684            // find out the number of attributes and the length of attribute data
   3685            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3686            {
   3687              uint8 dataType;
   3688          
   3689              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   000026   05..         INC       ?V7
   3690              pBuf += 2; // move pass attribute id
   3691          
   3692              dataType = *pBuf++;
   \   000028   85..82       MOV       DPL,?V0
   \   00002B   85..83       MOV       DPH,?V1
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F9           MOV       R1,A
   \   000032   E5..         MOV       A,?V0
   \   000034   2403         ADD       A,#0x3
   \   000036   F5..         MOV       ?V0,A
   \   000038   5002         JNC       ??zclParseInWriteCmd_2
   \   00003A   05..         INC       ?V1
   3693          
   3694              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_2:
   \   00003C                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003C   FA           MOV       R2,A
   \   00003D   AB..         MOV       R3,?V1
   \   00003F   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000042   8A..         MOV       ?V10,R2
   \   000044   8B..         MOV       ?V11,R3
   \   000046   AE..         MOV       R6,?V10
   \   000048   AF..         MOV       R7,?V11
   3695              pBuf += attrDataLen; // move pass attribute data
   \   00004A   E5..         MOV       A,?V0
   \   00004C   2A           ADD       A,R2
   \   00004D   F5..         MOV       ?V0,A
   \   00004F   E5..         MOV       A,?V1
   \   000051   3F           ADDC      A,R7
   \   000052   F5..         MOV       ?V1,A
   3696          
   3697              // add padding if needed
   3698              if ( PADDING_NEEDED( attrDataLen ) )
   \   000054   EE           MOV       A,R6
   \   000055   A2E0         MOV       C,0xE0 /* A   */.0
   \   000057   5005         JNC       ??zclParseInWriteCmd_3
   3699              {
   3700                attrDataLen++;
   \   000059   0E           INC       R6
   \   00005A   04           INC       A
   \   00005B   7001         JNZ       ??zclParseInWriteCmd_3
   \   00005D   0F           INC       R7
   3701              }
   3702          
   3703              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_3:
   \   00005E   E5..         MOV       A,?V4
   \   000060   2E           ADD       A,R6
   \   000061   F5..         MOV       ?V4,A
   \   000063   E5..         MOV       A,?V5
   \   000065   3F           ADDC      A,R7
   \   000066   F5..         MOV       ?V5,A
   3704            }
   \                     ??zclParseInWriteCmd_0:
   \   000068   85..82       MOV       DPL,?V8
   \   00006B   85..83       MOV       DPH,?V9
   \   00006E   A3           INC       DPTR
   \   00006F   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000072   E5..         MOV       A,?V0
   \   000074   98           SUBB      A,R0
   \   000075   E5..         MOV       A,?V1
   \   000077   99           SUBB      A,R1
   \   000078   40AC         JC        ??zclParseInWriteCmd_1
   3705          
   3706            // calculate the length of the response header
   3707            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   00007A   75F005       MOV       B,#0x5
   \   00007D   E5..         MOV       A,?V7
   \   00007F   A4           MUL       AB
   \   000080   04           INC       A
   \   000081   FE           MOV       R6,A
   3708          
   3709            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000082                ; Setup parameters for call to function osal_mem_alloc
   \   000082   25..         ADD       A,?V4
   \   000084   FA           MOV       R2,A
   \   000085   E4           CLR       A
   \   000086   35..         ADDC      A,?V5
   \   000088   FB           MOV       R3,A
   \   000089   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008C   8A..         MOV       ?V10,R2
   \   00008E   8B..         MOV       ?V11,R3
   3710            if ( writeCmd != NULL )
   \   000090   EA           MOV       A,R2
   \   000091   45..         ORL       A,?V11
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??zclParseInWriteCmd_4 & 0xFFFF
   3711            {
   3712              uint8 i;
   3713              pBuf = pCmd->pData;
   \   000098   85..82       MOV       DPL,?V2
   \   00009B   85..83       MOV       DPH,?V3
   \   00009E   12....       LCALL     ?Subroutine52 & 0xFFFF
   3714              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   \                     ??CrossCallReturnLabel_77:
   \   0000A1   EA           MOV       A,R2
   \   0000A2   2E           ADD       A,R6
   \   0000A3   F5..         MOV       ?V2,A
   \   0000A5   E4           CLR       A
   \   0000A6   3B           ADDC      A,R3
   \   0000A7   F5..         MOV       ?V3,A
   3715          
   3716              writeCmd->numAttr = numAttr;
   \   0000A9   8A82         MOV       DPL,R2
   \   0000AB   8B83         MOV       DPH,R3
   \   0000AD   E5..         MOV       A,?V7
   \   0000AF   F0           MOVX      @DPTR,A
   3717              for ( i = 0; i < numAttr; i++ )
   \   0000B0   75..00       MOV       ?V8,#0x0
   \   0000B3   02....       LJMP      ??zclParseInWriteCmd_5 & 0xFFFF
   3718              {
   3719                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   0000B6   E5..         MOV       A,?V8
   \   0000B8   75F005       MOV       B,#0x5
   \   0000BB   12....       LCALL     ?Subroutine86 & 0xFFFF
   3720          
   3721                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_145:
   \   0000BE   85..82       MOV       DPL,?V0
   \   0000C1   85..83       MOV       DPH,?V1
   \   0000C4   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000C7   12....       LCALL     ?Subroutine17 & 0xFFFF
   3722                pBuf += 2;
   3723                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_208:
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   E5..         MOV       A,?V0
   \   0000D2   2403         ADD       A,#0x3
   \   0000D4   F5..         MOV       ?V0,A
   \   0000D6   5002         JNC       ??zclParseInWriteCmd_7
   \   0000D8   05..         INC       ?V1
   3724          
   3725                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_7:
   \   0000DA                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000DA   FA           MOV       R2,A
   \   0000DB   AB..         MOV       R3,?V1
   \   0000DD   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000E0   8A..         MOV       ?V4,R2
   \   0000E2   8B..         MOV       ?V5,R3
   \   0000E4   AE..         MOV       R6,?V4
   \   0000E6   AF..         MOV       R7,?V5
   3726                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   85....       MOV       ?V4,?V0
   \   0000EB   85....       MOV       ?V5,?V1
   \   0000EE   75..00       MOV       ?V6,#0x0
   \   0000F1   78..         MOV       R0,#?V4
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F6   EE           MOV       A,R6
   \   0000F7   FC           MOV       R4,A
   \   0000F8   EF           MOV       A,R7
   \   0000F9   FD           MOV       R5,A
   \   0000FA   AA..         MOV       R2,?V2
   \   0000FC   AB..         MOV       R3,?V3
   \   0000FE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000101   7403         MOV       A,#0x3
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   3727                statusRec->attrData = dataPtr;
   \   000106   85..82       MOV       DPL,?V12
   \   000109   85..83       MOV       DPH,?V13
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   E5..         MOV       A,?V2
   \   000111   F0           MOVX      @DPTR,A
   \   000112   A3           INC       DPTR
   \   000113   E5..         MOV       A,?V3
   \   000115   F0           MOVX      @DPTR,A
   3728          
   3729                pBuf += attrDataLen; // move pass attribute data
   \   000116   E5..         MOV       A,?V0
   \   000118   2E           ADD       A,R6
   \   000119   F5..         MOV       ?V0,A
   \   00011B   E5..         MOV       A,?V1
   \   00011D   3F           ADDC      A,R7
   \   00011E   F5..         MOV       ?V1,A
   3730          
   3731                // advance attribute data pointer
   3732                if ( PADDING_NEEDED( attrDataLen ) )
   \   000120   EE           MOV       A,R6
   \   000121   A2E0         MOV       C,0xE0 /* A   */.0
   \   000123   5005         JNC       ??zclParseInWriteCmd_8
   3733                {
   3734                  attrDataLen++;
   \   000125   0E           INC       R6
   \   000126   04           INC       A
   \   000127   7001         JNZ       ??zclParseInWriteCmd_8
   \   000129   0F           INC       R7
   3735                }
   3736          
   3737                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_8:
   \   00012A   E5..         MOV       A,?V2
   \   00012C   2E           ADD       A,R6
   \   00012D   F5..         MOV       ?V2,A
   \   00012F   E5..         MOV       A,?V3
   \   000131   3F           ADDC      A,R7
   \   000132   F5..         MOV       ?V3,A
   3738              }
   \   000134   05..         INC       ?V8
   \                     ??zclParseInWriteCmd_5:
   \   000136   E5..         MOV       A,?V8
   \   000138   C3           CLR       C
   \   000139   95..         SUBB      A,?V7
   \   00013B   5003         JNC       $+5
   \   00013D   02....       LJMP      ??zclParseInWriteCmd_6 & 0xFFFF
   3739            }
   3740          
   3741            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000140   02....       LJMP      ?Subroutine7 & 0xFFFF
   3742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine139_0
   \   000003                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000002                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000002   85..82       MOV       DPL,?V2
   \   000005   85..83       MOV       DPH,?V3
   \   000008   22           RET
   3743          
   3744          /*********************************************************************
   3745           * @fn      zclParseInWriteRspCmd
   3746           *
   3747           * @brief   Parse the "Profile" Write Response Commands
   3748           *
   3749           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3750           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3751           *
   3752           * @param   pCmd - pointer to incoming data to parse
   3753           *
   3754           * @return  pointer to the parsed command structure
   3755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3756          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3758            zclWriteRspCmd_t *writeRspCmd;
   3759            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   F5..         MOV       ?V2,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   85..82       MOV       DPL,?V2
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   3760            uint8 i = 0;
   \                     ??CrossCallReturnLabel_282:
   \   000016   75..00       MOV       ?V4,#0x0
   3761          
   3762            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000019   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3763            if ( writeRspCmd != NULL )
   \   00001F   EA           MOV       A,R2
   \   000020   4B           ORL       A,R3
   \   000021   6063         JZ        ??zclParseInWriteRspCmd_0
   3764            {
   3765              if ( pCmd->dataLen == 1 )
   \   000023   85..82       MOV       DPL,?V0
   \   000026   85..83       MOV       DPH,?V1
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   000030   703E         JNZ       ??zclParseInWriteRspCmd_2
   3766              {
   3767                // special case when all writes were successfull
   3768                writeRspCmd->attrList[i++].status = *pBuf;
   \   000032   12....       LCALL     ?Subroutine104 & 0xFFFF
   3769              }
   \                     ??CrossCallReturnLabel_239:
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   \   000037   75..01       MOV       ?V4,#0x1
   \   00003A   8043         SJMP      ??zclParseInWriteRspCmd_3
   3770              else
   3771              {
   3772                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3773                {
   3774                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   00003C   E5..         MOV       A,?V4
   \   00003E   75F003       MOV       B,#0x3
   \   000041   A4           MUL       AB
   \   000042   F8           MOV       R0,A
   \   000043   A9F0         MOV       R1,B
   \   000045   EA           MOV       A,R2
   \   000046   28           ADD       A,R0
   \   000047   F8           MOV       R0,A
   \   000048   EB           MOV       A,R3
   \   000049   39           ADDC      A,R1
   \   00004A   F9           MOV       R1,A
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000052   12....       LCALL     ?Subroutine12 & 0xFFFF
   3775                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_243:
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F5..         MOV       ?V6,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FD           MOV       R5,A
   \   00005B   E5..         MOV       A,?V6
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   ED           MOV       A,R5
   \   000066   F0           MOVX      @DPTR,A
   \   000067   05..         INC       ?V4
   3776                  pBuf += 2;
   \   000069   EE           MOV       A,R6
   \   00006A   2402         ADD       A,#0x2
   \   00006C   FE           MOV       R6,A
   \   00006D   5001         JNC       ??zclParseInWriteRspCmd_2
   \   00006F   0F           INC       R7
   3777                }
   \                     ??zclParseInWriteRspCmd_2:
   \   000070   85..82       MOV       DPL,?V0
   \   000073   85..83       MOV       DPH,?V1
   \   000076   12....       LCALL     ?Subroutine38 & 0xFFFF
   3778              }
   \                     ??CrossCallReturnLabel_44:
   \   000079   EE           MOV       A,R6
   \   00007A   98           SUBB      A,R0
   \   00007B   EF           MOV       A,R7
   \   00007C   99           SUBB      A,R1
   \   00007D   40BD         JC        ??zclParseInWriteRspCmd_4
   3779          
   3780              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   00007F   8A82         MOV       DPL,R2
   \   000081   8B83         MOV       DPH,R3
   \   000083   E5..         MOV       A,?V4
   \   000085   F0           MOVX      @DPTR,A
   3781            }
   3782          
   3783            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   000086   02....       LJMP      ??Subroutine122_0 & 0xFFFF
   3784          }
   3785          #endif // ZCL_WRITE
   3786          
   3787          #ifdef ZCL_REPORTING_DEVICE
   3788          /*********************************************************************
   3789           * @fn      zclParseInConfigReportCmd
   3790           *
   3791           * @brief   Parse the "Profile" Configure Reporting Command
   3792           *
   3793           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3794           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3795           *
   3796           * @param   pCmd - pointer to incoming data to parse
   3797           *
   3798           * @return  pointer to the parsed command structure
   3799           */
   3800          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   3801          {
   3802            zclCfgReportCmd_t *cfgReportCmd;
   3803            uint8 *pBuf = pCmd->pData;
   3804            uint8 *dataPtr;
   3805            uint8 numAttr = 0;
   3806            uint8 dataType;
   3807            uint8 hdrLen;
   3808            uint16 dataLen = 0;
   3809            uint8 reportChangeLen; // length of Reportable Change field
   3810          
   3811            // Calculate the length of the Request command
   3812            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3813            {
   3814              uint8 direction;
   3815          
   3816              numAttr++;
   3817              direction = *pBuf++;
   3818              pBuf += 2; // move pass the attribute ID
   3819          
   3820              // Is there a Reportable Change field?
   3821              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3822              {
   3823                dataType = *pBuf++;
   3824                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3825          
   3826                // For attributes of 'discrete' data types this field is omitted
   3827                if ( zclAnalogDataType( dataType ) )
   3828                {
   3829                  reportChangeLen = zclGetDataTypeLength( dataType );
   3830                  pBuf += reportChangeLen;
   3831          
   3832                  // add padding if needed
   3833                  if ( PADDING_NEEDED( reportChangeLen ) )
   3834                  {
   3835                    reportChangeLen++;
   3836                  }
   3837          
   3838                  dataLen += reportChangeLen;
   3839                }
   3840                else
   3841                {
   3842                  pBuf++; // move past reportable change field
   3843                }
   3844              }
   3845              else
   3846              {
   3847                pBuf += 2; // move pass the Timeout Period
   3848              }
   3849            } // while loop
   3850          
   3851            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   3852          
   3853            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3854            if ( cfgReportCmd != NULL )
   3855            {
   3856              uint8 i;
   3857              pBuf = pCmd->pData;
   3858              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   3859          
   3860              cfgReportCmd->numAttr = numAttr;
   3861              for ( i = 0; i < numAttr; i++ )
   3862              {
   3863                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3864          
   3865                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3866          
   3867                reportRec->direction = *pBuf++;
   3868                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3869                pBuf += 2;
   3870                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3871                {
   3872                  // Attribute to be reported
   3873                  reportRec->dataType = *pBuf++;
   3874                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3875                  pBuf += 2;
   3876                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3877                  pBuf += 2;
   3878          
   3879                  // For attributes of 'discrete' data types this field is omitted
   3880                  if ( zclAnalogDataType( reportRec->dataType ) )
   3881                  {
   3882                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3883                    reportRec->reportableChange = dataPtr;
   3884          
   3885                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3886                    pBuf += reportChangeLen;
   3887          
   3888                    // advance attribute data pointer
   3889                    if ( PADDING_NEEDED( reportChangeLen ) )
   3890                    {
   3891                      reportChangeLen++;
   3892                    }
   3893          
   3894                    dataPtr += reportChangeLen;
   3895                  }
   3896                }
   3897                else
   3898                {
   3899                  // Attribute reports to be received
   3900                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   3901                  pBuf += 2;
   3902                }
   3903              } // while loop
   3904            }
   3905          
   3906            return ( (void *)cfgReportCmd );
   3907          }
   3908          #endif
   3909          
   3910          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3911          /*********************************************************************
   3912           * @fn      zclParseInConfigReportRspCmd
   3913           *
   3914           * @brief   Parse the "Profile" Configure Reporting Response Command
   3915           *
   3916           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3917           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3918           *
   3919           * @param   pCmd - pointer to incoming data to parse
   3920           *
   3921           * @return  pointer to the parsed command structure
   3922           */
   3923          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   3924          {
   3925            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3926            uint8 *pBuf = pCmd->pData;
   3927            uint8 numAttr;
   3928          
   3929            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   3930          
   3931            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3932                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   3933            if ( cfgReportRspCmd != NULL )
   3934            {
   3935              uint8 i;
   3936              cfgReportRspCmd->numAttr = numAttr;
   3937              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   3938              {
   3939                cfgReportRspCmd->attrList[i].status = *pBuf++;
   3940                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3941                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3942                pBuf += 2;
   3943              }
   3944            }
   3945          
   3946            return ( (void *)cfgReportRspCmd );
   3947          }
   3948          #endif
   3949          
   3950          #ifdef ZCL_REPORTING_DEVICE
   3951          /*********************************************************************
   3952           * @fn      zclParseInReadReportCfgCmd
   3953           *
   3954           * @brief   Parse the "Profile" Read Reporting Configuration Command
   3955           *
   3956           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3957           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3958           *
   3959           * @param   pCmd - pointer to incoming data to parse
   3960           *
   3961           * @return  pointer to the parsed command structure
   3962           */
   3963          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   3964          {
   3965            zclReadReportCfgCmd_t *readReportCfgCmd;
   3966            uint8 *pBuf = pCmd->pData;
   3967            uint8 numAttr;
   3968          
   3969            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   3970          
   3971            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   3972                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   3973            if ( readReportCfgCmd != NULL )
   3974            {
   3975              uint8 i;
   3976              readReportCfgCmd->numAttr = numAttr;
   3977              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   3978              {
   3979                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   3980                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3981                pBuf += 2;
   3982              }
   3983            }
   3984          
   3985            return ( (void *)readReportCfgCmd );
   3986          }
   3987          #endif
   3988          
   3989          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3990          /*********************************************************************
   3991           * @fn      zclParseInReadReportCfgRspCmd
   3992           *
   3993           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   3994           *
   3995           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3996           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3997           *
   3998           * @param   pCmd - pointer to incoming data to parse
   3999           *
   4000           * @return  pointer to the parsed command structure
   4001           */
   4002          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   4003          {
   4004            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4005            uint8 reportChangeLen;
   4006            uint8 *pBuf = pCmd->pData;
   4007            uint8 *dataPtr;
   4008            uint8 numAttr = 0;
   4009            uint8 hdrLen;
   4010            uint16 dataLen = 0;
   4011          
   4012            // Calculate the length of the response command
   4013            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4014            {
   4015              uint8 status;
   4016              uint8 direction;
   4017          
   4018              numAttr++;
   4019              status = *pBuf++;
   4020              direction = *pBuf++;
   4021              pBuf += 2; // move pass the attribute ID
   4022          
   4023              if ( status == ZCL_STATUS_SUCCESS )
   4024              {
   4025                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4026                {
   4027                  uint8 dataType = *pBuf++;
   4028                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4029          
   4030                  // For attributes of 'discrete' data types this field is omitted
   4031                  if ( zclAnalogDataType( dataType ) )
   4032                  {
   4033                    reportChangeLen = zclGetDataTypeLength( dataType );
   4034                    pBuf += reportChangeLen;
   4035          
   4036                    // add padding if needed
   4037                    if ( PADDING_NEEDED( reportChangeLen ) )
   4038                    {
   4039                      reportChangeLen++;
   4040                    }
   4041          
   4042                    dataLen += reportChangeLen;
   4043                  }
   4044                }
   4045                else
   4046                {
   4047                  pBuf += 2; // move pass the Timeout field
   4048                }
   4049              }
   4050            } // while loop
   4051          
   4052            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   4053          
   4054            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4055            if ( readReportCfgRspCmd != NULL )
   4056            {
   4057              uint8 i;
   4058              pBuf = pCmd->pData;
   4059              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   4060          
   4061              readReportCfgRspCmd->numAttr = numAttr;
   4062              for ( i = 0; i < numAttr; i++ )
   4063              {
   4064                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4065          
   4066                reportRspRec->status = *pBuf++;
   4067                reportRspRec->direction = *pBuf++;
   4068                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4069                pBuf += 2;
   4070          
   4071                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4072                {
   4073                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4074                  {
   4075                    reportRspRec->dataType = *pBuf++;
   4076                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4077                    pBuf += 2;
   4078                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4079                    pBuf += 2;
   4080          
   4081                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4082                    {
   4083                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4084                      reportRspRec->reportableChange = dataPtr;
   4085          
   4086                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4087                      pBuf += reportChangeLen;
   4088          
   4089                      // advance attribute data pointer
   4090                      if ( PADDING_NEEDED( reportChangeLen ) )
   4091                      {
   4092                        reportChangeLen++;
   4093                      }
   4094          
   4095                      dataPtr += reportChangeLen;
   4096                    }
   4097                  }
   4098                  else
   4099                  {
   4100                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4101                    pBuf += 2;
   4102                  }
   4103                }
   4104              }
   4105            }
   4106          
   4107            return ( (void *)readReportCfgRspCmd );
   4108          }
   4109          #endif
   4110          
   4111          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4112          /*********************************************************************
   4113           * @fn      zclParseInReportCmd
   4114           *
   4115           * @brief   Parse the "Profile" Report Command
   4116           *
   4117           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4118           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4119           *
   4120           * @param   pCmd - pointer to incoming data to parse
   4121           *
   4122           * @return  pointer to the parsed command structure
   4123           */
   4124          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   4125          {
   4126            zclReportCmd_t *reportCmd;
   4127            uint8 *pBuf = pCmd->pData;
   4128            uint16 attrDataLen;
   4129            uint8 *dataPtr;
   4130            uint8 numAttr = 0;
   4131            uint8 hdrLen;
   4132            uint16 dataLen = 0;
   4133          
   4134            // find out the number of attributes and the length of attribute data
   4135            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4136            {
   4137              uint8 dataType;
   4138          
   4139              numAttr++;
   4140              pBuf += 2; // move pass attribute id
   4141          
   4142              dataType = *pBuf++;
   4143          
   4144              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   4145              pBuf += attrDataLen; // move pass attribute data
   4146          
   4147              // add padding if needed
   4148              if ( PADDING_NEEDED( attrDataLen ) )
   4149              {
   4150                attrDataLen++;
   4151              }
   4152          
   4153              dataLen += attrDataLen;
   4154            }
   4155          
   4156            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   4157          
   4158            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4159            if (reportCmd != NULL )
   4160            {
   4161              uint8 i;
   4162              pBuf = pCmd->pData;
   4163              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   4164          
   4165              reportCmd->numAttr = numAttr;
   4166              for ( i = 0; i < numAttr; i++ )
   4167              {
   4168                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   4169          
   4170                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4171                pBuf += 2;
   4172                reportRec->dataType = *pBuf++;
   4173          
   4174                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   4175                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   4176                reportRec->attrData = dataPtr;
   4177          
   4178                pBuf += attrDataLen; // move pass attribute data
   4179          
   4180                // advance attribute data pointer
   4181                if ( PADDING_NEEDED( attrDataLen ) )
   4182                {
   4183                  attrDataLen++;
   4184                }
   4185          
   4186                dataPtr += attrDataLen;
   4187              }
   4188            }
   4189          
   4190            return ( (void *)reportCmd );
   4191          }
   4192          #endif
   4193          
   4194          /*********************************************************************
   4195           * @fn      zclParseInDefaultRspCmd
   4196           *
   4197           * @brief   Parse the "Profile" Default Response Command
   4198           *
   4199           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4200           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4201           *
   4202           * @param   pCmd - pointer to incoming data to parse
   4203           *
   4204           * @return  pointer to the parsed command structure
   4205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4206          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4208            zclDefaultRspCmd_t *defaultRspCmd;
   4209            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine67 & 0xFFFF
   4210          
   4211            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_106:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A02         MOV       R2,#0x2
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4212            if ( defaultRspCmd != NULL )
   \   00000F   EA           MOV       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   6009         JZ        ??zclParseInDefaultRspCmd_0
   4213            {
   4214              defaultRspCmd->commandID = *pBuf++;
   \   000013   12....       LCALL     ?Subroutine16 & 0xFFFF
   4215              defaultRspCmd->statusCode = *pBuf;
   4216            }
   \                     ??CrossCallReturnLabel_235:
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   4217          
   4218            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001C   02....       LJMP      ?Subroutine2 & 0xFFFF
   4219          }
   4220          
   4221          #ifdef ZCL_DISCOVER
   4222          /*********************************************************************
   4223           * @fn      zclParseInDiscAttrsCmd
   4224           *
   4225           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4226           *
   4227           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4228           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4229           *
   4230           * @param   pCmd - pointer to incoming data to parse
   4231           *
   4232           * @return  pointer to the parsed command structure
   4233           */
   4234          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   4235          {
   4236            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4237            uint8 *pBuf = pCmd->pData;
   4238          
   4239            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   4240            if ( pDiscoverCmd != NULL )
   4241            {
   4242              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   4243              pBuf += 2;
   4244              pDiscoverCmd->maxAttrIDs = *pBuf;
   4245            }
   4246          
   4247            return ( (void *)pDiscoverCmd );
   4248          }
   4249          
   4250          /*********************************************************************
   4251           * @fn      zclParseInDiscAttrsRspCmd
   4252           *
   4253           * @brief   Parse the "Profile" Discovery Response Commands
   4254           *
   4255           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4256           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4257           *
   4258           * @param   pCmd - pointer to incoming data to parse
   4259           *
   4260           * @return  pointer to the parsed command structure
   4261           */
   4262          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   4263          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   4264          {
   4265            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4266            uint8 *pBuf = pCmd->pData;
   4267            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   4268          
   4269            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4270                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   4271          
   4272            if ( pDiscoverRspCmd != NULL )
   4273            {
   4274              uint8 i;
   4275          
   4276              pDiscoverRspCmd->discComplete = *pBuf++;
   4277              pDiscoverRspCmd->numAttr = numAttr;
   4278          
   4279              for ( i = 0; i < numAttr; i++ )
   4280              {
   4281                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4282                pBuf += 2;
   4283                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4284              }
   4285            }
   4286          
   4287            return ( (void *)pDiscoverRspCmd );
   4288          }
   4289          
   4290          /*********************************************************************
   4291           * @fn      zclParseInDiscCmdsCmd
   4292           *
   4293           * @brief   Parse the "Profile" Discovery Commands
   4294           *
   4295           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4296           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4297           *
   4298           * @param   pCmd - pointer to incoming data to parse
   4299           *
   4300           * @return  pointer to the parsed command structure
   4301           */
   4302          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   4303          {
   4304            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4305            uint8 *pBuf = pCmd->pData;
   4306          
   4307            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   4308            if ( pDiscoverCmd != NULL )
   4309            {
   4310              pDiscoverCmd->startCmdID = *pBuf++;
   4311              pDiscoverCmd->maxCmdID = *pBuf++;
   4312            }
   4313          
   4314            return ( (void *)pDiscoverCmd );
   4315          }
   4316          
   4317          /*********************************************************************
   4318           * @fn      zclParseInDiscCmdsRspCmd
   4319           *
   4320           * @brief   Parse the Discover Commands Response Command
   4321           *
   4322           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4323           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4324           *
   4325           * @param   pCmd - pointer to incoming data to parse
   4326           *
   4327           * @return  pointer to the parsed command structure
   4328           */
   4329          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   4330          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   4331          {
   4332            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4333            uint8 *pBuf = pCmd->pData;
   4334            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   4335          
   4336              // allocate memory for size of structure plus variable array
   4337            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4338                              ( numCmds * sizeof(uint8) ) );
   4339            if ( pDiscoverRspCmd != NULL )
   4340            {
   4341              uint8 i;
   4342              pDiscoverRspCmd->discComplete = *pBuf++;
   4343              pDiscoverRspCmd->numCmd = numCmds;
   4344          
   4345              for ( i = 0; i < numCmds; i++ )
   4346              {
   4347                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   4348              }
   4349            }
   4350          
   4351            return ( (void *)pDiscoverRspCmd );
   4352          }
   4353          
   4354          /*********************************************************************
   4355           * @fn      zclParseInDiscAttrsExtRspCmd
   4356           *
   4357           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4358           *
   4359           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4360           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4361           *
   4362           * @param   pCmd - pointer to incoming data to parse
   4363           *
   4364           * @return  pointer to the parsed command structure
   4365           */
   4366          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   4367          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   4368          {
   4369            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4370            uint8 i;
   4371            uint8 *pBuf = pCmd->pData;
   4372            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   4373          
   4374            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4375                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   4376          
   4377            if ( pDiscoverRspCmd != NULL )
   4378            {
   4379              pDiscoverRspCmd->discComplete = *pBuf++;
   4380              pDiscoverRspCmd->numAttr = numAttrs;
   4381          
   4382              for ( i = 0; i < numAttrs; i++ )
   4383              {
   4384                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4385                pBuf += 2;
   4386                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4387                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   4388              }
   4389            }
   4390          
   4391            return ( (void *)pDiscoverRspCmd );
   4392          }
   4393          #endif // ZCL_DISCOVER
   4394          
   4395          #ifdef ZCL_READ
   4396          /*********************************************************************
   4397           * @fn      zclProcessInReadCmd
   4398           *
   4399           * @brief   Process the "Profile" Read Command
   4400           *
   4401           * @param   pInMsg - incoming message to process
   4402           *
   4403           * @return  TRUE if command processed. FALSE, otherwise.
   4404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine117_0
   \   000002                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4405          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   4407            zclReadCmd_t *readCmd;
   4408            zclReadRspCmd_t *readRspCmd;
   4409            zclAttrRec_t attrRec;
   4410            uint16 len;
   4411            uint8 i;
   4412            uint8 attrFound;
   4413          
   4414            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   EE           MOV       A,R6
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V10,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V11,A
   4415          
   4416            // calculate the length of the response status record
   4417            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4418          
   4419            readRspCmd = zcl_mem_alloc( len );
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   85..82       MOV       DPL,?V10
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   75F006       MOV       B,#0x6
   \   000027   A4           MUL       AB
   \   000028   A9F0         MOV       R1,B
   \   00002A   2401         ADD       A,#0x1
   \   00002C   FA           MOV       R2,A
   \   00002D   E4           CLR       A
   \   00002E   39           ADDC      A,R1
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V0,R2
   \   000035   8B..         MOV       ?V1,R3
   4420            if ( readRspCmd == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   45..         ORL       A,?V1
   \   00003A   7005         JNZ       ??zclProcessInReadCmd_0
   4421            {
   4422              return FALSE; // EMBEDDED RETURN
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4423            }
   4424          
   4425            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   000041   85..82       MOV       DPL,?V10
   \   000044   85..83       MOV       DPH,?V11
   \   000047   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00004A   F0           MOVX      @DPTR,A
   4426            for ( i = 0; i < readCmd->numAttr; i++ )
   \   00004B   75..00       MOV       ?V2,#0x0
   \   00004E   EE           MOV       A,R6
   \   00004F   2402         ADD       A,#0x2
   \   000051   F5..         MOV       ?V14,A
   \   000053   E4           CLR       A
   \   000054   3F           ADDC      A,R7
   \   000055   F5..         MOV       ?V15,A
   \   000057   800B         SJMP      ??zclProcessInReadCmd_2
   4427            {
   4428              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4429          
   4430              statusRec->attrID = readCmd->attrID[i];
   4431              
   4432              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4433              
   4434              //Validate the attribute is found and the access control
   4435              if ( ( attrFound == TRUE ) && 
   4436                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4437                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4438              {
   4439                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4440                {
   4441                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4442                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4443                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4444                  {
   4445                    statusRec->data = attrRec.attr.dataPtr;
   4446                    statusRec->dataType = attrRec.attr.dataType;
   4447                  }
   4448                }
   4449                else
   4450                {
   4451                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4452                }
   4453              }
   4454              else
   4455              {
   4456                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   000059   85..82       MOV       DPL,?V6
   \   00005C   85..83       MOV       DPH,?V7
   \   00005F   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   000061   F0           MOVX      @DPTR,A
   4457              }
   \                     ??zclProcessInReadCmd_5:
   \   000062   05..         INC       ?V2
   \                     ??zclProcessInReadCmd_2:
   \   000064   85..82       MOV       DPL,?V10
   \   000067   85..83       MOV       DPH,?V11
   \   00006A   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00006D   4003         JC        $+5
   \   00006F   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   000072   A8..         MOV       R0,?V2
   \   000074   E8           MOV       A,R0
   \   000075   75F006       MOV       B,#0x6
   \   000078   A4           MUL       AB
   \   000079   FA           MOV       R2,A
   \   00007A   ABF0         MOV       R3,B
   \   00007C   E5..         MOV       A,?V0
   \   00007E   2A           ADD       A,R2
   \   00007F   F582         MOV       DPL,A
   \   000081   E5..         MOV       A,?V1
   \   000083   3B           ADDC      A,R3
   \   000084   F583         MOV       DPH,A
   \   000086   A3           INC       DPTR
   \   000087   8582..       MOV       ?V4,DPL
   \   00008A   8583..       MOV       ?V5,DPH
   \   00008D   E8           MOV       A,R0
   \   00008E   28           ADD       A,R0
   \   00008F   F8           MOV       R0,A
   \   000090   E4           CLR       A
   \   000091   33           RLC       A
   \   000092   F9           MOV       R1,A
   \   000093   E5..         MOV       A,?V10
   \   000095   28           ADD       A,R0
   \   000096   F582         MOV       DPL,A
   \   000098   E5..         MOV       A,?V11
   \   00009A   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00009D   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000A0   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0000A3   E5..         MOV       A,?V4
   \   0000A5   2402         ADD       A,#0x2
   \   0000A7   F5..         MOV       ?V6,A
   \   0000A9   E4           CLR       A
   \   0000AA   35..         ADDC      A,?V5
   \   0000AC   F5..         MOV       ?V7,A
   \   0000AE   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0000B1                ; Setup parameters for call to function zclFindAttrRec
   \   0000B1   A8..         MOV       R0,?XSP + 0
   \   0000B3   A9..         MOV       R1,?XSP + 1
   \   0000B5   88..         MOV       ?V12,R0
   \   0000B7   89..         MOV       ?V13,R1
   \   0000B9   78..         MOV       R0,#?V12
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   8A82         MOV       DPL,R2
   \   0000C0   8B83         MOV       DPH,R3
   \   0000C2   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000C5   85..82       MOV       DPL,?V8
   \   0000C8   85..83       MOV       DPH,?V9
   \   0000CB   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0000CE   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000D1   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV       A,R1
   \   0000DA   6401         XRL       A,#0x1
   \   0000DC   6003         JZ        $+5
   \   0000DE   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \   0000E1   7405         MOV       A,#0x5
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000E9   401A         JC        ??zclProcessInReadCmd_7
   \   0000EB   85..82       MOV       DPL,?V14
   \   0000EE   85..83       MOV       DPH,?V15
   \   0000F1   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000F4   7405         MOV       A,#0x5
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000FC   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   0000FF   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   000100   4003         JC        $+5
   \   000102   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   000105   A2E0         MOV       C,0xE0 /* A   */.0
   \   000107   5067         JNC       ??zclProcessInReadCmd_9
   \   000109   8E82         MOV       DPL,R6
   \   00010B   8F83         MOV       DPH,R7
   \   00010D   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000110   E8           MOV       A,R0
   \   000111   2406         ADD       A,#0x6
   \   000113   F5..         MOV       ?V8,A
   \   000115   E4           CLR       A
   \   000116   39           ADDC      A,R1
   \   000117   F5..         MOV       ?V9,A
   \   000119   7405         MOV       A,#0x5
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   A2E4         MOV       C,0xE0 /* A   */.4
   \   000121   5020         JNC       ??zclProcessInReadCmd_10
   \   000123                ; Setup parameters for call to function zclGetAuthorizeCB
   \   000123   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000126   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   000129   8A82         MOV       DPL,R2
   \   00012B   8B83         MOV       DPH,R3
   \   00012D   E582         MOV       A,DPL
   \   00012F   4583         ORL       A,DPH
   \   000131   6010         JZ        ??zclProcessInReadCmd_10
   \   000133                ; Setup parameters for indirect call
   \   000133   7901         MOV       R1,#0x1
   \   000135   AC..         MOV       R4,?XSP + 0
   \   000137   AD..         MOV       R5,?XSP + 1
   \   000139   AA..         MOV       R2,?V8
   \   00013B   AB..         MOV       R3,?V9
   \   00013D   12....       LCALL     ?CALL_IND
   \   000140   E9           MOV       A,R1
   \   000141   8002         SJMP      ??zclProcessInReadCmd_11
   \                     ??zclProcessInReadCmd_10:
   \   000143   7400         MOV       A,#0x0
   4458            }
   \                     ??zclProcessInReadCmd_11:
   \   000145   85..82       MOV       DPL,?V6
   \   000148   85..83       MOV       DPH,?V7
   \   00014B   F0           MOVX      @DPTR,A
   \   00014C   6003         JZ        $+5
   \   00014E   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000151   7406         MOV       A,#0x6
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00015E   7404         MOV       A,#0x4
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   E0           MOVX      A,@DPTR
   \   000164   85..82       MOV       DPL,?V4
   \   000167   85..83       MOV       DPH,?V5
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   000170   85..82       MOV       DPL,?V6
   \   000173   85..83       MOV       DPH,?V7
   \   000176   748F         MOV       A,#-0x71
   \   000178   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4459          
   4460            // Build and send Read Response command
   4461            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4462                             readRspCmd, !pInMsg->hdr.fc.direction,
   4463                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   00017B   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00017E                ; Setup parameters for call to function zcl_SendReadRsp
   \   00017E   8E82         MOV       DPL,R6
   \   000180   8F83         MOV       DPH,R7
   \   000182   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000188   75..01       MOV       ?V2,#0x1
   \   00018B   78..         MOV       R0,#?V2
   \   00018D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000190   85..82       MOV       DPL,?V14
   \   000193   85..83       MOV       DPH,?V15
   \   000196   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019C   78..         MOV       R0,#?V0
   \   00019E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A1   85..82       MOV       DPL,?V8
   \   0001A4   85..83       MOV       DPH,?V9
   \   0001A7   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   0001AA   E5..         MOV       A,?V8
   \   0001AC   2406         ADD       A,#0x6
   \   0001AE   FA           MOV       R2,A
   \   0001AF   E4           CLR       A
   \   0001B0   35..         ADDC      A,?V9
   \   0001B2   FB           MOV       R3,A
   \   0001B3   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001B6   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   0001B9   7405         MOV       A,#0x5
   \   0001BB   12....       LCALL     ?DEALLOC_XSTACK8
   4464            zcl_mem_free( readRspCmd );
   \   0001BE                ; Setup parameters for call to function osal_mem_free
   \   0001BE   AA..         MOV       R2,?V0
   \   0001C0   AB..         MOV       R3,?V1
   \   0001C2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4465          
   4466            return TRUE;
   \   0001C5   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   0001C7   7408         MOV       A,#0x8
   \   0001C9   02....       LJMP      ?Subroutine5 & 0xFFFF
   4467          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E5..         MOV       A,?V8
   \   000002   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000005   35..         ADDC      A,?V9
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine129_0
   \   000006                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   A2E0         MOV       C,0xE0 /* A   */.0
   \   000008   92F0         MOV       B.0,C
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine134_0
   \   000004                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET
   4468          #endif // ZCL_READ
   4469          
   4470          #ifdef ZCL_WRITE
   4471          /*********************************************************************
   4472           * @fn      processInWriteCmd
   4473           *
   4474           * @brief   Process the "Profile" Write and Write No Response Commands
   4475           *
   4476           * @param   pInMsg - incoming message to process
   4477           *
   4478           * @return  TRUE if command processed. FALSE, otherwise.
   4479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4480          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   4482            zclWriteCmd_t *writeCmd;
   4483            zclWriteRspCmd_t *writeRspCmd;
   4484            uint8 sendRsp = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   4485            uint8 j = 0;
   \   000010   7E00         MOV       R6,#0x0
   4486            uint8 i;
   4487          
   4488            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000012   EA           MOV       A,R2
   \   000013   240C         ADD       A,#0xc
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   35..         ADDC      A,?V3
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V14,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V15,A
   4489            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6402         XRL       A,#0x2
   \   000031   701C         JNZ       ??zclProcessInWriteCmd_0
   4490            {
   4491              // We need to send a response back - allocate space for it
   4492              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4493                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   85..82       MOV       DPL,?V14
   \   000036   85..83       MOV       DPH,?V15
   \   000039   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003F   8A..         MOV       ?V4,R2
   \   000041   8B..         MOV       ?V5,R3
   4494              if ( writeRspCmd == NULL )
   \   000043   EA           MOV       A,R2
   \   000044   45..         ORL       A,?V5
   \   000046   7005         JNZ       ??zclProcessInWriteCmd_1
   4495              {
   4496                return FALSE; // EMBEDDED RETURN
   \   000048   7900         MOV       R1,#0x0
   \   00004A   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4497              }
   4498          
   4499              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   00004D   D2..         SETB      ?VB.0
   4500            }
   4501          
   4502            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   00004F   7F00         MOV       R7,#0x0
   \   000051   8010         SJMP      ??zclProcessInWriteCmd_3
   4503            {
   4504              zclAttrRec_t attrRec;
   4505              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4506          
   4507              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4508                                   statusRec->attrID, &attrRec ) )
   4509              {
   4510                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4511                {
   4512                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4513                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4514                  break;
   4515                }
   4516                if ( statusRec->dataType == attrRec.attr.dataType )
   4517                {
   4518                  uint8 status;
   4519          
   4520                  // Write the new attribute value
   4521                  if ( attrRec.attr.dataPtr != NULL )
   4522                  {
   4523                    //Handle special case for Identify
   4524                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4525                    {
   4526                      uint16 identifyTime; 
   4527                            
   4528                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4529                                  
   4530                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4531                      
   4532                      status = ZCL_STATUS_SUCCESS;
   4533                    }          
   4534                    else
   4535                    {                
   4536                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4537                                                 &attrRec, statusRec );
   4538                    }
   4539                  }
   4540                  else // Use CB
   4541                  {
   4542                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4543                                                      &attrRec, statusRec->attrData );
   4544                  }
   4545          
   4546                  // If successful, a write attribute status record shall NOT be generated
   4547                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4548                  {
   4549                    // Attribute is read only - move on to the next write attribute record
   4550                    writeRspCmd->attrList[j].status = status;
   4551                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4552                  }
   4553                }
   4554                else
   4555                {
   4556                  // Attribute data type is incorrect - move on to the next write attribute record
   4557                  if ( sendRsp )
   4558                  {
   4559                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4560                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4561                  }
   4562                }
   4563              }
   4564              else
   4565              {
   4566                // Attribute is not supported - move on to the next write attribute record
   4567                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   000053   A2..         MOV       C,?VB.0
   \   000055   500B         JNC       ??CrossCallReturnLabel_0
   4568                {
   4569                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000057   85..82       MOV       DPL,?V12
   \   00005A   85..83       MOV       DPH,?V13
   \   00005D   7486         MOV       A,#-0x7a
   4570                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4571                }
   4572              }
   \                     ??zclProcessInWriteCmd_5:
   \   00005F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000062   0F           INC       R7
   \                     ??zclProcessInWriteCmd_3:
   \   000063   85..82       MOV       DPL,?V14
   \   000066   85..83       MOV       DPH,?V15
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   EF           MOV       A,R7
   \   00006C   C3           CLR       C
   \   00006D   98           SUBB      A,R0
   \   00006E   4003         JC        $+5
   \   000070   02....       LJMP      ??CrossCallReturnLabel_1 & 0xFFFF
   \   000073   EF           MOV       A,R7
   \   000074   75F005       MOV       B,#0x5
   \   000077   A4           MUL       AB
   \   000078   F8           MOV       R0,A
   \   000079   A9F0         MOV       R1,B
   \   00007B   E5..         MOV       A,?V14
   \   00007D   28           ADD       A,R0
   \   00007E   F582         MOV       DPL,A
   \   000080   E5..         MOV       A,?V15
   \   000082   39           ADDC      A,R1
   \   000083   F583         MOV       DPH,A
   \   000085   A3           INC       DPTR
   \   000086   8582..       MOV       ?V0,DPL
   \   000089   8583..       MOV       ?V1,DPH
   \   00008C   EE           MOV       A,R6
   \   00008D   75F003       MOV       B,#0x3
   \   000090   A4           MUL       AB
   \   000091   F8           MOV       R0,A
   \   000092   A9F0         MOV       R1,B
   \   000094   E5..         MOV       A,?V4
   \   000096   28           ADD       A,R0
   \   000097   F582         MOV       DPL,A
   \   000099   E5..         MOV       A,?V5
   \   00009B   39           ADDC      A,R1
   \   00009C   F583         MOV       DPH,A
   \   00009E   E582         MOV       A,DPL
   \   0000A0   2402         ADD       A,#0x2
   \   0000A2   F5..         MOV       ?V8,A
   \   0000A4   E4           CLR       A
   \   0000A5   3583         ADDC      A,DPH
   \   0000A7   F5..         MOV       ?V9,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   8582..       MOV       ?V12,DPL
   \   0000AD   8583..       MOV       ?V13,DPH
   \   0000B0   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0000B3                ; Setup parameters for call to function zclFindAttrRec
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B8   88..         MOV       ?V10,R0
   \   0000BA   89..         MOV       ?V11,R1
   \   0000BC   78..         MOV       R0,#?V10
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C1   85..82       MOV       DPL,?V0
   \   0000C4   85..83       MOV       DPH,?V1
   \   0000C7   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000CA   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000CD   7402         MOV       A,#0x2
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D2   E9           MOV       A,R1
   \   0000D3   7003         JNZ       $+5
   \   0000D5   02....       LJMP      ??zclProcessInWriteCmd_4 & 0xFFFF
   \   0000D8   85..82       MOV       DPL,?V2
   \   0000DB   85..83       MOV       DPH,?V3
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000E3   7407         MOV       A,#0x7
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000EB   20F001       JB        B.0,??zclProcessInWriteCmd_6
   \   0000EE   B3           CPL       C
   \                     ??zclProcessInWriteCmd_6:
   \   0000EF   4077         JC        ??zclProcessInWriteCmd_7
   \   0000F1   85..82       MOV       DPL,?V12
   \   0000F4   85..83       MOV       DPH,?V13
   \   0000F7   7486         MOV       A,#-0x7a
   \   0000F9   12....       LCALL     ?Subroutine10 & 0xFFFF
   4573            } // for loop
   4574          
   4575            if ( sendRsp )
   \                     ??CrossCallReturnLabel_1:
   \   0000FC   A2..         MOV       C,?VB.0
   \   0000FE   5061         JNC       ??zclProcessInWriteCmd_8
   4576            {
   4577              writeRspCmd->numAttr = j;
   \   000100   EE           MOV       A,R6
   \   000101   85..82       MOV       DPL,?V4
   \   000104   85..83       MOV       DPH,?V5
   \   000107   F0           MOVX      @DPTR,A
   4578              if ( writeRspCmd->numAttr == 0 )
   \   000108   700B         JNZ       ??zclProcessInWriteCmd_9
   4579              {
   4580                // Since all records were written successful, include a single status record
   4581                // in the resonse command with the status field set to SUCCESS and the
   4582                // attribute ID field omitted.
   4583                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00010A   A3           INC       DPTR
   \   00010B   E4           CLR       A
   \   00010C   F0           MOVX      @DPTR,A
   4584                writeRspCmd->numAttr = 1;
   \   00010D   85..82       MOV       DPL,?V4
   \   000110   85..83       MOV       DPH,?V5
   \   000113   04           INC       A
   \   000114   F0           MOVX      @DPTR,A
   4585              }
   4586          
   4587              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4588                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4589                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_9:
   \   000115   85..82       MOV       DPL,?V2
   \   000118   85..83       MOV       DPH,?V3
   \   00011B   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00011E                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00011E   85..82       MOV       DPL,?V2
   \   000121   85..83       MOV       DPH,?V3
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000130   75..01       MOV       ?V0,#0x1
   \   000133   78..         MOV       R0,#?V0
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000138   85..82       MOV       DPL,?V2
   \   00013B   85..83       MOV       DPH,?V3
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000143   F5..         MOV       ?V0,A
   \   000145   78..         MOV       R0,#?V0
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014A   78..         MOV       R0,#?V4
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014F   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000152   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000155   7405         MOV       A,#0x5
   \   000157   12....       LCALL     ?DEALLOC_XSTACK8
   4590              zcl_mem_free( writeRspCmd );
   \   00015A                ; Setup parameters for call to function osal_mem_free
   \   00015A   AA..         MOV       R2,?V4
   \   00015C   AB..         MOV       R3,?V5
   \   00015E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4591            }
   4592          
   4593            return TRUE;
   \                     ??zclProcessInWriteCmd_8:
   \   000161   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000163   740A         MOV       A,#0xa
   \   000165   02....       LJMP      ?Subroutine5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_7:
   \   000168   85..82       MOV       DPL,?V0
   \   00016B   85..83       MOV       DPH,?V1
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   E0           MOVX      A,@DPTR
   \   000171   F8           MOV       R0,A
   \   000172   7406         MOV       A,#0x6
   \   000174   12....       LCALL     ?XSTACK_DISP0_8
   \   000177   E0           MOVX      A,@DPTR
   \   000178   68           XRL       A,R0
   \   000179   6003         JZ        $+5
   \   00017B   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   \   00017E   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000181   7408         MOV       A,#0x8
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000189   606F         JZ        ??zclProcessInWriteCmd_11
   \   00018B   85..82       MOV       DPL,?V6
   \   00018E   85..83       MOV       DPH,?V7
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \   000196   6403         XRL       A,#0x3
   \   000198   7002         JNZ       ??zclProcessInWriteCmd_12
   \   00019A   A3           INC       DPTR
   \   00019B   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_12:
   \   00019C   704A         JNZ       ??zclProcessInWriteCmd_13
   \   00019E   85..82       MOV       DPL,?V0
   \   0001A1   85..83       MOV       DPH,?V1
   \   0001A4   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0001A7   703F         JNZ       ??zclProcessInWriteCmd_13
   \   0001A9                ; Setup parameters for call to function osal_memcpy
   \   0001A9   85..82       MOV       DPL,?V0
   \   0001AC   85..83       MOV       DPH,?V1
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   0001B5   75..00       MOV       ?V10,#0x0
   \   0001B8   78..         MOV       R0,#?V8
   \   0001BA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001BD   7C02         MOV       R4,#0x2
   \   0001BF   7D00         MOV       R5,#0x0
   \   0001C1   7403         MOV       A,#0x3
   \   0001C3   12....       LCALL     ?XSTACK_DISP101_8
   \   0001C6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C9   7403         MOV       A,#0x3
   \   0001CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CE                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   0001CE   85..82       MOV       DPL,?V2
   \   0001D1   85..83       MOV       DPH,?V3
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   F8           MOV       R0,A
   \   0001D6   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001D9   85..82       MOV       DPL,?XSP + 0
   \   0001DC   85..83       MOV       DPH,?XSP + 1
   \   0001DF   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0001E2   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   0001E5   02....       LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
   \                     ??zclProcessInWriteCmd_13:
   \   0001E8                ; Setup parameters for call to function zclWriteAttrData
   \   0001E8   78..         MOV       R0,#?V0
   \   0001EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001ED   7404         MOV       A,#0x4
   \   0001EF   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F2   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0001F5   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   0001F8   8017         SJMP      ??zclProcessInWriteCmd_14
   \                     ??zclProcessInWriteCmd_11:
   \   0001FA                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0001FA   85..82       MOV       DPL,?V0
   \   0001FD   85..83       MOV       DPH,?V1
   \   000200   A3           INC       DPTR
   \   000201   A3           INC       DPTR
   \   000202   A3           INC       DPTR
   \   000203   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000206   7404         MOV       A,#0x4
   \   000208   12....       LCALL     ?XSTACK_DISP102_8
   \   00020B   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00020E   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteCmd_14:
   \   000211   7402         MOV       A,#0x2
   \   000213   12....       LCALL     ?DEALLOC_XSTACK8
   \   000216   E9           MOV       A,R1
   \   000217   A2..         MOV       C,?VB.0
   \   000219   4003         JC        $+5
   \   00021B   02....       LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
   \   00021E   7003         JNZ       $+5
   \   000220   02....       LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
   \   000223   85..82       MOV       DPL,?V12
   \   000226   85..83       MOV       DPH,?V13
   \   000229   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_10:
   \   00022C   A2..         MOV       C,?VB.0
   \   00022E   4003         JC        $+5
   \   000230   02....       LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
   \   000233   85..82       MOV       DPL,?V12
   \   000236   85..83       MOV       DPH,?V13
   \   000239   748D         MOV       A,#-0x73
   \   00023B   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   4594          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00000A   85..82       MOV       DPL,?V8
   \   00000D   85..83       MOV       DPH,?V9
   \   000010   E8           MOV       A,R0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E9           MOV       A,R1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   0E           INC       R6
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E5..         MOV       A,?V6
   \   000002   2406         ADD       A,#0x6
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V7
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine138_0
   \   000006                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   75F003       MOV       B,#0x3
   \   000004   A4           MUL       AB
   \   000005   A9F0         MOV       R1,B
   \   000007   2401         ADD       A,#0x1
   \   000009   FA           MOV       R2,A
   \   00000A   E4           CLR       A
   \   00000B   39           ADDC      A,R1
   \   00000C   FB           MOV       R3,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000007   EE           MOV       A,R6
   \   000008   2406         ADD       A,#0x6
   \   00000A   FA           MOV       R2,A
   \   00000B   E4           CLR       A
   \   00000C   3F           ADDC      A,R7
   \   00000D   FB           MOV       R3,A
   \   00000E   EE           MOV       A,R6
   \   00000F   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000012   3F           ADDC      A,R7
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   12....       LCALL     ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   85..82       MOV       DPL,?V6
   \   000006   85..83       MOV       DPH,?V7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000010   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E5..         MOV       A,?V6
   \   000002   2414         ADD       A,#0x14
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET
   4595          
   4596          /*********************************************************************
   4597           * @fn      zclRevertWriteUndividedCmd
   4598           *
   4599           * @brief   Revert the "Profile" Write Undevided Command
   4600           *
   4601           * @param   pInMsg - incoming message to process
   4602           * @param   curWriteRec - old data
   4603           * @param   numAttr - number of attributes to be reverted
   4604           *
   4605           * @return  none
   4606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4607          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4608                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V10,R4
   \   000010   8D..         MOV       ?V11,R5
   4610            uint8 i;
   4611          
   4612            for ( i = 0; i < numAttr; i++ )
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   741C         MOV       A,#0x1c
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00001D   8031         SJMP      ??zclRevertWriteUndividedCmd_0
   4613            {
   4614              zclAttrRec_t attrRec;
   4615              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4616          
   4617              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4618                                    statusRec->attrID, &attrRec ) )
   4619              {
   4620                break; // should never happen
   4621              }
   4622          
   4623              if ( attrRec.attr.dataPtr != NULL )
   4624              {
   4625                // Just copy the old data back - no need to validate the data
   4626                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4627                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4628              }
   4629              else // Use CB
   4630              {
   4631                // Write the old data back
   4632                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4633                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   4634              }
   \                     ??CrossCallReturnLabel_284:
   \   000028                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000028   8A..         MOV       ?V4,R2
   \   00002A   8B..         MOV       ?V5,R3
   \   00002C   78..         MOV       R0,#?V4
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   EE           MOV       A,R6
   \   000037   2406         ADD       A,#0x6
   \   000039   FA           MOV       R2,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   FB           MOV       R3,A
   \   00003D   EE           MOV       A,R6
   \   00003E   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000041   3F           ADDC      A,R7
   \   000042   F583         MOV       DPH,A
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   00004E   05..         INC       ?V0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   000050   C3           CLR       C
   \   000051   E5..         MOV       A,?V0
   \   000053   95..         SUBB      A,?V8
   \   000055   E4           CLR       A
   \   000056   95..         SUBB      A,?V9
   \   000058   4003         JC        $+5
   \   00005A   02....       LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
   \   00005D   E5..         MOV       A,?V0
   \   00005F   75F005       MOV       B,#0x5
   \   000062   A4           MUL       AB
   \   000063   F8           MOV       R0,A
   \   000064   A9F0         MOV       R1,B
   \   000066   E5..         MOV       A,?V10
   \   000068   28           ADD       A,R0
   \   000069   FE           MOV       R6,A
   \   00006A   E5..         MOV       A,?V11
   \   00006C   39           ADDC      A,R1
   \   00006D   FF           MOV       R7,A
   \   00006E   85..82       MOV       DPL,?V2
   \   000071   85..83       MOV       DPH,?V3
   \   000074   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000077   88..         MOV       ?V4,R0
   \   000079   89..         MOV       ?V5,R1
   \   00007B                ; Setup parameters for call to function zclFindAttrRec
   \   00007B   A8..         MOV       R0,?XSP + 0
   \   00007D   A9..         MOV       R1,?XSP + 1
   \   00007F   88..         MOV       ?V6,R0
   \   000081   89..         MOV       ?V7,R1
   \   000083   78..         MOV       R0,#?V6
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00008F   85..82       MOV       DPL,?V4
   \   000092   85..83       MOV       DPH,?V5
   \   000095   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000098   E5..         MOV       A,?V4
   \   00009A   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00009D   35..         ADDC      A,?V5
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F9           MOV       R1,A
   \   0000A3   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV       A,R1
   \   0000AC   604D         JZ        ??zclRevertWriteUndividedCmd_3
   \   0000AE   EE           MOV       A,R6
   \   0000AF   2403         ADD       A,#0x3
   \   0000B1   F5..         MOV       ?V4,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   F5..         MOV       ?V5,A
   \   0000B7   85..82       MOV       DPL,?V4
   \   0000BA   F583         MOV       DPH,A
   \   0000BC   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0000BF   7406         MOV       A,#0x6
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   0000C7   EE           MOV       A,R6
   \   0000C8   4F           ORL       A,R7
   \   0000C9   7003         JNZ       $+5
   \   0000CB   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000CE                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000CE   7404         MOV       A,#0x4
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F9           MOV       R1,A
   \   0000D5   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000D8   8A..         MOV       ?V6,R2
   \   0000DA   8B..         MOV       ?V7,R3
   \   0000DC   AC..         MOV       R4,?V6
   \   0000DE   AD..         MOV       R5,?V7
   \   0000E0                ; Setup parameters for call to function osal_memcpy
   \   0000E0   85..82       MOV       DPL,?V4
   \   0000E3   85..83       MOV       DPH,?V5
   \   0000E6   12....       LCALL     ?Subroutine35 & 0xFFFF
   4635            } // for loop
   \                     ??CrossCallReturnLabel_37:
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EC   EE           MOV       A,R6
   \   0000ED   FA           MOV       R2,A
   \   0000EE   EF           MOV       A,R7
   \   0000EF   FB           MOV       R3,A
   \   0000F0   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4636          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000FB   7408         MOV       A,#0x8
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
   \   000100   02....       LJMP      ??Subroutine113_0 & 0xFFFF
   4637          
   4638          /*********************************************************************
   4639           * @fn      zclProcessInWriteUndividedCmd
   4640           *
   4641           * @brief   Process the "Profile" Write Undivided Command
   4642           *
   4643           * @param   pInMsg - incoming message to process
   4644           *
   4645           * @return  TRUE if command processed. FALSE, otherwise.
   4646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4647          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4648          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   4649            zclWriteCmd_t *writeCmd;
   4650            zclWriteRspCmd_t *writeRspCmd;
   4651            zclAttrRec_t attrRec;
   4652            uint16 dataLen;
   4653            uint16 curLen = 0;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   4654            uint8 j = 0;
   \   000014   7E00         MOV       R6,#0x0
   4655            uint8 i;
   4656          
   4657            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000016   EA           MOV       A,R2
   \   000017   240C         ADD       A,#0xc
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V5
   \   00001E   F583         MOV       DPH,A
   \   000020   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   4658          
   4659            // Allocate space for Write Response Command
   4660            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4661                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_204:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000033   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V0,R2
   \   00003B   8B..         MOV       ?V1,R3
   4662            if ( writeRspCmd == NULL )
   \   00003D   EA           MOV       A,R2
   \   00003E   45..         ORL       A,?V1
   \   000040   7003         JNZ       $+5
   \   000042   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4663            {
   4664              return FALSE; // EMBEDDED RETURN
   4665            }
   4666          
   4667            // If any attribute cannot be written, no attribute values are changed. Hence,
   4668            // make sure all the attributes are supported and writable
   4669            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000045   7F00         MOV       R7,#0x0
   \   000047   803C         SJMP      ??zclProcessInWriteUndividedCmd_1
   4670            {
   4671              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4672          
   4673              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4674                                    statusRec->attrID, &attrRec ) )
   4675              {
   4676                // Attribute is not supported - stop here
   4677                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4678                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4679                break;
   4680              }
   4681          
   4682              if ( statusRec->dataType != attrRec.attr.dataType )
   4683              {
   4684                // Attribute data type is incorrect - stope here
   4685                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4686                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4687                break;
   4688              }
   4689          
   4690              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4691              {
   4692                // Attribute is not writable - stop here
   4693                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4694                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4695                break;
   4696              }
   4697          
   4698              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4699              {
   4700                // Not authorized to write - stop here
   4701                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4702                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4703                break;
   4704              }
   4705          
   4706              // Attribute Data length
   4707              if ( attrRec.attr.dataPtr != NULL )
   4708              {
   4709                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4710              }
   4711              else // Use CB
   4712              {
   4713                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4714                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000049   12....       LCALL     ?Subroutine51 & 0xFFFF
   4715              }
   \                     ??CrossCallReturnLabel_73:
   \   00004C   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00004F   8882         MOV       DPL,R0
   \   000051   8983         MOV       DPH,R1
   \   000053   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000056   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000059   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   4716          
   4717              // add padding if needed
   4718              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_349:
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006E   5003         JNC       ??CrossCallReturnLabel_152
   4719              {
   4720                dataLen++;
   \   000070   12....       LCALL     ?Subroutine90 & 0xFFFF
   4721              }
   4722          
   4723              curLen += dataLen;
   \                     ??CrossCallReturnLabel_152:
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   25..         ADD       A,?V8
   \   00007C   F5..         MOV       ?V8,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   35..         ADDC      A,?V9
   \   000082   F5..         MOV       ?V9,A
   \   000084   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00008D   5048         JNC       ??zclProcessInWriteUndividedCmd_4
   \   00008F   EF           MOV       A,R7
   \   000090   75F005       MOV       B,#0x5
   \   000093   A4           MUL       AB
   \   000094   F8           MOV       R0,A
   \   000095   A9F0         MOV       R1,B
   \   000097   7402         MOV       A,#0x2
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00009F   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000A2   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A5   88..         MOV       ?V10,R0
   \   0000A7   89..         MOV       ?V11,R1
   \   0000A9   78..         MOV       R0,#?V10
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   0000B1   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000B4   7402         MOV       A,#0x2
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV       A,R1
   \   0000BA   704C         JNZ       ??zclProcessInWriteUndividedCmd_5
   \   0000BC   85..82       MOV       DPL,?V0
   \   0000BF   85..83       MOV       DPH,?V1
   \   0000C2   A3           INC       DPTR
   \   0000C3   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000C5   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000C8   F8           MOV       R0,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F9           MOV       R1,A
   \   0000CC   85..82       MOV       DPL,?V0
   \   0000CF   85..83       MOV       DPH,?V1
   \   0000D2   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0000D5   7E01         MOV       R6,#0x1
   4724            } // for loop
   4725          
   4726            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000D7   EE           MOV       A,R6
   \   0000D8   85..82       MOV       DPL,?V0
   \   0000DB   85..83       MOV       DPH,?V1
   \   0000DE   F0           MOVX      @DPTR,A
   4727            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000DF   6003         JZ        $+5
   \   0000E1   02....       LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
   4728            {
   4729              uint8 *curDataPtr;
   4730              zclWriteRec_t *curWriteRec;
   4731          
   4732              // calculate the length of the current data header
   4733              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   0000E4   75F005       MOV       B,#0x5
   \   0000E7   A4           MUL       AB
   \   0000E8   FF           MOV       R7,A
   4734          
   4735              // Allocate space to keep a copy of the current data
   4736              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   0000E9                ; Setup parameters for call to function osal_mem_alloc
   \   0000E9   25..         ADD       A,?V8
   \   0000EB   FA           MOV       R2,A
   \   0000EC   E4           CLR       A
   \   0000ED   35..         ADDC      A,?V9
   \   0000EF   FB           MOV       R3,A
   \   0000F0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000F3   8A..         MOV       ?V14,R2
   \   0000F5   8B..         MOV       ?V15,R3
   4737              if ( curWriteRec == NULL )
   \   0000F7   EA           MOV       A,R2
   \   0000F8   45..         ORL       A,?V15
   \   0000FA   705C         JNZ       ??zclProcessInWriteUndividedCmd_8
   4738              {
   4739                zcl_mem_free(writeRspCmd );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   AA..         MOV       R2,?V0
   \   0000FE   AB..         MOV       R3,?V1
   \   000100   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4740                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000103   7900         MOV       R1,#0x0
   \   000105   02....       LJMP      ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
   4741              }
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000108   7408         MOV       A,#0x8
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   69           XRL       A,R1
   \   000114   600B         JZ        ??zclProcessInWriteUndividedCmd_10
   \   000116   85..82       MOV       DPL,?V0
   \   000119   85..83       MOV       DPH,?V1
   \   00011C   A3           INC       DPTR
   \   00011D   748D         MOV       A,#-0x73
   \   00011F   80A4         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   000121   7409         MOV       A,#0x9
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   E0           MOVX      A,@DPTR
   \   000127   A2E1         MOV       C,0xE0 /* A   */.1
   \   000129   400B         JC        ??zclProcessInWriteUndividedCmd_11
   \   00012B   85..82       MOV       DPL,?V0
   \   00012E   85..83       MOV       DPH,?V1
   \   000131   A3           INC       DPTR
   \   000132   7488         MOV       A,#-0x78
   \   000134   808F         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000136   A2E5         MOV       C,0xE0 /* A   */.5
   \   000138   500B         JNC       ??zclProcessInWriteUndividedCmd_12
   \   00013A   85..82       MOV       DPL,?V0
   \   00013D   85..83       MOV       DPH,?V1
   \   000140   A3           INC       DPTR
   \   000141   747E         MOV       A,#0x7e
   \   000143   8080         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   000145   740A         MOV       A,#0xa
   \   000147   12....       LCALL     ?XSTACK_DISP0_8
   \   00014A   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00014D   7003         JNZ       $+5
   \   00014F   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   000152                ; Setup parameters for call to function zclGetAttrDataLength
   \   000152   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000155   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4742          
   4743              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000158   EA           MOV       A,R2
   \   000159   2F           ADD       A,R7
   \   00015A   F5..         MOV       ?V8,A
   \   00015C   E4           CLR       A
   \   00015D   3B           ADDC      A,R3
   \   00015E   F5..         MOV       ?V9,A
   4744          
   4745              // Write the new data over
   4746              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000160   7F00         MOV       R7,#0x0
   \   000162   801C         SJMP      ??zclProcessInWriteUndividedCmd_13
   4747              {
   4748                uint8 status;
   4749                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4750                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4751          
   4752                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4753                                      statusRec->attrID, &attrRec ) )
   4754                {
   4755                  break; // should never happen
   4756                }
   4757          
   4758                // Keep a copy of the current data before before writing the new data over
   4759                curStatusRec->attrID = statusRec->attrID;
   4760                curStatusRec->attrData = curDataPtr;
   4761          
   4762                if ( attrRec.attr.dataPtr != NULL )
   4763                {
   4764                  // Read the current value
   4765                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4766          
   4767                  // Write the new attribute value
   4768                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4769                                             &attrRec, statusRec );
   4770                }
   4771                else // Use CBs
   4772                {
   4773                  // Read the current value
   4774                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4775                                          statusRec->attrID, curDataPtr, &dataLen );
   4776                  // Write the new attribute value
   4777                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4778                                                    &attrRec, statusRec->attrData );
   4779                }
   4780          
   4781                // If successful, a write attribute status record shall NOT be generated
   4782                if ( status != ZCL_STATUS_SUCCESS )
   4783                {
   4784                  writeRspCmd->attrList[j].status = status;
   4785                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4786          
   4787                  // Since this write failed, we need to revert all the pervious writes
   4788                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4789                  break;
   4790                }
   4791          
   4792                // add padding if needed
   4793                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000164   85..82       MOV       DPL,?XSP + 0
   \   000167   85..83       MOV       DPH,?XSP + 1
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00016D   5003         JNC       ??CrossCallReturnLabel_153
   4794                {
   4795                  dataLen++;
   \   00016F   12....       LCALL     ?Subroutine90 & 0xFFFF
   4796                }
   4797          
   4798                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_153:
   \   000172   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000175   E5..         MOV       A,?V8
   \   000177   28           ADD       A,R0
   \   000178   F5..         MOV       ?V8,A
   \   00017A   E5..         MOV       A,?V9
   \   00017C   39           ADDC      A,R1
   \   00017D   F5..         MOV       ?V9,A
   \   00017F   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   000180   7402         MOV       A,#0x2
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000188   4003         JC        $+5
   \   00018A   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   00018D   EF           MOV       A,R7
   \   00018E   75F005       MOV       B,#0x5
   \   000191   A4           MUL       AB
   \   000192   F8           MOV       R0,A
   \   000193   A9F0         MOV       R1,B
   \   000195   7402         MOV       A,#0x2
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00019D   E5..         MOV       A,?V14
   \   00019F   28           ADD       A,R0
   \   0001A0   F5..         MOV       ?V12,A
   \   0001A2   E5..         MOV       A,?V15
   \   0001A4   39           ADDC      A,R1
   \   0001A5   F5..         MOV       ?V13,A
   \   0001A7   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001AA   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AD   88..         MOV       ?V10,R0
   \   0001AF   89..         MOV       ?V11,R1
   \   0001B1   78..         MOV       R0,#?V10
   \   0001B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B6   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0001B9   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C1   E9           MOV       A,R1
   \   0001C2   7003         JNZ       $+5
   \   0001C4   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0001C7   85..82       MOV       DPL,?V2
   \   0001CA   85..83       MOV       DPH,?V3
   \   0001CD   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0001D0   85..82       MOV       DPL,?V12
   \   0001D3   85..83       MOV       DPH,?V13
   \   0001D6   E8           MOV       A,R0
   \   0001D7   F0           MOVX      @DPTR,A
   \   0001D8   A3           INC       DPTR
   \   0001D9   E9           MOV       A,R1
   \   0001DA   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001DD   E5..         MOV       A,?V8
   \   0001DF   F0           MOVX      @DPTR,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   E5..         MOV       A,?V9
   \   0001E3   F0           MOVX      @DPTR,A
   \   0001E4   740A         MOV       A,#0xa
   \   0001E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E9   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   0001EC   6039         JZ        ??zclProcessInWriteUndividedCmd_16
   \   0001EE                ; Setup parameters for call to function zclReadAttrData
   \   0001EE   A8..         MOV       R0,?XSP + 0
   \   0001F0   A9..         MOV       R1,?XSP + 1
   \   0001F2   88..         MOV       ?V6,R0
   \   0001F4   89..         MOV       ?V7,R1
   \   0001F6   78..         MOV       R0,#?V6
   \   0001F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FB   7406         MOV       A,#0x6
   \   0001FD   12....       LCALL     ?XSTACK_DISP102_8
   \   000200   AA..         MOV       R2,?V8
   \   000202   AB..         MOV       R3,?V9
   \   000204   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000207   7402         MOV       A,#0x2
   \   000209   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020C   85..82       MOV       DPL,?V4
   \   00020F   85..83       MOV       DPH,?V5
   \   000212   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000215                ; Setup parameters for call to function zclWriteAttrData
   \   000215   78..         MOV       R0,#?V2
   \   000217   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021A   7406         MOV       A,#0x6
   \   00021C   12....       LCALL     ?XSTACK_DISP102_8
   \   00021F   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000222   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   000225   8041         SJMP      ??zclProcessInWriteUndividedCmd_17
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000227   85..82       MOV       DPL,?V4
   \   00022A   85..83       MOV       DPH,?V5
   \   00022D   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000230                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000230   A8..         MOV       R0,?XSP + 0
   \   000232   A9..         MOV       R1,?XSP + 1
   \   000234   88..         MOV       ?V10,R0
   \   000236   89..         MOV       ?V11,R1
   \   000238   78..         MOV       R0,#?V10
   \   00023A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00023D   78..         MOV       R0,#?V8
   \   00023F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000242   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000245   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000248   7404         MOV       A,#0x4
   \   00024A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00024D   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000256   7406         MOV       A,#0x6
   \   000258   12....       LCALL     ?XSTACK_DISP102_8
   \   00025B   E8           MOV       A,R0
   \   00025C   2406         ADD       A,#0x6
   \   00025E   FA           MOV       R2,A
   \   00025F   E4           CLR       A
   \   000260   39           ADDC      A,R1
   \   000261   FB           MOV       R3,A
   \   000262   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000265   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000268   7402         MOV       A,#0x2
   \   00026A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00026D   E9           MOV       A,R1
   \   00026E   FA           MOV       R2,A
   \   00026F   EA           MOV       A,R2
   \   000270   7003         JNZ       $+5
   \   000272   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   000275   EE           MOV       A,R6
   \   000276   75F003       MOV       B,#0x3
   \   000279   A4           MUL       AB
   \   00027A   F8           MOV       R0,A
   \   00027B   A9F0         MOV       R1,B
   \   00027D   E5..         MOV       A,?V0
   \   00027F   28           ADD       A,R0
   \   000280   F8           MOV       R0,A
   \   000281   E5..         MOV       A,?V1
   \   000283   39           ADDC      A,R1
   \   000284   F9           MOV       R1,A
   \   000285   EA           MOV       A,R2
   \   000286   8882         MOV       DPL,R0
   \   000288   8983         MOV       DPH,R1
   \   00028A   A3           INC       DPTR
   \   00028B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00028E   FA           MOV       R2,A
   \   00028F   A3           INC       DPTR
   \   000290   E0           MOVX      A,@DPTR
   \   000291   FB           MOV       R3,A
   \   000292   8882         MOV       DPL,R0
   \   000294   8983         MOV       DPH,R1
   \   000296   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000299   0E           INC       R6
   \   00029A                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   00029A   EF           MOV       A,R7
   \   00029B   F5..         MOV       ?V2,A
   \   00029D   75..00       MOV       ?V3,#0x0
   \   0002A0   78..         MOV       R0,#?V2
   \   0002A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A5   AC..         MOV       R4,?V14
   \   0002A7   AD..         MOV       R5,?V15
   \   0002A9   AA..         MOV       R2,?V4
   \   0002AB   AB..         MOV       R3,?V5
   \   0002AD   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   0002B0   7402         MOV       A,#0x2
   \   0002B2   12....       LCALL     ?DEALLOC_XSTACK8
   4799              } // for loop
   4800          
   4801              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0002B5   EE           MOV       A,R6
   \   0002B6   85..82       MOV       DPL,?V0
   \   0002B9   85..83       MOV       DPH,?V1
   \   0002BC   F0           MOVX      @DPTR,A
   4802              if ( writeRspCmd->numAttr  == 0 )
   \   0002BD   7007         JNZ       ??zclProcessInWriteUndividedCmd_18
   4803              {
   4804                // Since all records were written successful, include a single status record
   4805                // in the resonse command with the status field set to SUCCESS and the
   4806                // attribute ID field omitted.
   4807                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0002BF   A3           INC       DPTR
   \   0002C0   E4           CLR       A
   \   0002C1   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   4808                writeRspCmd->numAttr = 1;
   4809              }
   \                     ??CrossCallReturnLabel_209:
   \   0002C4   04           INC       A
   \   0002C5   F0           MOVX      @DPTR,A
   4810          
   4811              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0002C6                ; Setup parameters for call to function osal_mem_free
   \   0002C6   AA..         MOV       R2,?V14
   \   0002C8   AB..         MOV       R3,?V15
   \   0002CA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4812            }
   4813          
   4814            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4815                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4816                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0002CD   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0002D0                ; Setup parameters for call to function zcl_SendWriteRsp
   \   0002D0   85..82       MOV       DPL,?V4
   \   0002D3   85..83       MOV       DPH,?V5
   \   0002D6   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0002D9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002DC   75..01       MOV       ?V2,#0x1
   \   0002DF   78..         MOV       R0,#?V2
   \   0002E1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002E4   85..82       MOV       DPL,?V4
   \   0002E7   85..83       MOV       DPH,?V5
   \   0002EA   A3           INC       DPTR
   \   0002EB   A3           INC       DPTR
   \   0002EC   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0002EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002F2   78..         MOV       R0,#?V0
   \   0002F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F7   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0002FA   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   0002FD   7405         MOV       A,#0x5
   \   0002FF   12....       LCALL     ?DEALLOC_XSTACK8
   4817            zcl_mem_free( writeRspCmd );
   \   000302                ; Setup parameters for call to function osal_mem_free
   \   000302   AA..         MOV       R2,?V0
   \   000304   AB..         MOV       R3,?V1
   \   000306   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4818          
   4819            return TRUE;
   \   000309   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   00030B   740C         MOV       A,#0xc
   \   00030D   02....       LJMP      ?Subroutine5 & 0xFFFF
   4820          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   2401         ADD       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V7,A
   \   00000D                ; Setup parameters for call to function zclFindAttrRec
   \   00000D                ; Setup parameters for call to function zclFindAttrRec
   \   00000D   7404         MOV       A,#0x4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   EF           MOV       A,R7
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   8582..       MOV       ?V2,DPL
   \   00000E   8583..       MOV       ?V3,DPH
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine140_0
   \   000006                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsgExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsgExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_addExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_addExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_HandleExternal::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_HandleExternal

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getRawAFMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getParsedTransSeqNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getParsedTransSeqNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerPlugin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerAttrList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerClusterOptionList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerValidateAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_DeviceOperational::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReadRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ProcessMessageMSG::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclBuildHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAuthorizeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAuthorizeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSetSecurityOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSerializeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetDataTypeLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLengthUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLengthUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclAuthorizeWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAuthorizeWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclRevertWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRevertWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd
   4821          #endif // ZCL_WRITE
   4822          
   4823          #ifdef ZCL_DISCOVER
   4824          /*********************************************************************
   4825           * @fn      zclProcessInDiscAttrs
   4826           *
   4827           * @brief   Process the "Profile" Discover Attributes Commands
   4828           *
   4829           * @param   pInMsg - incoming message to process
   4830           *
   4831           * @return  TRUE if command processed. FALSE, otherwise.
   4832           */
   4833          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   4834          {
   4835            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4836            zclAttrRec_t attrRec;
   4837            uint16 attrID;
   4838            uint8 numAttrs;
   4839            uint8 i;
   4840          
   4841            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   4842          
   4843            // Find out the number of attributes supported within the specified range
   4844            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   4845            {
   4846              // finds the next attribute on this endpoint/cluster after the range.
   4847              // attributes must be in numerical order in the list.
   4848              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4849              {
   4850                break;
   4851              }
   4852            }
   4853          
   4854            numAttrs = i;  // store range of attributes in buffer
   4855          
   4856              // Process message for either attributes or extended attributes
   4857            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   4858            {
   4859              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   4860            }
   4861            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   4862            {
   4863              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   4864            }
   4865          
   4866            return TRUE;
   4867          }
   4868          
   4869          /*********************************************************************
   4870           * @fn      zclProcessInDiscAttrsCmd
   4871           *
   4872           * @brief   Process the Discover Attributes Command
   4873           *
   4874           * @param   pInMsg - incoming message to process
   4875           *
   4876           * @param   pDiscoverCmd - structure from requesting command
   4877           *
   4878           * @param   attrLenBuf - describes the amount of attributes to be processed
   4879           *
   4880           * @return  none
   4881           */
   4882          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   4883          {
   4884            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4885            uint8 discComplete = TRUE;
   4886            zclAttrRec_t attrRec;
   4887            uint16 attrID;
   4888            uint8 i;
   4889          
   4890            // Allocate space for the response command
   4891            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4892                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   4893            if ( pDiscoverRsp == NULL )
   4894            {
   4895              return; // EMBEDDED RETURN
   4896            }
   4897          
   4898            if ( numAttrs != 0 )
   4899            {
   4900              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   4901              {
   4902                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4903                {
   4904                  break; // should not happen, as numAttrs already calculated
   4905                }
   4906          
   4907                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   4908                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   4909              }
   4910          
   4911              // Are there more attributes to be discovered?
   4912              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4913              {
   4914                discComplete = FALSE;
   4915              }
   4916            }
   4917          
   4918            pDiscoverRsp->discComplete = discComplete;
   4919            pDiscoverRsp->numAttr = numAttrs;
   4920          
   4921            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4922                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4923                                         true, pInMsg->hdr.transSeqNum );
   4924            zcl_mem_free( pDiscoverRsp );
   4925          
   4926            return;
   4927          }
   4928          
   4929          /*********************************************************************
   4930           * @fn      zclProcessInDiscAttrsExtCmd
   4931           *
   4932           * @brief   Process the Discover Attributes Extended Command
   4933           *
   4934           * @param   pInMsg - incoming message to process
   4935           *
   4936           * @param   pDiscoverCmd - structure from requesting command
   4937           *
   4938           * @param   attrLenBuf - describes the amount of attributes to be processed
   4939           *
   4940           * @return  none
   4941           */
   4942          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   4943          {
   4944            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4945            uint8 discComplete = TRUE;
   4946            zclAttrRec_t attrRec;
   4947            uint16 attrID;
   4948            uint8 i;
   4949          
   4950              // Allocate space for the response command
   4951            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   4952                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   4953            if ( pDiscoverExtRsp == NULL )
   4954            {
   4955              return; // EMBEDDED RETURN
   4956            }
   4957          
   4958          
   4959            if ( numAttrs != 0 )
   4960            {
   4961              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   4962              {
   4963                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4964                {
   4965                  break; // Should not happen, as numAttrs already calculated
   4966                }
   4967          
   4968                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   4969                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   4970                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   4971              }
   4972          
   4973              // Are there more attributes to be discovered?
   4974              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4975              {
   4976                discComplete = FALSE;
   4977              }
   4978            }
   4979          
   4980            pDiscoverExtRsp->discComplete = discComplete;
   4981            pDiscoverExtRsp->numAttr = numAttrs;
   4982          
   4983            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4984                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   4985                                         true, pInMsg->hdr.transSeqNum );
   4986          
   4987            zcl_mem_free( pDiscoverExtRsp );
   4988          
   4989            return;
   4990          }
   4991          
   4992          /*********************************************************************
   4993           * @fn      zclProcessInDiscCmd
   4994           *
   4995           * @brief   Process the "Profile" Discover Command
   4996           *
   4997           * @param   pInMsg - incoming message to process
   4998           *
   4999           * @return  TRUE if command processed. FALSE, otherwise.
   5000           */
   5001          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   5002          {
   5003            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5004            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5005            ZStatus_t status;
   5006            zclCommandRec_t cmdRec;
   5007            uint8 cmdID;
   5008            uint8 i;
   5009            uint8 j;
   5010          
   5011            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   5012          
   5013            // Find out the number of commands supported within the specified range
   5014            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   5015            {
   5016              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   5017              {
   5018                break;  // Command not supported
   5019              }
   5020            }
   5021          
   5022            // Allocate space for the response command
   5023            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   5024          
   5025            if ( cmdRsp.pCmdID == NULL )
   5026            {
   5027              return FALSE; // EMBEDDED RETURN
   5028            }
   5029          
   5030            if ( i != 0 )
   5031            {
   5032              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   5033              {
   5034                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   5035                {
   5036                  break; // Attribute not supported
   5037                }
   5038          
   5039                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   5040              }
   5041            }
   5042          
   5043            // Are there more commands to be discovered?
   5044            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   5045            {
   5046              cmdRsp.discComplete = FALSE;
   5047            }
   5048            else
   5049            {
   5050              cmdRsp.discComplete = TRUE;
   5051            }
   5052          
   5053            // pass the command requested
   5054            cmdRsp.cmdType = pInMsg->hdr.commandID;
   5055          
   5056            // store number of commands returned
   5057            cmdRsp.numCmd = j;
   5058          
   5059            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5060                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5061                                                true, pInMsg->hdr.transSeqNum );
   5062          
   5063            zcl_mem_free( cmdRsp.pCmdID );
   5064          
   5065            if ( status == ZSuccess )
   5066            {
   5067              return TRUE;
   5068            }
   5069            else
   5070            {
   5071              return FALSE;
   5072            }
   5073          }
   5074          
   5075          #endif // ZCL_DISCOVER
   5076          
   5077          
   5078          /*********************************************************************
   5079          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     39   zclBuildHdr
      2     54   zclFindAttrRec
        0     16   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     42   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     46   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0      9   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      1     48   zclParseHdr
        0     12   -> osal_memset
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      1     37   zclProcessInReadCmd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     34   -> zclFindAttrRec
        0     32   -> zclGetAuthorizeCB
        0     37   -> zcl_SendReadRsp
      1     39   zclProcessInWriteCmd
        0     34   -> bdb_ZclIdentifyCmdInd
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     36   -> zclFindAttrRec
        0     36   -> zclWriteAttrData
        0     36   -> zclWriteAttrDataUsingCB
        0     39   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     56   zclReadAttrData
        0     18   -> osal_memcpy
        0     15   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     69   zclRevertWriteUndividedCmd
        0     31   -> osal_memcpy
        0     30   -> zclFindAttrRec
        0     28   -> zclGetAttrDataLength
        0     30   -> zclWriteAttrDataUsingCB
      1     43   zclSerializeData
        0     19   -> osal_buffer_uint32
        0     18   -> osal_memcpy
      0     46   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      0     61   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     61   zcl_ProcessMessageMSG
        0     36   -> afFindEndPointDesc
        0     36   -> osal_mem_free
        0     36   -> zclGetClusterOption
        0     36   -> zclParseHdr
        0     36   -> zclSetSecurityOption
        0     38   -> zcl_DeviceOperational
        0     43   -> zcl_SendDefaultRspCmd
      0     32   zcl_ReadAttrData
        0     26   -> zclFindAttrRec
        0     26   -> zclReadAttrData
        0     28   -> zclReadAttrDataUsingCB
      1     74   zcl_SendCommand
        0     39   -> AF_DataRequest
        0     30   -> afFindEndPointDesc
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     30   -> osal_memset
        0     30   -> zclBuildHdr
        0     30   -> zclGetClusterOption
        0     32   -> zcl_DeviceOperational
      1     66   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     36   zcl_SendRead
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     72   zcl_SendReadRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> zclGetAttrDataLength
        0     24   -> zclGetAttrDataLengthUsingCB
        0     28   -> zclReadAttrDataUsingCB
        0     24   -> zclSerializeData
        0     35   -> zcl_SendCommand
      1     39   zcl_SendWriteRequest
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     72   zcl_SendWriteRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0     29   zcl_event_loop
        0     18   -> bdb_getZCLFrameCounter
        0     18   -> gp_GetHeadNotificationMsg
        0     18   -> gp_GetPHeadNotification
        0     18   -> gp_NotificationMsgClean
        0     21   -> osal_memcpy
        0     18   -> osal_msg_deallocate
        0     18   -> osal_msg_receive
        0     18   -> osal_msg_send
        0     21   -> osal_revmemcpy
        0     22   -> osal_start_timerEx
        0     18   -> zcl_ProcessMessageMSG
        0     29   -> zcl_SendCommand
        0     18   -> zcl_getExternalFoundationHandler
      2     18   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine113_0
       6  ??Subroutine114_0
       5  ??Subroutine115_0
       8  ??Subroutine116_0
       1  ??Subroutine117_0
       5  ??Subroutine118_0
       8  ??Subroutine119_0
       5  ??Subroutine120_0
       5  ??Subroutine121_0
       5  ??Subroutine122_0
       1  ??Subroutine123_0
       6  ??Subroutine124_0
       5  ??Subroutine125_0
       6  ??Subroutine126_0
       8  ??Subroutine127_0
       7  ??Subroutine128_0
       6  ??Subroutine129_0
       1  ??Subroutine130_0
       3  ??Subroutine131_0
       4  ??Subroutine132_0
       6  ??Subroutine133_0
       8  ??Subroutine134_0
       4  ??Subroutine135_0
       2  ??Subroutine136_0
       4  ??Subroutine137_0
       8  ??Subroutine138_0
       9  ??Subroutine139_0
      20  ??Subroutine140_0
       6  ??Subroutine141_0
       6  ??Subroutine142_0
       7  ?Subroutine0
       3  ?Subroutine1
      23  ?Subroutine10
       8  ?Subroutine100
      11  ?Subroutine101
       9  ?Subroutine102
       5  ?Subroutine103
       4  ?Subroutine104
       9  ?Subroutine105
       9  ?Subroutine106
      14  ?Subroutine107
       6  ?Subroutine108
       6  ?Subroutine109
      17  ?Subroutine11
       6  ?Subroutine110
       5  ?Subroutine111
       7  ?Subroutine112
       1  ?Subroutine12
      12  ?Subroutine13
      11  ?Subroutine14
       6  ?Subroutine15
       3  ?Subroutine16
       3  ?Subroutine17
       4  ?Subroutine18
       6  ?Subroutine19
       5  ?Subroutine2
       8  ?Subroutine20
       7  ?Subroutine21
       5  ?Subroutine22
       2  ?Subroutine23
       4  ?Subroutine24
       8  ?Subroutine25
       2  ?Subroutine26
       9  ?Subroutine27
       6  ?Subroutine28
       4  ?Subroutine29
       5  ?Subroutine3
       5  ?Subroutine30
       4  ?Subroutine31
      18  ?Subroutine32
      24  ?Subroutine33
      12  ?Subroutine34
       9  ?Subroutine35
       9  ?Subroutine36
      10  ?Subroutine37
       7  ?Subroutine38
       6  ?Subroutine39
       5  ?Subroutine4
       6  ?Subroutine40
      18  ?Subroutine41
      14  ?Subroutine42
       8  ?Subroutine43
       9  ?Subroutine44
      10  ?Subroutine45
       6  ?Subroutine46
       6  ?Subroutine47
      14  ?Subroutine48
       6  ?Subroutine49
       8  ?Subroutine5
      13  ?Subroutine50
      10  ?Subroutine51
       8  ?Subroutine52
      10  ?Subroutine53
       1  ?Subroutine54
      10  ?Subroutine55
       2  ?Subroutine56
       4  ?Subroutine57
      12  ?Subroutine58
      11  ?Subroutine59
       2  ?Subroutine6
      14  ?Subroutine60
      11  ?Subroutine61
       8  ?Subroutine62
       4  ?Subroutine63
      11  ?Subroutine64
      11  ?Subroutine65
       4  ?Subroutine66
      15  ?Subroutine67
       6  ?Subroutine68
       7  ?Subroutine69
       4  ?Subroutine7
       6  ?Subroutine70
       5  ?Subroutine71
      21  ?Subroutine72
      16  ?Subroutine73
       6  ?Subroutine74
       4  ?Subroutine75
       9  ?Subroutine76
       4  ?Subroutine77
       9  ?Subroutine78
       9  ?Subroutine79
       5  ?Subroutine8
      12  ?Subroutine80
      12  ?Subroutine81
      13  ?Subroutine82
      10  ?Subroutine83
      12  ?Subroutine84
       4  ?Subroutine85
      22  ?Subroutine86
      12  ?Subroutine87
       9  ?Subroutine88
       9  ?Subroutine89
       3  ?Subroutine9
       9  ?Subroutine90
       6  ?Subroutine91
       6  ?Subroutine92
       5  ?Subroutine93
       4  ?Subroutine94
       9  ?Subroutine95
       3  ?Subroutine96
       6  ?Subroutine97
       4  ?Subroutine98
       8  ?Subroutine99
       4  __Constant_32
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      60  zclAuthorizeWrite
       6  zclAuthorizeWrite::?relay
     101  zclBuildHdr
       6  zclBuildHdr::?relay
      92  zclCmdTable
     149  zclFindAttrRec
       6  zclFindAttrRec::?relay
      37  zclFindAttrRecsList
       6  zclFindAttrRecsList::?relay
     102  zclFindClusterOption
       6  zclFindClusterOption::?relay
      63  zclGetAttrDataLength
       6  zclGetAttrDataLength::?relay
     101  zclGetAttrDataLengthUsingCB
       6  zclGetAttrDataLengthUsingCB::?relay
      27  zclGetAuthorizeCB
       6  zclGetAuthorizeCB::?relay
      29  zclGetClusterOption
       6  zclGetClusterOption::?relay
     166  zclGetDataTypeLength
       6  zclGetDataTypeLength::?relay
      29  zclGetReadWriteCB
       6  zclGetReadWriteCB::?relay
     231  zclParseHdr
       6  zclParseHdr::?relay
      31  zclParseInDefaultRspCmd
       6  zclParseInDefaultRspCmd::?relay
     105  zclParseInReadCmd
       6  zclParseInReadCmd::?relay
     346  zclParseInReadRspCmd
       6  zclParseInReadRspCmd::?relay
     323  zclParseInWriteCmd
       6  zclParseInWriteCmd::?relay
     137  zclParseInWriteRspCmd
       6  zclParseInWriteRspCmd::?relay
     460  zclProcessInReadCmd
       6  zclProcessInReadCmd::?relay
     574  zclProcessInWriteCmd
       6  zclProcessInWriteCmd::?relay
     784  zclProcessInWriteUndividedCmd
       6  zclProcessInWriteUndividedCmd::?relay
     109  zclReadAttrData
       6  zclReadAttrData::?relay
      93  zclReadAttrDataUsingCB
       6  zclReadAttrDataUsingCB::?relay
     259  zclRevertWriteUndividedCmd
       6  zclRevertWriteUndividedCmd::?relay
     365  zclSerializeData
       6  zclSerializeData::?relay
      46  zclSetSecurityOption
       6  zclSetSecurityOption::?relay
     150  zclWriteAttrData
       6  zclWriteAttrData::?relay
     107  zclWriteAttrDataUsingCB
       6  zclWriteAttrDataUsingCB::?relay
     126  zcl_DeviceOperational
       6  zcl_DeviceOperational::?relay
     184  zcl_HandleExternal
       6  zcl_HandleExternal::?relay
       1  zcl_InSeqNum
      12  zcl_Init
       6  zcl_Init::?relay
    1099  zcl_ProcessMessageMSG
       6  zcl_ProcessMessageMSG::?relay
     131  zcl_ReadAttrData
       6  zcl_ReadAttrData::?relay
     414  zcl_SendCommand
       6  zcl_SendCommand::?relay
     136  zcl_SendDefaultRspCmd
       6  zcl_SendDefaultRspCmd::?relay
     196  zcl_SendRead
       6  zcl_SendRead::?relay
     435  zcl_SendReadRsp
       6  zcl_SendReadRsp::?relay
     332  zcl_SendWriteRequest
       6  zcl_SendWriteRequest::?relay
     242  zcl_SendWriteRsp
       6  zcl_SendWriteRsp::?relay
       1  zcl_TaskID
       1  zcl_TransID
       2  zcl_ValidateAttrDataCB
     132  zcl_addExternalFoundationHandler
       6  zcl_addExternalFoundationHandler::?relay
     388  zcl_event_loop
       6  zcl_event_loop::?relay
      60  zcl_getExternalFoundationHandler
       6  zcl_getExternalFoundationHandler::?relay
       9  zcl_getParsedTransSeqNum
       6  zcl_getParsedTransSeqNum::?relay
      12  zcl_getRawAFMsg
       6  zcl_getRawAFMsg::?relay
      90  zcl_registerAttrList
       6  zcl_registerAttrList::?relay
      74  zcl_registerClusterOptionList
       6  zcl_registerClusterOptionList::?relay
      10  zcl_registerForMsg
       6  zcl_registerForMsg::?relay
       8  zcl_registerForMsgExt
       6  zcl_registerForMsgExt::?relay
     102  zcl_registerPlugin
       6  zcl_registerPlugin::?relay
      55  zcl_registerReadWriteCB
       6  zcl_registerReadWriteCB::?relay
      15  zcl_registerValidateAttrData
       6  zcl_registerValidateAttrData::?relay

 
 10 343 bytes in segment BANKED_CODE
    300 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      4 bytes in segment XDATA_ROM_C
     16 bytes in segment XDATA_Z
 
    392 bytes of CODE     memory
      0 bytes of CONST    memory (+ 4 bytes shared)
 10 343 bytes of HUGECODE memory
     16 bytes of XDATA    memory

Errors: none
Warnings: none
