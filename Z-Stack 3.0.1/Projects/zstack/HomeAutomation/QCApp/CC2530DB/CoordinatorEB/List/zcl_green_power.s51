///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              19/Dec/2017  10:07:57
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Components\stack\zcl\zcl_green_power.c
//    Command line       =  
//        -f C:\Users\sam\AppData\Local\Temp\EW762B.tmp
//        ("C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Components\stack\zcl\zcl_green_power.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\target\QC_CC2530\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List\zcl_green_power.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_green_power

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V1
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??gp_AddCmdPayloadMsgNode::?relay`
        FUNCTION `??gp_AddCmdPayloadMsgNode::?relay`,0203H
        PUBLIC `??gp_AddNotificationMsgNode::?relay`
        FUNCTION `??gp_AddNotificationMsgNode::?relay`,0203H
        PUBLIC `??gp_CmdPayloadMsgClean::?relay`
        FUNCTION `??gp_CmdPayloadMsgClean::?relay`,0203H
        PUBLIC `??gp_CreateCmdPayloadMsgList::?relay`
        FUNCTION `??gp_CreateCmdPayloadMsgList::?relay`,0203H
        PUBLIC `??gp_CreateNotificationMsgList::?relay`
        FUNCTION `??gp_CreateNotificationMsgList::?relay`,0203H
        PUBLIC `??gp_GetHeadCmdPayloadMsg::?relay`
        FUNCTION `??gp_GetHeadCmdPayloadMsg::?relay`,0203H
        PUBLIC `??gp_GetHeadNotificationMsg::?relay`
        FUNCTION `??gp_GetHeadNotificationMsg::?relay`,0203H
        PUBLIC `??gp_GetPHeadCmdPayload::?relay`
        FUNCTION `??gp_GetPHeadCmdPayload::?relay`,0203H
        PUBLIC `??gp_GetPHeadNotification::?relay`
        FUNCTION `??gp_GetPHeadNotification::?relay`,0203H
        PUBLIC `??gp_NotificationMsgClean::?relay`
        FUNCTION `??gp_NotificationMsgClean::?relay`,0203H
        PUBLIC `??gp_ResetProxyBasicTblEntry::?relay`
        FUNCTION `??gp_ResetProxyBasicTblEntry::?relay`,0203H
        FUNCTION `??gp_addPairedSinksToMsgQueue::?relay`,0203H
        FUNCTION `??zclGp_HdlIncoming::?relay`,0203H
        FUNCTION `??zclGp_ProcessInProxyBasic::?relay`,0203H
        PUBLIC `??zclGp_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGp_RegisterCmdCallbacks::?relay`,0203H
        PUBLIC `??zclGp_SendGpCommissioningNotificationCommand:`
        FUNCTION `??zclGp_SendGpCommissioningNotificationCommand:`,0203H
        PUBLIC `??zclGp_SendGpNotificationCommand::?relay`
        FUNCTION `??zclGp_SendGpNotificationCommand::?relay`,0203H
        PUBLIC `??zclGp_SendGpProxyTableResponse::?relay`
        FUNCTION `??zclGp_SendGpProxyTableResponse::?relay`,0203H
        PUBWEAK __Constant_32
        PUBLIC gp_AddCmdPayloadMsgNode
        FUNCTION gp_AddCmdPayloadMsgNode,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC gp_AddNotificationMsgNode
        FUNCTION gp_AddNotificationMsgNode,0a1203H
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC gp_CmdPayloadMsgClean
        FUNCTION gp_CmdPayloadMsgClean,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC gp_CreateCmdPayloadMsgList
        FUNCTION gp_CreateCmdPayloadMsgList,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC gp_CreateNotificationMsgList
        FUNCTION gp_CreateNotificationMsgList,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC gp_GetHeadCmdPayloadMsg
        FUNCTION gp_GetHeadCmdPayloadMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC gp_GetHeadNotificationMsg
        FUNCTION gp_GetHeadNotificationMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC gp_GetPHeadCmdPayload
        FUNCTION gp_GetPHeadCmdPayload,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC gp_GetPHeadNotification
        FUNCTION gp_GetPHeadNotification,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC gp_NotificationMsgClean
        FUNCTION gp_NotificationMsgClean,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC gp_ResetProxyBasicTblEntry
        FUNCTION gp_ResetProxyBasicTblEntry,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        FUNCTION gp_addPairedSinksToMsgQueue,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 108, STACK
        FUNCTION zclGp_HdlIncoming,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGp_ProcessInProxyBasic,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 51, STACK
        PUBLIC zclGp_RegisterCmdCallbacks
        FUNCTION zclGp_RegisterCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclGp_SendGpCommissioningNotificationCommand
        FUNCTION zclGp_SendGpCommissioningNotificationCommand,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC zclGp_SendGpNotificationCommand
        FUNCTION zclGp_SendGpNotificationCommand,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC zclGp_SendGpProxyTableResponse
        FUNCTION zclGp_SendGpProxyTableResponse,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
gp_getProxyTableByIndex SYMBOL "gp_getProxyTableByIndex"
`??gp_getProxyTableByIndex::?relay` SYMBOL "?relay", gp_getProxyTableByIndex
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
gp_AddCmdPayloadMsgNode SYMBOL "gp_AddCmdPayloadMsgNode"
`??gp_AddCmdPayloadMsgNode::?relay` SYMBOL "?relay", gp_AddCmdPayloadMsgNode
gp_AddNotificationMsgNode SYMBOL "gp_AddNotificationMsgNode"
`??gp_AddNotificationMsgNode::?relay` SYMBOL "?relay", gp_AddNotificationMsgNode
gp_CmdPayloadMsgClean SYMBOL "gp_CmdPayloadMsgClean"
`??gp_CmdPayloadMsgClean::?relay` SYMBOL "?relay", gp_CmdPayloadMsgClean
gp_CreateCmdPayloadMsgList SYMBOL "gp_CreateCmdPayloadMsgList"
`??gp_CreateCmdPayloadMsgList::?relay` SYMBOL "?relay", gp_CreateCmdPayloadMsgList
gp_CreateNotificationMsgList SYMBOL "gp_CreateNotificationMsgList"
`??gp_CreateNotificationMsgList::?relay` SYMBOL "?relay", gp_CreateNotificationMsgList
gp_GetHeadCmdPayloadMsg SYMBOL "gp_GetHeadCmdPayloadMsg"
`??gp_GetHeadCmdPayloadMsg::?relay` SYMBOL "?relay", gp_GetHeadCmdPayloadMsg
gp_GetHeadNotificationMsg SYMBOL "gp_GetHeadNotificationMsg"
`??gp_GetHeadNotificationMsg::?relay` SYMBOL "?relay", gp_GetHeadNotificationMsg
gp_GetPHeadCmdPayload SYMBOL "gp_GetPHeadCmdPayload"
`??gp_GetPHeadCmdPayload::?relay` SYMBOL "?relay", gp_GetPHeadCmdPayload
gp_GetPHeadNotification SYMBOL "gp_GetPHeadNotification"
`??gp_GetPHeadNotification::?relay` SYMBOL "?relay", gp_GetPHeadNotification
gp_NotificationMsgClean SYMBOL "gp_NotificationMsgClean"
`??gp_NotificationMsgClean::?relay` SYMBOL "?relay", gp_NotificationMsgClean
gp_ResetProxyBasicTblEntry SYMBOL "gp_ResetProxyBasicTblEntry"
`??gp_ResetProxyBasicTblEntry::?relay` SYMBOL "?relay", gp_ResetProxyBasicTblEntry
zclGp_RegisterCmdCallbacks SYMBOL "zclGp_RegisterCmdCallbacks"
`??zclGp_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGp_RegisterCmdCallbacks
zclGp_SendGpCommissioningNotificationCommand SYMBOL "zclGp_SendGpCommissioningNotificationCommand"
`??zclGp_SendGpCommissioningNotificationCommand:` SYMBOL "?relay", zclGp_SendGpCommissioningNotificationCommand
zclGp_SendGpNotificationCommand SYMBOL "zclGp_SendGpNotificationCommand"
`??zclGp_SendGpNotificationCommand::?relay` SYMBOL "?relay", zclGp_SendGpNotificationCommand
zclGp_SendGpProxyTableResponse SYMBOL "zclGp_SendGpProxyTableResponse"
`??zclGp_SendGpProxyTableResponse::?relay` SYMBOL "?relay", zclGp_SendGpProxyTableResponse

        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??gp_getProxyTableByIndex::?relay`
        FUNCTION `??gp_getProxyTableByIndex::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,00H
        EXTERN `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,00H
        EXTERN _NIB
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_commissionerAddress
        EXTERN gp_getProxyTableByIndex
        FUNCTION gp_getProxyTableByIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InSeqNum
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\sam\Documents\GitHub\ti\Z-Stack 3.0.1\Components\stack\zcl\zcl_green_power.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_green_power.c
//    3   Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
//    4   Revision:       $Revision: 44493 $
//    5 
//    6   Description:    Zigbee Cluster Library - General.  This application receives all
//    7                   ZCL messages and initially parses them before passing to application.
//    8 
//    9 
//   10   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 
//   42 
//   43 /*********************************************************************
//   44  * INCLUDES
//   45  */
//   46 
//   47 #include "ZGlobals.h"  
//   48 #include "ZComDef.h"
//   49 #include "zcl.h"
//   50 #include "zcl_green_power.h"
//   51 #include "stub_aps.h"
//   52 #include "gp_common.h"
//   53 #include "bdb_interface.h"
//   54    
//   55 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   56 
//   57 /*********************************************************************
//   58  * MACROS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * CONSTANTS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * TYPEDEFS
//   67  */
//   68 
//   69 typedef struct zclGpCBRec
//   70 {
//   71   struct zclGpCBRec        *next;
//   72   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   73   zclGp_AppCallbacks_t     *CBs;      // Pointer to Callback function
//   74 } zclGpCBRec_t;
//   75 
//   76 
//   77 /*********************************************************************
//   78  * GLOBAL VARIABLES
//   79  */
//   80 
//   81 /*********************************************************************
//   82  * GLOBAL FUNCTIONS
//   83  */
//   84 
//   85 /*********************************************************************
//   86  * LOCAL VARIABLES
//   87  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   88 static zclGpCBRec_t *zclGpCBs = (zclGpCBRec_t *)NULL;
zclGpCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 static uint8 zclGpPluginRegisted = FALSE;
zclGpPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   90 static gpNotificationMsg_t *pNotificationMsgHead = NULL;
pNotificationMsgHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   91 static gpCmdPayloadMsg_t *pCmdPayloadMsgHead = NULL;
pCmdPayloadMsgHead:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   92 
//   93 //static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
//   94 
//   95 
//   96 /*********************************************************************
//   97  * LOCAL FUNCTIONS
//   98  */
//   99 static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg );
//  100 static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg );
//  101 static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint );
//  102 static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg );
//  103 
//  104 static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg, zclGp_AppCallbacks_t *pCBs );
//  105 
//  106 
//  107 /*********************************************************************
//  108  * @fn      zclGp_RegisterCmdCallbacks
//  109  *
//  110  * @brief   Register an applications command callbacks
//  111  *
//  112  * @param   endpoint - application's endpoint
//  113  * @param   callbacks - pointer to the callback record.
//  114  *
//  115  * @return  ZMemError if not able to allocate
//  116  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  117 ZStatus_t zclGp_RegisterCmdCallbacks( uint8 endpoint, zclGp_AppCallbacks_t *callbacks )
zclGp_RegisterCmdCallbacks:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGp_RegisterCmdCallbacks
        CODE
//  118 {
        FUNCALL zclGp_RegisterCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_RegisterCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  119   zclGpCBRec_t *pNewItem;
//  120   zclGpCBRec_t *pLoop;
//  121 
//  122   // Register as a ZCL Plugin
//  123   if ( zclGpPluginRegisted == FALSE )
        MOV       DPTR,#zclGpPluginRegisted
        MOVX      A,@DPTR
        JNZ       ??zclGp_RegisterCmdCallbacks_0
//  124   {
//  125     zcl_registerPlugin( ZCL_CLUSTER_ID_GREEN_POWER,
//  126                         ZCL_CLUSTER_ID_GREEN_POWER,
//  127                         zclGp_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV       ?V2,#`??zclGp_HdlIncoming::?relay` & 0xff
        MOV       ?V3,#(`??zclGp_HdlIncoming::?relay` >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x21
        MOV       R5,#0x0
        MOV       R2,#0x21
        MOV       R3,#0x0
        LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  128 
//  129     zclGpPluginRegisted = TRUE;
        MOV       DPTR,#zclGpPluginRegisted
        MOV       A,#0x1
        MOVX      @DPTR,A
//  130   }
//  131 
//  132   // Fill in the new profile list
//  133   pNewItem = zcl_mem_alloc( sizeof( zclGpCBRec_t ) );
??zclGp_RegisterCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  134   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zclGp_RegisterCmdCallbacks_1
//  135     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??zclGp_RegisterCmdCallbacks_2
//  136 
//  137   pNewItem->next = (zclGpCBRec_t *)NULL;
??zclGp_RegisterCmdCallbacks_1:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  138   pNewItem->endpoint = endpoint;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
//  139   pNewItem->CBs = callbacks;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  140 
//  141   // Find spot in list
//  142   if (  zclGpCBs == NULL )
        MOV       DPTR,#zclGpCBs
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       DPTR,#zclGpCBs
        JZ        ??zclGp_RegisterCmdCallbacks_3
//  143   {
//  144     zclGpCBs = pNewItem;
//  145   }
//  146   else
//  147   {
//  148     // Look for end of list
//  149     pLoop = zclGpCBs;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zclGp_RegisterCmdCallbacks_4
//  150     while ( pLoop->next != NULL )
//  151       pLoop = pLoop->next;
??zclGp_RegisterCmdCallbacks_5:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
??zclGp_RegisterCmdCallbacks_4:
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_61:
        JNZ       ??zclGp_RegisterCmdCallbacks_5
//  152 
//  153     // Put new item at end of list
//  154     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  155   }
??zclGp_RegisterCmdCallbacks_3:
        LCALL     ??Subroutine34_0 & 0xFFFF
//  156 
//  157   return ( ZSuccess );
??CrossCallReturnLabel_48:
        MOV       R1,#0x0
??zclGp_RegisterCmdCallbacks_2:
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  158 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  159 
//  160 /*********************************************************************
//  161  * @fn      zclGp_FindCallbacks
//  162  *
//  163  * @brief   Find the callbacks for an endpoint
//  164  *
//  165  * @param   endpoint - endpoint to find the application callbacks for
//  166  *
//  167  * @return  pointer to the callbacks
//  168  */
//  169 static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint )
//  170 {
//  171   zclGpCBRec_t *pCBs;
//  172 
//  173   pCBs = zclGpCBs;
//  174   while ( pCBs )
//  175   {
//  176     if ( pCBs->endpoint == endpoint )
//  177       return ( pCBs->CBs );
//  178     pCBs = pCBs->next;
//  179   }
//  180   return ( (zclGp_AppCallbacks_t *)NULL );
//  181 }
//  182 
//  183 /*********************************************************************
//  184  * @fn      zclGp_HdlIncoming
//  185  *
//  186  * @brief   Callback from ZCL to process incoming Commands specific
//  187  *          to this cluster library or Profile commands for attributes
//  188  *          that aren't in the attribute list
//  189  *
//  190  *
//  191  * @param   pInMsg - pointer to the incoming message
//  192  *
//  193  * @return  ZStatus_t
//  194  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  195 static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg )
zclGp_HdlIncoming:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclGp_HdlIncoming
        CODE
//  196 {
        FUNCALL zclGp_HdlIncoming, zclGp_ProcessInProxyBasic
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  197   ZStatus_t stat = ZSuccess;
//  198 
//  199 #if defined ( INTER_PAN )
//  200   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
//  201     return ( stat ); // Cluster not supported thru Inter-PAN
//  202 #endif
//  203   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        ANL       A,#0x3
        XRL       A,#0x1
        JNZ       ??zclGp_HdlIncoming_0
//  204   {
//  205     // Is this a manufacturer specific command?
//  206     if ( pInMsg->hdr.fc.manuSpecific == 0 )
        MOV       A,R0
        ANL       A,#0x4
        JNZ       ??zclGp_HdlIncoming_0
//  207     {
//  208       stat = zclGp_HdlInSpecificCommands( pInMsg );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine39_0 & 0xFFFF
//  209     }
//  210     else
//  211     {
//  212       // We don't support any manufacturer specific command.
//  213       stat = ZFailure;
//  214     }
//  215   }
??CrossCallReturnLabel_81:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPTR,#zclGpCBs
??zclGp_HdlIncoming_1:
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_70:
        JZ        ??zclGp_HdlIncoming_0
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R4
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??zclGp_HdlIncoming_1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JNZ       ??zclGp_HdlIncoming_2
??zclGp_HdlIncoming_0:
        MOV       R1,#0x1
        SJMP      ??zclGp_HdlIncoming_3
??zclGp_HdlIncoming_2:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x21
        JNZ       ??zclGp_HdlIncoming_4
        INC       DPTR
        MOVX      A,@DPTR
??zclGp_HdlIncoming_4:
        JNZ       ??zclGp_HdlIncoming_5
        ; Setup parameters for call to function zclGp_ProcessInProxyBasic
        LCALL     `??zclGp_ProcessInProxyBasic::?relay`; Banked call to: zclGp_ProcessInProxyBasic
        MOV       A,R1
        SJMP      ??zclGp_HdlIncoming_6
??zclGp_HdlIncoming_5:
        MOV       A,#0x1
??zclGp_HdlIncoming_6:
        MOV       R1,A
//  216   else
//  217   {
//  218     // Handle all the normal (Read, Write...) commands -- should never get here
//  219     stat = ZFailure;
//  220   }
//  221   return ( stat );
??zclGp_HdlIncoming_3:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  222 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  223 
//  224 /*********************************************************************
//  225  * @fn      zclGp_HdlInSpecificCommands
//  226  *
//  227  * @brief   Callback from ZCL to process incoming Commands specific
//  228  *          to this cluster library
//  229 
//  230  * @param   pInMsg - pointer to the incoming message
//  231  *
//  232  * @return  ZStatus_t
//  233  */
//  234 static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg )
//  235 {
//  236   ZStatus_t stat;
//  237   zclGp_AppCallbacks_t *pCBs;
//  238 
//  239   // make sure endpoint exists
//  240   pCBs = zclGp_FindCallbacks( pInMsg->msg->endPoint );
//  241   if ( pCBs == NULL )
//  242     return ( ZFailure );
//  243 
//  244   switch ( pInMsg->msg->clusterId )
//  245   {
//  246     case ZCL_CLUSTER_ID_GREEN_POWER:
//  247       // Proxy Basic handler
//  248       stat = zclGp_ProcessInProxyBasic( pInMsg, pCBs );
//  249       break;
//  250 
//  251     default:
//  252       stat = ZFailure;
//  253       break;
//  254   }
//  255 
//  256   return ( stat );
//  257 }
//  258 
//  259 /*********************************************************************
//  260  * @fn      zclGp_ProcessInProxyBasic
//  261  *
//  262  * @brief   Process in the received client commands for the Proxy Basic.
//  263  *
//  264  * @param   pInMsg - pointer to the incoming message
//  265  *
//  266  * @return  ZStatus_t
//  267  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  268 static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg,
zclGp_ProcessInProxyBasic:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
        CODE
//  269                                           zclGp_AppCallbacks_t *pCBs )
//  270 {
        FUNCALL zclGp_ProcessInProxyBasic, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_ProcessInProxyBasic, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 22
        MOV       A,#-0x16
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  271   // Server side command handler
//  272   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
        MOV       A,R6
        ADD       A,#0x6
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        MOV       A,R6
        ADD       A,#0x7
        MOV       ?V6,A
        CLR       A
        ADDC      A,R7
        MOV       ?V7,A
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        $+5
        LJMP      ??zclGp_ProcessInProxyBasic_0 & 0xFFFF
//  273   {
//  274     // Server side command handling is not supported
//  275     zclDefaultRspCmd_t defaultRspCmd;
//  276 
//  277     defaultRspCmd.commandID = pInMsg->hdr.commandID;
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  278     defaultRspCmd.statusCode = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x7f
        LCALL     ?Subroutine21 & 0xFFFF
//  279     zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
//  280                            pInMsg->msg->clusterId, &defaultRspCmd,
//  281                            ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
//  282   }
??CrossCallReturnLabel_16:
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 45)
        CLR       A
        MOV       ?V10,A
        MOV       ?V11,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V10,#0x1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,?V8
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V9
        MOV       R3,A
        MOV       A,?V8
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V9
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  283   // Client side command handler
//  284   if ( zcl_ClientCmd( pInMsg->hdr.fc.direction ) )
??zclGp_ProcessInProxyBasic_0:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
//  285   {
//  286     switch ( pInMsg->hdr.commandID )
        MOV       A,R6
        ADD       A,#0xa
        MOV       ?V12,A
        CLR       A
        ADDC      A,R7
        MOV       ?V13,A
        MOV       A,R6
        ADD       A,#0x8
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclGp_ProcessInProxyBasic_2
        DEC       A
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_3 & 0xFFFF
        ADD       A,#-0x4
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_4 & 0xFFFF
        ADD       A,#-0x5
        JZ        ??zclGp_ProcessInProxyBasic_5
        LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
//  287     {
//  288       case COMMAND_GP_PAIRING:
//  289         if ( pCBs->pfnGpPairingCmd )
??zclGp_ProcessInProxyBasic_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_71:
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
//  290         {
//  291           zclGpPairing_t cmd;
//  292           
//  293           zcl_InSeqNum = pInMsg->hdr.transSeqNum;
        LCALL     ?Subroutine10 & 0xFFFF
//  294           
//  295           cmd.srcAddr = &(pInMsg->msg->srcAddr);
??CrossCallReturnLabel_2:
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine8 & 0xFFFF
//  296           osal_memcpy( cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
??CrossCallReturnLabel_37:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  297           pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        ADD       A,#0x3
        LCALL     ??Subroutine31_0 & 0xFFFF
//  298                     
//  299           if ( cmd.pData == NULL )
??CrossCallReturnLabel_41:
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_62:
        JNZ       ??zclGp_ProcessInProxyBasic_6
//  300           {
//  301             return ZFailure;
        MOV       R1,#0x1
        LJMP      ??zclGp_ProcessInProxyBasic_7 & 0xFFFF
//  302           }
//  303           
//  304           cmd.pData = pInMsg->pData;
??zclGp_ProcessInProxyBasic_6:
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
//  305           pCBs->pfnGpPairingCmd( &cmd );
??CrossCallReturnLabel_49:
        ; Setup parameters for indirect call
        MOV       A,#0xf
        LJMP      ??zclGp_ProcessInProxyBasic_8 & 0xFFFF
//  306 
//  307         }
//  308         break;
//  309         
//  310       case COMMAND_GP_PROXY_TABLE_REQUEST:
//  311         if ( pCBs->pfnGpProxyTableReqCmd )
??zclGp_ProcessInProxyBasic_5:
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V0,A
        JNC       ??zclGp_ProcessInProxyBasic_9
        INC       ?V1
??zclGp_ProcessInProxyBasic_9:
        MOV       DPL,A
        MOV       DPH,?V1
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_72:
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
//  312         {
//  313           zclGpProxyTableRequest_t cmd;
//  314           
//  315           zcl_InSeqNum = pInMsg->hdr.transSeqNum;
        LCALL     ?Subroutine10 & 0xFFFF
//  316           
//  317           cmd.srcAddr = &(pInMsg->msg->srcAddr);
??CrossCallReturnLabel_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine8 & 0xFFFF
//  318           osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
??CrossCallReturnLabel_38:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  319           pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
        LCALL     ?Subroutine6 & 0xFFFF
//  320           
//  321           
//  322           cmd.pData = (void*)pInMsg->pData;
??CrossCallReturnLabel_42:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LJMP      ??CrossCallReturnLabel_10 & 0xFFFF
        ; Setup parameters for indirect call
//  323           pCBs->pfnGpProxyTableReqCmd( &cmd );
//  324 
//  325         }
//  326         break;
//  327       case COMMAND_GP_PROXY_COMMISSIONING_MODE:
//  328         if(pCBs->pfnGpProxyCommissioningModeCmd)
??zclGp_ProcessInProxyBasic_3:
        MOV       A,?V0
        ADD       A,#0x4
        MOV       ?V0,A
        JNC       ??zclGp_ProcessInProxyBasic_10
        INC       ?V1
??zclGp_ProcessInProxyBasic_10:
        MOV       DPL,A
        MOV       DPH,?V1
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_73:
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
//  329         {
//  330           zclGpProxyCommissioningMode_t cmd;
//  331 
//  332           osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
        ; Setup parameters for call to function osal_memcpy
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  333           pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
        LCALL     ?Subroutine6 & 0xFFFF
//  334 
//  335           // alloc for data after options field
//  336           uint8 responseLen = pInMsg->pDataLen - sizeof(cmd.options); 
??CrossCallReturnLabel_43:
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        DEC       A
//  337          
//  338           cmd.pData = osal_mem_alloc( responseLen );
        MOV       ?V2,A
        MOV       ?V3,#0x0
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,?V3
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
//  339           osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  340 
//  341           if(pInMsg->msg->srcAddr.addrMode == afAddr16Bit)
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV       A,R0
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??CrossCallReturnLabel_50
//  342           {
//  343             cmd.srcAddr = pInMsg->msg->srcAddr.addr.shortAddr;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine15 & 0xFFFF
//  344           }
??CrossCallReturnLabel_10:
        LCALL     ??Subroutine34_0 & 0xFFFF
//  345           
//  346           pCBs->pfnGpProxyCommissioningModeCmd( &cmd );
??CrossCallReturnLabel_50:
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LJMP      ??zclGp_ProcessInProxyBasic_11 & 0xFFFF
//  347         }
//  348         break;
//  349         case COMMAND_GP_RESPONSE:
//  350           
//  351           if(pCBs->pfnGpResponseCommand)
??zclGp_ProcessInProxyBasic_4:
        MOV       A,?V0
        ADD       A,#0x6
        MOV       ?V0,A
        JNC       ??zclGp_ProcessInProxyBasic_12
        INC       ?V1
??zclGp_ProcessInProxyBasic_12:
        MOV       DPL,A
        MOV       DPH,?V1
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_74:
        JNZ       $+5
        LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
//  352           {
//  353             zclGpResponse_t cmd;
//  354             
//  355             uint8 responseLen;
//  356 
//  357             osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
        ; Setup parameters for call to function osal_memcpy
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  358             pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  359             
//  360             cmd.tempMasterShortAddr = osal_build_uint16(pInMsg->pData);
        ; Setup parameters for call to function osal_build_uint16
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
//  361             pInMsg->pData += sizeof(cmd.tempMasterShortAddr);  // Move data pointer after tempMaster field
??CrossCallReturnLabel_33:
        ADD       A,#0x2
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V9,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,?V8
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V9
        MOVX      @DPTR,A
//  362             
//  363             osal_memcpy( &cmd.tempMasterTxChannel, (void*)pInMsg->pData, sizeof(cmd.tempMasterTxChannel) );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  364             pInMsg->pData += sizeof(cmd.tempMasterTxChannel);  // Move data pointer after options field
        LCALL     ?Subroutine6 & 0xFFFF
//  365             
//  366             cmd.dstAddr = pInMsg->msg->macDestAddr;  
??CrossCallReturnLabel_44:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_86:
        XCH       A,R0
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
//  367                   
//  368             responseLen = pInMsg->pDataLen - sizeof(cmd.tempMasterTxChannel) 
//  369                                    - sizeof(cmd.tempMasterShortAddr) 
//  370                                    - sizeof(cmd.options);
??CrossCallReturnLabel_51:
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        ADD       A,#-0x4
        MOV       R0,A
//  371             cmd.pData = osal_mem_alloc( responseLen );
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
//  372             
//  373             osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
??CrossCallReturnLabel_9:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       A,R6
        MOV       R4,A
        MOV       R5,#0x0
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 44)
//  374 
//  375             pCBs->pfnGpResponseCommand( &cmd ); 
        ; Setup parameters for indirect call
        MOV       A,#0x7
??zclGp_ProcessInProxyBasic_8:
        LCALL     ?XSTACK_DISP101_8
??zclGp_ProcessInProxyBasic_11:
        MOV       DPL,?V0
        MOV       DPH,?V1
//  376           }
//  377         break;
//  378     }
//  379   }
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ?CALL_IND
//  380 
//  381   return ( ZSuccess );
??zclGp_ProcessInProxyBasic_1:
        MOV       R1,#0x0
??zclGp_ProcessInProxyBasic_7:
        MOV       A,#0x16
          CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  382 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Valid
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_8
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_9
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       DPTR,#zcl_InSeqNum
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0x6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        ADD       A,#0x1
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32
//  383 
//  384 /*********************************************************************
//  385  * @fn      zclGp_SendGpNotificationCommand
//  386  *
//  387  * @brief   Send the Green Power Notification Command to a device
//  388  *
//  389  * @param   pCmd - Pointer to GP Notification Struct
//  390  *          secNum - Sequence number given by the GPDF  
//  391  *
//  392  * @return  ZStatus_t
//  393  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  394 ZStatus_t zclGp_SendGpNotificationCommand( gpNotificationCmd_t *pCmd, uint8 secNum )
zclGp_SendGpNotificationCommand:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
        CODE
//  395 {
        FUNCALL zclGp_SendGpNotificationCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, gp_AddCmdPayloadMsgNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, gp_addPairedSinksToMsgQueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpNotificationCommand, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V14,R1
//  396   uint8 *buf = NULL;
//  397   uint8 *pBuf = NULL;
//  398   uint8 *pGpdId = NULL;
        MOV       ?V8,#0x0
        MOV       ?V9,#0x0
//  399   uint8 appId;
//  400   ZStatus_t status;
//  401   uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
        MOV       ?V2,#0xb
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        JNZ       ??zclGp_SendGpNotificationCommand_0
//  402   gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
//  403   
//  404   // Check some stuff to calculate the packet len
//  405   // If Application Id bitfield is 0b000
//  406   if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
//  407   {
//  408     len += 4;  // GPD ID
        MOV       ?V2,#0xf
        SJMP      ??zclGp_SendGpNotificationCommand_1
//  409   }
//  410   // If Application Id bitfield is 0b010
//  411   else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
??zclGp_SendGpNotificationCommand_0:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zclGp_SendGpNotificationCommand_1
//  412   {
//  413     len += 9;  // IEEE addr + EP
        MOV       ?V2,#0x14
//  414   }
//  415   
//  416   // Length of the command payload
//  417   len += pCmd->payloadLen;
??zclGp_SendGpNotificationCommand_1:
        MOV       A,R2
        ADD       A,#0x14
        MOV       ?V10,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V11,A
        MOV       DPL,?V10
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        ADD       A,R0
        MOV       ?V2,A
        CLR       A
        ADDC      A,#0x0
//  418 
//  419   buf = zcl_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V2
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V12,R2
        MOV       ?V13,R3
//  420   if ( buf )
        MOV       A,R2
        ORL       A,?V13
        JNZ       $+5
        LJMP      ??zclGp_SendGpNotificationCommand_2 & 0xFFFF
//  421   {
//  422     pBuf = buf;
//  423     
//  424     zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x2
        MOV       R5,#0x0
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  425     pBuf += sizeof ( uint16 );
        MOV       A,?V12
        ADD       A,#0x2
        MOV       R6,A
        CLR       A
        ADDC      A,?V13
        MOV       R7,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        JNZ       ??zclGp_SendGpNotificationCommand_3
//  426     
//  427     // If Application Id bitfield is 0b000
//  428     if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
//  429     {
//  430       zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
        MOV       A,?V0
        ADD       A,#0x2
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  431       pGpdId = ( uint8* )&pCmd->gpdId;
//  432       appId = GP_OPT_APP_ID_GPD;
        MOV       ?V7,#0x0
//  433       pBuf += sizeof ( uint32 );
        MOV       A,R6
        ADD       A,#0x4
        SJMP      ??CrossCallReturnLabel_6
//  434     }
//  435     // If Application Id bitfield is 0b010
//  436     else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
??zclGp_SendGpNotificationCommand_3:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zclGp_SendGpNotificationCommand_4
//  437     {
//  438       zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
        MOV       A,?V0
        ADD       A,#0x6
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  439       pGpdId = pCmd->gpdIEEE;
//  440       appId = GP_OPT_APP_ID_IEEE;
        MOV       ?V7,#0x2
//  441       pBuf += Z_EXTADDR_LEN;
//  442       *pBuf++ = pCmd->ep;
        MOV       A,?V0
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        LCALL     ?Subroutine12 & 0xFFFF
//  443     }
??CrossCallReturnLabel_6:
        MOV       R6,A
        JNC       ??zclGp_SendGpNotificationCommand_4
        INC       R7
//  444     
//  445     zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
??zclGp_SendGpNotificationCommand_4:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V0
        ADD       A,#0xf
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  446     pBuf += sizeof ( uint32 );
//  447 
//  448     *pBuf++ = pCmd->cmdId;
        MOV       A,?V0
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        LCALL     ?Subroutine7 & 0xFFFF
//  449     
//  450     *pBuf++ = pCmd->payloadLen;
??CrossCallReturnLabel_0:
        JNC       ??zclGp_SendGpNotificationCommand_5
        INC       R7
//  451     if ( pCmd->payloadLen > 0 )
??zclGp_SendGpNotificationCommand_5:
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        MOV       R1,A
        JZ        ??CrossCallReturnLabel_12
//  452     {
//  453       zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V0
        ADD       A,#0x15
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  454       pBuf += pCmd->payloadLen;
        LCALL     ?Subroutine18 & 0xFFFF
//  455     }
//  456     
//  457     zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V0
        ADD       A,#0x17
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  458     pBuf += sizeof ( uint16 );
//  459     
//  460     *pBuf++ = pCmd->gppGpdLink;
        MOV       A,?V0
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        LCALL     ?Subroutine19 & 0xFFFF
//  461     
//  462     pCmdPayloadMsgCurr = gp_AddCmdPayloadMsgNode ( &pCmdPayloadMsgHead, buf, len );
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function gp_AddCmdPayloadMsgNode
        MOV       R1,?V2
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,#pCmdPayloadMsgHead & 0xff
        MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
        LCALL     `??gp_AddCmdPayloadMsgNode::?relay`; Banked call to: gp_AddCmdPayloadMsgNode
        MOV       DPL,R2
        MOV       DPH,R3
//  463     
//  464     pCmdPayloadMsgCurr->secNum = secNum;
        MOV       A,?V14
        MOVX      @DPTR,A
//  465           
//  466     if ( pCmdPayloadMsgCurr != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclGp_SendGpNotificationCommand_6
//  467     {
//  468       gp_addPairedSinksToMsgQueue( appId, pGpdId, pCmdPayloadMsgCurr );
        ; Setup parameters for call to function gp_addPairedSinksToMsgQueue
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,?V7
        LCALL     `??gp_addPairedSinksToMsgQueue::?relay`; Banked call to: gp_addPairedSinksToMsgQueue
//  469       osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x20
        MOV       R3,#0x0
        MOV       DPTR,#zcl_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP      ??zclGp_SendGpNotificationCommand_6
//  470     }
//  471 
//  472   }
//  473   else
//  474     status = ZMemError;
??zclGp_SendGpNotificationCommand_2:
        MOV       ?V15,#0x10
//  475 
//  476   return ( status );
??zclGp_SendGpNotificationCommand_6:
        MOV       R1,?V15
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  477 }
          CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclGp_SendGpNotificationCommand
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclGp_SendGpNotificationCommand
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclGp_SendGpNotificationCommand
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        MOV       ?V8,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V9,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V8
        MOV       ?V5,A
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
//  478   
//  479 /*********************************************************************
//  480  * @fn      zclGp_SendGpCommissioningNotificationCommand
//  481  *
//  482  * @brief   Send the Green Power Commissioning Notification Command to a device
//  483  *
//  484  * @param   pCmd - Pointer to GP Commissioning Notification Struct
//  485  *
//  486  * @return  ZStatus_t
//  487  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  488 ZStatus_t zclGp_SendGpCommissioningNotificationCommand( gpCommissioningNotificationCmd_t *pCmd )
zclGp_SendGpCommissioningNotificationCommand:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function zclGp_SendGpCommissioningNotificationCommand
        CODE
//  489 {
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpCommissioningNotificationCommand, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V2,R2
        MOV       ?V3,R3
//  490   uint8 *buf = NULL;
//  491   uint8 *pBuf = NULL;
//  492   ZStatus_t status;
//  493   uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
        MOV       ?V0,#0xb
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        JNZ       ??zclGp_SendGpCommissioningNotificationCommand_0
//  494   
//  495   // Check some stuff to calculate the packet len
//  496   // If Application Id bitfield is 0b000
//  497   if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
//  498   {
//  499     len += 4;  // GPD ID
        MOV       ?V0,#0xf
        SJMP      ??zclGp_SendGpCommissioningNotificationCommand_1
//  500   }
//  501   // If Application Id bitfield is 0b010
//  502   else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
??zclGp_SendGpCommissioningNotificationCommand_0:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zclGp_SendGpCommissioningNotificationCommand_1
//  503   {
//  504     len += 9;  // IEEE addr + EP
        MOV       ?V0,#0x14
//  505   }
//  506   
//  507   // Length of the command payload
//  508   len += pCmd->payloadLen;
??zclGp_SendGpCommissioningNotificationCommand_1:
        MOV       A,R2
        ADD       A,#0x14
        MOV       ?V10,A
        CLR       A
        ADDC      A,?V3
        MOV       ?V11,A
        MOV       DPL,?V10
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        ADD       A,R0
        MOV       ?V0,A
        CLR       A
        ADDC      A,#0x0
        MOV       ?V1,A
//  509 
//  510   buf = zcl_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V0
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
//  511   if ( buf )
        MOV       A,R2
        ORL       A,?V9
        JNZ       $+5
        LJMP      ??zclGp_SendGpCommissioningNotificationCommand_2 & 0xFFFF
//  512   {
//  513     pBuf = buf;
//  514     
//  515     zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V2
        MOV       ?V5,?V3
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x2
        MOV       R5,#0x0
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  516     pBuf += sizeof ( uint16 );
        MOV       A,?V8
        ADD       A,#0x2
        MOV       R6,A
        CLR       A
        ADDC      A,?V9
        MOV       R7,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        JNZ       ??zclGp_SendGpCommissioningNotificationCommand_3
//  517     
//  518     // If Application Id bitfield is 0b000
//  519     if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
//  520     {
//  521       zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
        ; Setup parameters for call to function osal_memcpy
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  522       pBuf += sizeof ( uint32 );
        MOV       A,R6
        ADD       A,#0x4
        SJMP      ??CrossCallReturnLabel_7
//  523     }
//  524     // If Application Id bitfield is 0b010
//  525     else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
??zclGp_SendGpCommissioningNotificationCommand_3:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zclGp_SendGpCommissioningNotificationCommand_4
//  526     {
//  527       zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V2
        ADD       A,#0x6
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  528       pBuf += Z_EXTADDR_LEN;
//  529       *pBuf++ = pCmd->ep;
        MOV       A,?V2
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        LCALL     ?Subroutine12 & 0xFFFF
//  530     }
??CrossCallReturnLabel_7:
        MOV       R6,A
        JNC       ??zclGp_SendGpCommissioningNotificationCommand_4
        INC       R7
//  531     
//  532     zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
??zclGp_SendGpCommissioningNotificationCommand_4:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V2
        ADD       A,#0xf
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  533     pBuf += sizeof ( uint32 );
//  534 
//  535     *pBuf++ = pCmd->cmdId;
        MOV       A,?V2
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        LCALL     ?Subroutine7 & 0xFFFF
//  536     
//  537     *pBuf++ = pCmd->payloadLen;
??CrossCallReturnLabel_1:
        JNC       ??zclGp_SendGpCommissioningNotificationCommand_5
        INC       R7
//  538     if ( pCmd->payloadLen > 0 )
??zclGp_SendGpCommissioningNotificationCommand_5:
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        MOV       R1,A
        JZ        ??CrossCallReturnLabel_13
//  539     {
//  540       zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V2
        ADD       A,#0x15
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  541       pBuf += pCmd->payloadLen;
        LCALL     ?Subroutine18 & 0xFFFF
//  542     }
//  543     
//  544     zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V2
        ADD       A,#0x17
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  545     pBuf += sizeof ( uint16 );
//  546     
//  547     *pBuf++ = pCmd->gppGpdLink;
        MOV       A,?V2
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        LCALL     ?Subroutine19 & 0xFFFF
//  548     
//  549     afAddrType_t addr;
//  550     addr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
??CrossCallReturnLabel_15:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
//  551     addr.panId = _NIB.nwkPanId;
??CrossCallReturnLabel_79:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
//  552     addr.addr.shortAddr = gp_commissionerAddress; 
??CrossCallReturnLabel_52:
        MOV       DPTR,#gp_commissionerAddress
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ??Subroutine34_0 & 0xFFFF
//  553         
//  554     if ( gp_commissionerAddress == 0xFFFF )
??CrossCallReturnLabel_53:
        MOV       DPTR,#gp_commissionerAddress
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zclGp_SendGpCommissioningNotificationCommand_6
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??zclGp_SendGpCommissioningNotificationCommand_6:
        JNZ       ??zclGp_SendGpCommissioningNotificationCommand_7
//  555     {
//  556       addr.addrMode = afAddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        SJMP      ??zclGp_SendGpCommissioningNotificationCommand_8
//  557     }
//  558     else
//  559     {
//  560       addr.addrMode = afAddr16Bit;
??zclGp_SendGpCommissioningNotificationCommand_7:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
??zclGp_SendGpCommissioningNotificationCommand_8:
        MOVX      @DPTR,A
//  561     }
//  562         
//  563     zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &addr, ZCL_CLUSTER_ID_GREEN_POWER,
//  564                       COMMAND_GP_COMMISSIONING_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  565                       TRUE, 0,  bdb_getZCLFrameCounter(), len, buf ); 
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        MOV       R1,A
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R4,#0x21
        MOV       R5,#0x0
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#-0xe
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  566       
//  567     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGp_SendGpCommissioningNotificationCommand_9
//  568   }
//  569   else
//  570     status = ZMemError;
??zclGp_SendGpCommissioningNotificationCommand_2:
        MOV       ?V7,#0x10
//  571 
//  572   return ( status );
??zclGp_SendGpCommissioningNotificationCommand_9:
        MOV       R1,?V7
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
//  573 }
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function zclGp_SendGpCommissioningNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V3
        MOV       ?V5,A
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        ADD       A,R0
        MOV       R6,A
        CLR       A
        ADDC      A,R7
        MOV       R7,A
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV       DPH,A
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_30:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x9
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV       DPH,A
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX      @DPTR,A
        MOV       DPL,?V10
        MOV       DPH,?V11
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_29:
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x6
        MOV       R6,A
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_7
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclGp_SendGpNotificationCommand
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_0
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_1
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_36:
        INC       DPTR
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function zclGp_SendGpNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_1
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zclGp_SendGpNotificationCommand
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_6
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-6
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_7
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-6
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclGp_SendGpNotificationCommand
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_0
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-6
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_1
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-6
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73
//  574 /*********************************************************************
//  575  * @fn      zclGp_SendGpProxyTableResponse
//  576  *
//  577  * @brief   Send the Green Power Proxy Table Response to a device
//  578  *
//  579  * @param   dstAddr - where to send the request
//  580  * @param   groupID - pointer to the group structure
//  581  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  582  *          string data type, so the first byte is the length of the
//  583  *          name (in bytes), then the name.
//  584  *
//  585  * @return  ZStatus_t
//  586  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  587 ZStatus_t zclGp_SendGpProxyTableResponse( afAddrType_t *dstAddr, zclGpProxyTableResponse_t *rsp, 
zclGp_SendGpProxyTableResponse:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function zclGp_SendGpProxyTableResponse
        CODE
//  588                                           uint8 seqNum )
//  589 {
        FUNCALL zclGp_SendGpProxyTableResponse, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpProxyTableResponse, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpProxyTableResponse, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpProxyTableResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGp_SendGpProxyTableResponse, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V11,R1
//  590   uint8 *buf = NULL;
//  591   uint8 *pBuf = NULL;
//  592   uint8 *pEntry = NULL;
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
//  593   
//  594   ZStatus_t status;
//  595   uint16 entryLen = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  596   uint16 len;
//  597   
//  598   if ( rsp->proxyTableEntry != NULL )
        MOV       A,R6
        ADD       A,#0x4
        MOV       ?V6,A
        CLR       A
        ADDC      A,R7
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_75:
        JZ        ??zclGp_SendGpProxyTableResponse_0
//  599   {
//  600     pEntry = rsp->proxyTableEntry;
        MOV       ?V2,R0
        MOV       ?V3,R1
//  601     zcl_memcpy( &entryLen, pEntry, sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  602     pEntry += sizeof ( uint16 );
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V2,A
        JNC       ??zclGp_SendGpProxyTableResponse_0
        INC       ?V3
//  603   }
//  604   
//  605   len = entryLen + 4;
??zclGp_SendGpProxyTableResponse_0:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#0x4
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V5,A
//  606 
//  607   buf = zcl_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V4
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  608   if ( buf )
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zclGp_SendGpProxyTableResponse_1 & 0xFFFF
//  609   {
//  610     pBuf = buf;
//  611     *pBuf++ = rsp->status;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine21 & 0xFFFF
//  612     *pBuf++ = rsp->tableEntriesTotal;
??CrossCallReturnLabel_17:
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL     ?Subroutine21 & 0xFFFF
//  613     *pBuf++ = rsp->startIndex;
??CrossCallReturnLabel_18:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_46:
        INC       DPTR
        LCALL     ?Subroutine21 & 0xFFFF
//  614     *pBuf++ = rsp->entriesCount;
??CrossCallReturnLabel_19:
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_47:
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  615     if ( rsp->proxyTableEntry != NULL )
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_76:
        JZ        ??zclGp_SendGpProxyTableResponse_2
//  616     {
//  617       zcl_memcpy( pBuf, pEntry, entryLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,?V2
        MOV       ?V9,?V3
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R2
        ADD       A,#0x4
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  618     }
//  619 
//  620     status = zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_GREEN_POWER,
//  621                               COMMAND_GP_PROXY_TABLE_RESPONSE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  622                               TRUE, 0, seqNum, len, buf );
??zclGp_SendGpProxyTableResponse_2:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,?V11
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0xb
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x21
        MOV       R5,#0x0
        MOV       R2,?V12
        MOV       R3,?V13
        MOV       R1,#-0xe
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       R6,A
//  623     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGp_SendGpProxyTableResponse_3
//  624   }
//  625   else
//  626     status = ZMemError;
??zclGp_SendGpProxyTableResponse_1:
        MOV       R6,#0x10
//  627 
//  628   return ( status );
??zclGp_SendGpProxyTableResponse_3:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x2
        LJMP      ?Subroutine2 & 0xFFFF
//  629 }
          CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function zclGp_SendGpProxyTableResponse
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        INC       DPTR
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function zclGp_SendGpProxyTableResponse
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
//  630 
//  631  /*********************************************************************
//  632  * @fn          gp_addPairedSinksToMsgQueue
//  633  *
//  634  * @brief       General function to add Notification Msg to Queue for all 
//  635  *              Sinks paired to the given GPD
//  636  *
//  637  * @param       nvIndex - NV Id of proxy table
//  638  *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
//  639  *
//  640  * @return      
//  641  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  642 static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg )
gp_addPairedSinksToMsgQueue:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function gp_addPairedSinksToMsgQueue
        CODE
//  643 {
        FUNCALL gp_addPairedSinksToMsgQueue, gp_getProxyTableByIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 105, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, gp_AddNotificationMsgNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 105, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, gp_AddNotificationMsgNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 105, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, gp_AddNotificationMsgNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 105, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 108, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 108, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_addPairedSinksToMsgQueue, gp_AddNotificationMsgNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 105, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 105, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 87
        MOV       A,#-0x57
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
        MOV       ?V3,R1
        MOV       ?V8,R4
        MOV       ?V9,R5
//  644   uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV       A,#0x4d
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  645   uint8 status;
//  646   uint8 i;
//  647   uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x41
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  648   afAddrType_t dstAddr = {0};
        MOV       DPTR,#`?<Constant {{0}}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  649   gpNotificationMsg_t *pNotificationMsgCurr = NULL;
//  650 
//  651     
//  652   for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
        MOV       R6,#0x0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,A
//  653   {
//  654     status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
??gp_addPairedSinksToMsgQueue_0:
        ; Setup parameters for call to function gp_getProxyTableByIndex
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,#0x3
        MOV       R3,A
        LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
        MOV       A,R1
        MOV       R7,A
//  655 
//  656     if ( status == NV_OPER_FAILED )
        MOV       A,#0xa
        XRL       A,R7
        JNZ       $+5
        LJMP      ??gp_addPairedSinksToMsgQueue_1 & 0xFFFF
//  657     {
//  658       break;
//  659     }
//  660     
//  661     // if the entry is empty
//  662     if ( status == NV_INVALID_DATA )
        MOV       A,#0xd
        XRL       A,R7
        JNZ       ??gp_addPairedSinksToMsgQueue_2
//  663     {
//  664       if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
        MOV       A,R6
        CLR       C
        SUBB      A,#0x5
        JC        ??gp_addPairedSinksToMsgQueue_3
        LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
//  665       {
//  666         return status;
//  667       }
//  668       continue;
//  669     }
//  670     
//  671     if ( PROXY_TBL_COMP_APPLICTION_ID( appId, currEntry[PROXY_TBL_ENTRY_OPT] ) )
??gp_addPairedSinksToMsgQueue_2:
        MOV       A,#0x7
        ANL       A,?V3
        MOV       R0,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,R0
        JNZ       ??gp_addPairedSinksToMsgQueue_3
//  672     {
//  673       if ( appId == GP_OPT_APP_ID_GPD )
        MOV       A,?V3
        JNZ       ??gp_addPairedSinksToMsgQueue_5
//  674       {
//  675         if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
        MOV       A,R1
        JNZ       ??gp_addPairedSinksToMsgQueue_1
        SJMP      ??gp_addPairedSinksToMsgQueue_3
//  676         {
//  677           // Entry found
//  678           break;
//  679         }
//  680       }
//  681       else if ( appId == GP_OPT_APP_ID_IEEE )
??gp_addPairedSinksToMsgQueue_5:
        MOV       A,#0x2
        XRL       A,?V3
        JNZ       ??gp_addPairedSinksToMsgQueue_3
//  682       {
//  683         if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
        MOV       A,R1
        JNZ       ??gp_addPairedSinksToMsgQueue_1
//  684         {
//  685           // Entry found
//  686           break;
//  687         }
//  688       }
//  689     }
//  690   }
??gp_addPairedSinksToMsgQueue_3:
        INC       R6
        MOV       A,R6
        CLR       C
        SUBB      A,#0x6
        JNC       $+5
        LJMP      ??gp_addPairedSinksToMsgQueue_0 & 0xFFFF
//  691   
//  692   dstAddr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
??gp_addPairedSinksToMsgQueue_1:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
//  693   dstAddr.panId = _NIB.nwkPanId;
??CrossCallReturnLabel_80:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
//  694   
//  695   if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
??CrossCallReturnLabel_54:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JC        $+5
        LJMP      ??gp_addPairedSinksToMsgQueue_6 & 0xFFFF
//  696   {
//  697     dstAddr.addrMode = afAddr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  698     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
        MOV       A,#0x4d
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
        MOV       A,R1
        JNZ       ??gp_addPairedSinksToMsgQueue_7
//  699     {
//  700       osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
//  701       
//  702       pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
        ; Setup parameters for call to function gp_AddNotificationMsgNode
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R2,#pNotificationMsgHead & 0xff
        MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
        LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R4,?V4
        MOV       R5,?V5
//  703       if ( pNotificationMsgCurr != NULL )
        MOV       A,R4
        ORL       A,R5
        JZ        ??gp_addPairedSinksToMsgQueue_7
//  704       {
//  705         pNotificationMsgCurr->addr = dstAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  706       }
//  707     }
//  708     if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
??gp_addPairedSinksToMsgQueue_7:
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x38
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
        MOV       A,R1
        JNZ       ??gp_addPairedSinksToMsgQueue_6
//  709     {
//  710       osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );   
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x40
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
//  711       
//  712       pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
        ; Setup parameters for call to function gp_AddNotificationMsgNode
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R2,#pNotificationMsgHead & 0xff
        MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
        LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
//  713       if ( pNotificationMsgCurr != NULL )
        MOV       A,R4
        ORL       A,R5
        JZ        ??gp_addPairedSinksToMsgQueue_6
//  714       {
//  715         pNotificationMsgCurr->addr = dstAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  716       }
//  717     }
//  718   }
//  719      
//  720   if ( PROXY_TBL_GET_DGROUP( currEntry[PROXY_TBL_ENTRY_OPT] ) || PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
??gp_addPairedSinksToMsgQueue_6:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JC        ??gp_addPairedSinksToMsgQueue_8
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
//  721   {
//  722     dstAddr.addrMode = afAddrGroup;
??gp_addPairedSinksToMsgQueue_8:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  723     if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
        MOV       A,#0x42
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??gp_addPairedSinksToMsgQueue_9
//  724     {
//  725       osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );   
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x43
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
//  726       
//  727       pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
        ; Setup parameters for call to function gp_AddNotificationMsgNode
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R2,#pNotificationMsgHead & 0xff
        MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
        LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
//  728       if ( pNotificationMsgCurr != NULL )
        MOV       A,R4
        ORL       A,R5
        JZ        ??gp_addPairedSinksToMsgQueue_9
//  729       {
//  730         pNotificationMsgCurr->addr = dstAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  731       }
//  732     }
//  733     if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
??gp_addPairedSinksToMsgQueue_9:
        MOV       A,#0x42
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??gp_addPairedSinksToMsgQueue_4
//  734     {
//  735       osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );   
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x47
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 108)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 105)
//  736       
//  737       pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
        ; Setup parameters for call to function gp_AddNotificationMsgNode
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R2,#pNotificationMsgHead & 0xff
        MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
        LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
//  738       if ( pNotificationMsgCurr != NULL )
        MOV       A,R4
        ORL       A,R5
        JZ        ??gp_addPairedSinksToMsgQueue_4
//  739       {
//  740         pNotificationMsgCurr->addr = dstAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  741       }
//  742     }
//  743   }
//  744 
//  745   return status;
??gp_addPairedSinksToMsgQueue_4:
        MOV       A,R7
        MOV       R1,A
        MOV       A,#0x57
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//  746 }
          CFI EndBlock cfiBlock87

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{0}}>`:
        DATA16
        DW 0
        DB 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0
//  747 
//  748 /*********************************************************************
//  749  * @fn      gp_CreateNotificationMsgList
//  750  *
//  751  * @brief   Create Notification Msg List for paired sinks if empty
//  752  *
//  753  * @param   pHead - pointer to a pointer of the list head
//  754  *
//  755  * @return  none
//  756  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  757 void gp_CreateNotificationMsgList( gpNotificationMsg_t **pHead )
gp_CreateNotificationMsgList:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function gp_CreateNotificationMsgList
        CODE
//  758 {
        FUNCALL gp_CreateNotificationMsgList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine5 & 0xFFFF
//  759 
//  760   // Create the list if empty
//  761   if ( *pHead == NULL )
??CrossCallReturnLabel_65:
        JNZ       ??gp_CreateNotificationMsgList_0
//  762   {
//  763     *pHead = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        LCALL     ?Subroutine20 & 0xFFFF
//  764     
//  765     if ( *pHead != NULL )
??CrossCallReturnLabel_58:
        MOV       A,R0
        ORL       A,R1
        JZ        ??gp_CreateNotificationMsgList_0
//  766     {
//  767       (*pHead)->pNext = NULL;
        MOV       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  768     }
//  769   }
//  770   return;
??gp_CreateNotificationMsgList_0:
          CFI EndBlock cfiBlock88
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  771 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock89
//  772 
//  773 /*********************************************************************
//  774  * @fn      gp_CreateCmdPayloadMsgList
//  775  *
//  776  * @brief   Create Notification Msg List for paired sinks if empty
//  777  *
//  778  * @param   pHead - pointer to a pointer of the list head
//  779  *
//  780  * @return  none
//  781  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  782 void gp_CreateCmdPayloadMsgList( gpCmdPayloadMsg_t **pHead )
gp_CreateCmdPayloadMsgList:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function gp_CreateCmdPayloadMsgList
        CODE
//  783 {
        FUNCALL gp_CreateCmdPayloadMsgList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine5 & 0xFFFF
//  784 
//  785   // Create the list if empty
//  786   if ( *pHead == NULL )
??CrossCallReturnLabel_66:
        JNZ       ??gp_CreateCmdPayloadMsgList_0
//  787   {
//  788     *pHead = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        LCALL     ?Subroutine20 & 0xFFFF
//  789     ( ( gpCmdPayloadMsg_t* )*pHead )->pMsg = NULL;
??CrossCallReturnLabel_59:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  790     
//  791     if ( *pHead != NULL )
        MOV       A,R0
        ORL       A,R1
        JZ        ??gp_CreateCmdPayloadMsgList_0
//  792     {
//  793       (*pHead)->pNext = NULL;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  794     }
//  795   }
//  796   return;
??gp_CreateCmdPayloadMsgList_0:
        SJMP      ?Subroutine3
//  797 }
          CFI EndBlock cfiBlock90
//  798 
//  799 /*********************************************************************
//  800  * @fn      gp_AddNotificationMsgNode
//  801  *
//  802  * @brief   Add node to Notification Msg list
//  803  *
//  804  * @param   pHead - pointer to a pointer of the list head
//  805  *
//  806  * @return  pointer to new node
//  807  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  808 gpNotificationMsg_t* gp_AddNotificationMsgNode( gpNotificationMsg_t **pHead, gpCmdPayloadMsg_t *pMsg )
gp_AddNotificationMsgNode:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function gp_AddNotificationMsgNode
        CODE
//  809 {
        FUNCALL gp_AddNotificationMsgNode, gp_CreateNotificationMsgList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_AddNotificationMsgNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  810   gpNotificationMsg_t **pCurr;
//  811   
//  812     // Create respondent list if empty
//  813   if ( *pHead == NULL )
        LCALL     ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_77:
        JNZ       ??gp_AddNotificationMsgNode_0
//  814   {
//  815     gp_CreateNotificationMsgList( pHead );
        ; Setup parameters for call to function gp_CreateNotificationMsgList
        LCALL     `??gp_CreateNotificationMsgList::?relay`; Banked call to: gp_CreateNotificationMsgList
//  816     ( ( gpNotificationMsg_t* ) *pHead )->pMsg = ( uint8* )pMsg;
        SJMP      ??gp_AddNotificationMsgNode_1
//  817     return *pHead;
//  818   }
//  819   
//  820   pCurr = &((*pHead)->pNext);
??gp_AddNotificationMsgNode_0:
        MOV       A,R0
        ADD       A,#0xf
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        SJMP      ??gp_AddNotificationMsgNode_2
//  821   
//  822   while ( *pCurr != NULL )
//  823   {
//  824     pCurr = &((*pCurr)->pNext);
??gp_AddNotificationMsgNode_3:
        MOV       A,R0
        ADD       A,#0xf
        JNC       ??gp_AddNotificationMsgNode_4
        INC       R1
??gp_AddNotificationMsgNode_4:
        MOV       R6,A
        MOV       A,R1
//  825   }
??gp_AddNotificationMsgNode_2:
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_68:
        JNZ       ??gp_AddNotificationMsgNode_3
//  826 
//  827   *pCurr = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        LCALL     ??Subroutine33_0 & 0xFFFF
//  828     
//  829   if ( (*pCurr)->pNext != NULL )
??CrossCallReturnLabel_55:
        MOV       A,R0
        ADD       A,#0xf
        MOV       R0,A
        JNC       ??gp_AddNotificationMsgNode_5
        INC       R1
??gp_AddNotificationMsgNode_5:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_63:
        JZ        ??gp_AddNotificationMsgNode_1
//  830   {
//  831     (*pCurr)->pNext = NULL;
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  832   }
//  833   ( ( gpNotificationMsg_t* ) *pCurr )->pMsg = ( uint8* )pMsg;
??gp_AddNotificationMsgNode_1:
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV       A,R2
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  834   return *pCurr;
        LJMP      ?Subroutine0 & 0xFFFF
//  835 }
          CFI EndBlock cfiBlock91

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function gp_CreateNotificationMsgList
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function gp_AddNotificationMsgNode
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function gp_NotificationMsgClean
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function gp_CreateNotificationMsgList
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function zclGp_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function gp_addPairedSinksToMsgQueue
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 105)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function gp_AddNotificationMsgNode
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function gp_NotificationMsgClean
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function gp_CreateNotificationMsgList
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function gp_AddNotificationMsgNode
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        MOV       DPL,R0
        MOV       DPH,R1
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function zclGp_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zclGp_RegisterCmdCallbacks
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function gp_AddNotificationMsgNode
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122
//  836 
//  837 /*********************************************************************
//  838  * @fn      gp_AddCmdPayloadMsgNode
//  839  *
//  840  * @brief   Add node to Notification Msg list
//  841  *
//  842  * @param   pHead - pointer to a pointer of the list head
//  843  *
//  844  * @return  pointer to new node
//  845  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  846 gpCmdPayloadMsg_t* gp_AddCmdPayloadMsgNode( gpCmdPayloadMsg_t **pHead, uint8* pBuf, uint8 len )
gp_AddCmdPayloadMsgNode:
          CFI Block cfiBlock123 Using cfiCommon0
          CFI Function gp_AddCmdPayloadMsgNode
        CODE
//  847 {
        FUNCALL gp_AddCmdPayloadMsgNode, gp_CreateCmdPayloadMsgList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_AddCmdPayloadMsgNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,R1
//  848   gpCmdPayloadMsg_t **pCurr;
//  849   
//  850     // Create respondent list if empty
//  851   if ( *pHead == NULL )
        LCALL     ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_78:
        JNZ       ??gp_AddCmdPayloadMsgNode_0
//  852   {
//  853     gp_CreateCmdPayloadMsgList( pHead );
        ; Setup parameters for call to function gp_CreateCmdPayloadMsgList
        LCALL     `??gp_CreateCmdPayloadMsgList::?relay`; Banked call to: gp_CreateCmdPayloadMsgList
//  854     
//  855     if ( pHead != NULL )
        MOV       A,R6
        ORL       A,R7
        JZ        ??gp_AddCmdPayloadMsgNode_1
//  856     {
//  857       ( ( ( gpCmdPayloadMsg_t* ) *pHead )->lenght ) = len;
        LCALL     ?Subroutine11 & 0xFFFF
//  858       ( ( ( gpCmdPayloadMsg_t* ) *pHead )->pMsg ) = ( uint8* )pBuf;
//  859     }
??CrossCallReturnLabel_4:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  860     return *pHead;
??gp_AddCmdPayloadMsgNode_1:
        LCALL     ?Subroutine13 & 0xFFFF
//  861   }
??CrossCallReturnLabel_96:
        SJMP      ??gp_AddCmdPayloadMsgNode_2
//  862   
//  863   pCurr = &((*pHead)->pNext);
//  864   
//  865   while ( *pCurr != NULL )
//  866   {
//  867     pCurr = &((*pCurr)->pNext);
??gp_AddCmdPayloadMsgNode_0:
        MOV       A,R0
        ADD       A,#0x4
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        LCALL     ??Subroutine36_0 & 0xFFFF
//  868   }
??CrossCallReturnLabel_69:
        JNZ       ??gp_AddCmdPayloadMsgNode_0
//  869 
//  870   *pCurr = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
        LCALL     ??Subroutine33_0 & 0xFFFF
//  871     
//  872   if ( (*pCurr)->pNext != NULL )
??CrossCallReturnLabel_56:
        MOV       A,R0
        ADD       A,#0x4
        MOV       R0,A
        JNC       ??gp_AddCmdPayloadMsgNode_3
        INC       R1
??gp_AddCmdPayloadMsgNode_3:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ        ??gp_AddCmdPayloadMsgNode_4
//  873   {
//  874     (*pCurr)->pNext = NULL;
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  875   }
//  876   ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->lenght ) = len;
??gp_AddCmdPayloadMsgNode_4:
        LCALL     ?Subroutine11 & 0xFFFF
//  877   ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg ) = ( uint8* )pBuf;
??CrossCallReturnLabel_5:
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  878   
//  879   return *pCurr;
??gp_AddCmdPayloadMsgNode_2:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  880 }
          CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function gp_AddCmdPayloadMsgNode
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_32:
        INC       DPTR
        MOV       A,?V2
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_4
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_5
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function gp_CreateNotificationMsgList
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function gp_NotificationMsgClean
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function gp_AddNotificationMsgNode
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function gp_CreateNotificationMsgList
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function gp_NotificationMsgClean
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOV       R7,A
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function gp_AddNotificationMsgNode
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function gp_AddNotificationMsgNode
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function gp_CreateNotificationMsgList
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function gp_NotificationMsgClean
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function zclGp_HdlIncoming
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function gp_AddNotificationMsgNode
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function gp_AddNotificationMsgNode
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function gp_CreateNotificationMsgList
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function gp_NotificationMsgClean
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker163 Using cfiCommon1
          CFI (cfiPicker163) NoFunction
          CFI (cfiPicker163) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiPicker163

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond164 Using cfiCommon0
          CFI Function zclGp_ProcessInProxyBasic
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_10
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_11
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_31
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_4
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-6
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_5
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-6
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function gp_CreateNotificationMsgList
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_65
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-4
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function gp_CreateCmdPayloadMsgList
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_66
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-4
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function gp_NotificationMsgClean
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_67
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-4
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function gp_AddNotificationMsgNode
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_68
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-4
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_69
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-4
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function gp_AddNotificationMsgNode
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_77
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_78
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zclGp_HdlIncoming
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_70
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_71
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_72
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_73
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_74
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zclGp_SendGpProxyTableResponse
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function gp_NotificationMsgClean
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_79
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-4
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function gp_addPairedSinksToMsgQueue
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_80
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-4
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 105)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zclGp_HdlIncoming
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_81
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-4
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_82
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_83
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-4
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function gp_NotificationMsgClean
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_84
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function gp_CmdPayloadMsgClean
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_85
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192
//  881 
//  882 /*********************************************************************
//  883  * @fn      gp_GetHeadNotificationMsg
//  884  *
//  885  * @brief   Returns head pointer for  finding and binding respondent list
//  886  *
//  887  * @param   none
//  888  *
//  889  * @return  pointer to head
//  890  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  891 gpNotificationMsg_t* gp_GetHeadNotificationMsg(void)
gp_GetHeadNotificationMsg:
          CFI Block cfiBlock193 Using cfiCommon0
          CFI Function gp_GetHeadNotificationMsg
        CODE
//  892 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  893   return ( pNotificationMsgHead );
        MOV       DPTR,#pNotificationMsgHead
          CFI EndBlock cfiBlock193
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  894 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock194 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_94:
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock194
//  895 
//  896 /*********************************************************************
//  897  * @fn      gp_GetPHeadNotification
//  898  *
//  899  * @brief   Returns head pointer for  finding and binding respondent list
//  900  *
//  901  * @param   none
//  902  *
//  903  * @return  pointer to head
//  904  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  905 gpNotificationMsg_t** gp_GetPHeadNotification(void)
gp_GetPHeadNotification:
          CFI Block cfiBlock195 Using cfiCommon0
          CFI Function gp_GetPHeadNotification
        CODE
//  906 {
        ; Saved register size: 0
        ; Auto size: 0
//  907   return ( &pNotificationMsgHead );
        MOV       R2,#pNotificationMsgHead & 0xff
        MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
        LJMP      ?BRET
//  908 }
          CFI EndBlock cfiBlock195
//  909 
//  910 /*********************************************************************
//  911  * @fn      gp_GetHeadCmdPayloadMsg
//  912  *
//  913  * @brief   Returns head pointer for  finding and binding respondent list
//  914  *
//  915  * @param   none
//  916  *
//  917  * @return  pointer to head
//  918  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  919 gpCmdPayloadMsg_t* gp_GetHeadCmdPayloadMsg(void)
gp_GetHeadCmdPayloadMsg:
          CFI Block cfiBlock196 Using cfiCommon0
          CFI Function gp_GetHeadCmdPayloadMsg
        CODE
//  920 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  921   return ( pCmdPayloadMsgHead );
        MOV       DPTR,#pCmdPayloadMsgHead
        SJMP      ?Subroutine4
//  922 }
          CFI EndBlock cfiBlock196
//  923 
//  924 /*********************************************************************
//  925  * @fn      gp_GetHeadCmdPayloadMsg
//  926  *
//  927  * @brief   Returns head pointer for  finding and binding respondent list
//  928  *
//  929  * @param   none
//  930  *
//  931  * @return  pointer to head
//  932  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  933 gpCmdPayloadMsg_t** gp_GetPHeadCmdPayload(void)
gp_GetPHeadCmdPayload:
          CFI Block cfiBlock197 Using cfiCommon0
          CFI Function gp_GetPHeadCmdPayload
        CODE
//  934 {
        ; Saved register size: 0
        ; Auto size: 0
//  935   return ( &pCmdPayloadMsgHead );
        MOV       R2,#pCmdPayloadMsgHead & 0xff
        MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
        LJMP      ?BRET
//  936 }
          CFI EndBlock cfiBlock197
//  937 
//  938 /*********************************************************************
//  939  * @fn      gp_NotificationMsgClean
//  940  *
//  941  * @brief   This function free reserved memory for respondent list
//  942  *
//  943  * @param   pHead - begin of the Notification Msg list
//  944  *
//  945  * @return  status
//  946  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  947 void gp_NotificationMsgClean( gpNotificationMsg_t **pHead )
gp_NotificationMsgClean:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function gp_NotificationMsgClean
        CODE
//  948 {
        FUNCALL gp_NotificationMsgClean, gp_CmdPayloadMsgClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_NotificationMsgClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL     ?Subroutine5 & 0xFFFF
//  949   gpNotificationMsg_t **pCurr;
//  950   gpNotificationMsg_t **pNext;
//  951   
//  952   if ( *pHead == NULL )
??CrossCallReturnLabel_67:
        JZ        ??CrossCallReturnLabel_57
//  953   {
//  954     return;
//  955   }
//  956   
//  957   pCurr = pHead;
        MOV       ?V0,R6
        MOV       ?V1,R7
//  958   
//  959   if( *pCurr != NULL )
        MOV       A,R0
        ORL       A,R1
        JZ        ??gp_NotificationMsgClean_0
//  960   {
//  961     pNext = &((*pCurr)->pNext);
        MOV       A,R0
        ADD       A,#0xf
        MOV       ?V2,A
        CLR       A
        ADDC      A,R1
        MOV       ?V3,A
//  962     if ( ( ( gpNotificationMsg_t* ) *pCurr )->pMsg != ( ( gpNotificationMsg_t* ) *pNext )->pMsg )
        MOV       A,R0
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_87:
        XCH       A,R0
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??gp_NotificationMsgClean_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??gp_NotificationMsgClean_1:
        JZ        ??gp_NotificationMsgClean_2
//  963     {
//  964       gp_CmdPayloadMsgClean( gp_GetPHeadCmdPayload( ) );
        ; Setup parameters for call to function gp_CmdPayloadMsgClean
        MOV       R2,#pCmdPayloadMsgHead & 0xff
        MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
        LCALL     `??gp_CmdPayloadMsgClean::?relay`; Banked call to: gp_CmdPayloadMsgClean
//  965     }
//  966     osal_mem_free( *pCurr );
??gp_NotificationMsgClean_2:
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  967     *pCurr = ( gpNotificationMsg_t* )NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  968     pCurr = pNext;
        MOV       ?V0,?V2
        MOV       ?V1,?V3
//  969   }
//  970   *pHead = *pCurr;
??gp_NotificationMsgClean_0:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL     ??Subroutine33_0 & 0xFFFF
//  971 }
??CrossCallReturnLabel_57:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock198
//  972 
//  973 /*********************************************************************
//  974  * @fn      gp_NotificationMsgClean
//  975  *
//  976  * @brief   This function free reserved memory for respondent list
//  977  *
//  978  * @param   pHead - begin of the Notification Msg list
//  979  *
//  980  * @return
//  981  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  982 void gp_CmdPayloadMsgClean( gpCmdPayloadMsg_t **pHead )
gp_CmdPayloadMsgClean:
          CFI Block cfiBlock199 Using cfiCommon0
          CFI Function gp_CmdPayloadMsgClean
        CODE
//  983 {
        FUNCALL gp_CmdPayloadMsgClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL gp_CmdPayloadMsgClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  984   gpCmdPayloadMsg_t **pCurr;
//  985   gpCmdPayloadMsg_t **pNext;
//  986   
//  987   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??gp_CmdPayloadMsgClean_0
//  988   {
//  989     return;
//  990   }
//  991   
//  992   pCurr = pHead;
//  993   
//  994   if( *pCurr != NULL )
//  995   {
//  996     pNext = &((*pCurr)->pNext);
//  997     osal_mem_free ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg );
        ; Setup parameters for call to function osal_mem_free
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  998     ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg = NULL;
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  999     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1000     *pCurr = ( gpCmdPayloadMsg_t* )NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1001     pCurr = pNext;
// 1002   }
// 1003   pHead = pCurr;
// 1004 }
??gp_CmdPayloadMsgClean_0:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock199

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond200 Using cfiCommon0
          CFI Function zclGp_SendGpCommissioningNotificationCommand
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function gp_addPairedSinksToMsgQueue
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 105)
          CFI Block cfiPicker202 Using cfiCommon1
          CFI (cfiPicker202) NoFunction
          CFI (cfiPicker202) Picker
        MOV       A,#-0xe
        MOVX      @DPTR,A
        MOV       DPTR,#_NIB + 33
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiPicker202
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond203 Using cfiCommon0
          CFI Function zclGp_HdlIncoming
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function zclGp_ProcessInProxyBasic
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function gp_NotificationMsgClean
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function gp_CmdPayloadMsgClean
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zclGp_SendGpCommissioningNotificationCommand
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function gp_addPairedSinksToMsgQueue
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 105)
          CFI Block cfiPicker210 Using cfiCommon1
          CFI (cfiPicker210) NoFunction
          CFI (cfiPicker210) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiPicker210

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function gp_AddNotificationMsgNode
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function gp_NotificationMsgClean
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function gp_CmdPayloadMsgClean
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker215 Using cfiCommon1
          CFI (cfiPicker215) NoFunction
          CFI (cfiPicker215) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiPicker215
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond216 Using cfiCommon0
          CFI Function gp_GetHeadNotificationMsg
          CFI Conditional ??CrossCallReturnLabel_94
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function gp_GetHeadCmdPayloadMsg
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond217) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond217) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond217) CFA_SP SP+-7
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function gp_NotificationMsgClean
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function gp_CmdPayloadMsgClean
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function gp_AddNotificationMsgNode
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function gp_AddCmdPayloadMsgNode
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function gp_NotificationMsgClean
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function gp_CmdPayloadMsgClean
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224
// 1005 
// 1006 /*********************************************************************
// 1007  * @fn      gp_ResetProxyBasicTblEntry
// 1008  *
// 1009  * @brief   This function removes data of the given entry
// 1010  *
// 1011  * @param   pHead - begin of the Notification Msg list
// 1012  *
// 1013  * @return
// 1014  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1015 void gp_ResetProxyBasicTblEntry( uint8* entry )
gp_ResetProxyBasicTblEntry:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI Function gp_ResetProxyBasicTblEntry
        CODE
// 1016 {
        FUNCALL gp_ResetProxyBasicTblEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 65
        MOV       A,#-0x41
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1017   uint8 emptyEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x41
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1018   
// 1019   osal_memcpy( entry, emptyEntry, PROXY_TBL_ENTRY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       R4,#0x41
        MOV       R5,#0x0
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
// 1020 }
        MOV       A,#0x41
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock225

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_RegisterCmdCallbacks::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_RegisterCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_HdlIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_HdlIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_ProcessInProxyBasic::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_ProcessInProxyBasic

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_SendGpNotificationCommand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_SendGpNotificationCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_SendGpCommissioningNotificationCommand:`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_SendGpCommissioningNotificationCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGp_SendGpProxyTableResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGp_SendGpProxyTableResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_addPairedSinksToMsgQueue::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_addPairedSinksToMsgQueue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CreateNotificationMsgList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CreateNotificationMsgList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CreateCmdPayloadMsgList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CreateCmdPayloadMsgList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_AddNotificationMsgNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_AddNotificationMsgNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_AddCmdPayloadMsgNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_AddCmdPayloadMsgNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_GetHeadNotificationMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_GetHeadNotificationMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_GetPHeadNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_GetPHeadNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_GetHeadCmdPayloadMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_GetHeadCmdPayloadMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_GetPHeadCmdPayload::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_GetPHeadCmdPayload

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_NotificationMsgClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_NotificationMsgClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_CmdPayloadMsgClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_CmdPayloadMsgClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ResetProxyBasicTblEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ResetProxyBasicTblEntry

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 0
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 0
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        END
// 1021 
// 1022 #endif
// 1023 /***************************************************************************
// 1024 ****************************************************************************/
// 
// 3 876 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//   156 bytes in segment XDATA_ROM_C
//     7 bytes in segment XDATA_Z
// 
//   108 bytes of CODE     memory
//   152 bytes of CONST    memory (+ 4 bytes shared)
// 3 876 bytes of HUGECODE memory
//     7 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
