###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               19/Dec/2017  10:07:53
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f C:\Users\sam\AppData\Local\Temp\EW6372.tmp
#        ("C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Components\stack\GP\gp_proxyTbl.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS -lC
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\" -I
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\Source\" -I
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\Source\" -I
#        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\target\QC_CC2530\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List\gp_proxyTbl.lst
#    Object file        =  
#        C:\Users\sam\Documents\GitHub\ti\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj\gp_proxyTbl.r51
#
###############################################################################

C:\Users\sam\Documents\GitHub\ti\Z-Stack 3.0.1\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"   
     49          #include "ZComDef.h"
     50          #include "cGP_stub.h"
     51          #include "gp_common.h"
     52          #include "gp_interface.h"
     53          #include "zcl_green_power.h"
     54          #include "OSAL.h"
     55          
     56          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     57             
     58           /*********************************************************************
     59           * MACROS
     60           */ 
     61          
     62           /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69             
     70           /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     74          
     75           /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */
     86          
     87           /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     91          static uint8 pt_getAlias( uint8* pNew );
     92          static uint8 pt_getSecurity( uint8* pNew );
     93          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
     94          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     95          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     96          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     97          
     98          /*********************************************************************
     99           * PUBLIC FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn          pt_ZclReadGetProxyEntry
    104           *
    105           * @brief       Populate the given item data
    106           *
    107           * @param       nvId - NV entry to read
    108           *              pData - Pointer to OTA message payload
    109           *              len - Lenght of the payload
    110           *
    111           * @return
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 146
   \   000005   746E         MOV       A,#0x6e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V12,R4
   \   00000C   8D..         MOV       ?V13,R5
    115            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   7488         MOV       A,#-0x78
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    116            uint8  currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   00001E   7406         MOV       A,#0x6
   \   000020   12....       LCALL     ?XSTACK_DISP102_8
   \   000023   7441         MOV       A,#0x41
   \   000025   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    117            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000028   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   00002B   7441         MOV       A,#0x41
   \   00002D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    118            uint8  gpdEntryLen = 0;
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   F0           MOVX      @DPTR,A
    119            uint8  status;
    120            uint16 options;
    121          
    122            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   000037                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?XSTACK_DISP102_8
   \   00003C   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003F   E9           MOV       A,R1
   \   000040   FE           MOV       R6,A
    123          
    124            // if FAIL or Empty
    125            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \   000041   740A         MOV       A,#0xa
   \   000043   6E           XRL       A,R6
   \   000044   6005         JZ        ??pt_ZclReadGetProxyEntry_0
   \   000046   740D         MOV       A,#0xd
   \   000048   6E           XRL       A,R6
   \   000049   7003         JNZ       ??pt_ZclReadGetProxyEntry_1
    126            {
    127              // FAIL
    128              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   00004B   02....       LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    129            }
    130          
    131            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   00004E   7406         MOV       A,#0x6
   \   000050   12....       LCALL     ?XSTACK_DISP100_8
   \   000053   88..         MOV       ?V0,R0
   \   000055   89..         MOV       ?V1,R1
   \   000057   75..00       MOV       ?V2,#0x0
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005F   7C02         MOV       R4,#0x2
   \   000061   7D00         MOV       R5,#0x0
   \   000063   7403         MOV       A,#0x3
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   744A         MOV       A,#0x4a
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000072   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000075   7403         MOV       A,#0x3
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
    132            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   00007A                ; Setup parameters for call to function osal_memcpy
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007F   7C02         MOV       R4,#0x2
   \   000081   7D00         MOV       R5,#0x0
   \   000083   7407         MOV       A,#0x7
   \   000085   12....       LCALL     ?XSTACK_DISP101_8
   \   000088   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008B   7403         MOV       A,#0x3
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
    133            gpdEntryLen += sizeof ( uint16 );
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   E0           MOVX      A,@DPTR
   \   000097   2402         ADD       A,#0x2
   \   000099   F0           MOVX      @DPTR,A
    134            
    135            // Options bitfield
    136            // If Application Id bitfield is 0b000
    137            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   00009A   7404         MOV       A,#0x4
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   5407         ANL       A,#0x7
   \   0000A2   F8           MOV       R0,A
   \   0000A3   7018         JNZ       ??pt_ZclReadGetProxyEntry_3
    138            {        
    139              // Populate GPD ID
    140              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0000A5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000A5   A8..         MOV       R0,?XSP + 0
   \   0000A7   A9..         MOV       R1,?XSP + 1
   \   0000A9   88..         MOV       ?V0,R0
   \   0000AB   89..         MOV       ?V1,R1
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   7449         MOV       A,#0x49
   \   0000B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B7   7904         MOV       R1,#0x4
   \   0000B9   740E         MOV       A,#0xe
   \   0000BB   8038         SJMP      ??pt_ZclReadGetProxyEntry_4
    141            }
    142            // If Application Id bitfield is 0b010
    143            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   68           XRL       A,R0
   \   0000C0   7042         JNZ       ??pt_ZclReadGetProxyEntry_5
    144            {   
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000C2                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000C2   A8..         MOV       R0,?XSP + 0
   \   0000C4   A9..         MOV       R1,?XSP + 1
   \   0000C6   88..         MOV       ?V0,R0
   \   0000C8   89..         MOV       ?V1,R1
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   7449         MOV       A,#0x49
   \   0000D1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D4   7908         MOV       R1,#0x8
   \   0000D6   740A         MOV       A,#0xa
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   AA82         MOV       R2,DPL
   \   0000DD   AB83         MOV       R3,DPH
   \   0000DF   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
    146              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000E7                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000E7   78..         MOV       R0,#?V0
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EC   7449         MOV       A,#0x49
   \   0000EE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F1   7901         MOV       R1,#0x1
   \   0000F3   7412         MOV       A,#0x12
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   AA82         MOV       R2,DPL
   \   0000FA   AB83         MOV       R3,DPH
   \   0000FC   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000FF   7402         MOV       A,#0x2
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
    147            }
    148            
    149            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   000104   7407         MOV       A,#0x7
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   A2E5         MOV       C,0xE0 /* A   */.5
   \   00010C   5025         JNC       ??pt_ZclReadGetProxyEntry_6
    150            {
    151              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   00010E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00010E   A8..         MOV       R0,?XSP + 0
   \   000110   A9..         MOV       R1,?XSP + 1
   \   000112   88..         MOV       ?V0,R0
   \   000114   89..         MOV       ?V1,R1
   \   000116   78..         MOV       R0,#?V0
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   7449         MOV       A,#0x49
   \   00011D   12....       LCALL     ?XSTACK_DISP102_8
   \   000120   7902         MOV       R1,#0x2
   \   000122   7413         MOV       A,#0x13
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   AA82         MOV       R2,DPL
   \   000129   AB83         MOV       R3,DPH
   \   00012B   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00012E   7402         MOV       A,#0x2
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
    152            }
    153            
    154            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   000133   7407         MOV       A,#0x7
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   E0           MOVX      A,@DPTR
   \   000139   A2E6         MOV       C,0xE0 /* A   */.6
   \   00013B   5025         JNC       ??pt_ZclReadGetProxyEntry_7
    155            {
    156              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   00013D                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00013D   A8..         MOV       R0,?XSP + 0
   \   00013F   A9..         MOV       R1,?XSP + 1
   \   000141   88..         MOV       ?V0,R0
   \   000143   89..         MOV       ?V1,R1
   \   000145   78..         MOV       R0,#?V0
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014A   7449         MOV       A,#0x49
   \   00014C   12....       LCALL     ?XSTACK_DISP102_8
   \   00014F   7901         MOV       R1,#0x1
   \   000151   7415         MOV       A,#0x15
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   AA82         MOV       R2,DPL
   \   000158   AB83         MOV       R3,DPH
   \   00015A   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00015D   7402         MOV       A,#0x2
   \   00015F   12....       LCALL     ?DEALLOC_XSTACK8
    157            }
    158            
    159            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   000162   7407         MOV       A,#0x7
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   E0           MOVX      A,@DPTR
   \   000168   A2E6         MOV       C,0xE0 /* A   */.6
   \   00016A   400A         JC        ??pt_ZclReadGetProxyEntry_8
   \   00016C   7406         MOV       A,#0x6
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   E0           MOVX      A,@DPTR
   \   000172   A2E5         MOV       C,0xE0 /* A   */.5
   \   000174   5025         JNC       ??pt_ZclReadGetProxyEntry_9
    160            {
    161              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   000176                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000176   A8..         MOV       R0,?XSP + 0
   \   000178   A9..         MOV       R1,?XSP + 1
   \   00017A   88..         MOV       ?V0,R0
   \   00017C   89..         MOV       ?V1,R1
   \   00017E   78..         MOV       R0,#?V0
   \   000180   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000183   7449         MOV       A,#0x49
   \   000185   12....       LCALL     ?XSTACK_DISP102_8
   \   000188   7904         MOV       R1,#0x4
   \   00018A   7416         MOV       A,#0x16
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   AA82         MOV       R2,DPL
   \   000191   AB83         MOV       R3,DPH
   \   000193   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000196   7402         MOV       A,#0x2
   \   000198   12....       LCALL     ?DEALLOC_XSTACK8
    162            }
    163            
    164            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   00019B   7407         MOV       A,#0x7
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001A3   5025         JNC       ??pt_ZclReadGetProxyEntry_10
    165            {
    166              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   0001A5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001A5   A8..         MOV       R0,?XSP + 0
   \   0001A7   A9..         MOV       R1,?XSP + 1
   \   0001A9   88..         MOV       ?V0,R0
   \   0001AB   89..         MOV       ?V1,R1
   \   0001AD   78..         MOV       R0,#?V0
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B2   7449         MOV       A,#0x49
   \   0001B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B7   7910         MOV       R1,#0x10
   \   0001B9   741A         MOV       A,#0x1a
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BE   AA82         MOV       R2,DPL
   \   0001C0   AB83         MOV       R3,DPH
   \   0001C2   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001C5   7402         MOV       A,#0x2
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
    167            }
    168            
    169            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   0001CA   7406         MOV       A,#0x6
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001D2   4003         JC        $+5
   \   0001D4   02....       LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    170            {
    171              uint8 sinkCount = 0;
   \   0001D7   7401         MOV       A,#0x1
   \   0001D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL     ?Subroutine2 & 0xFFFF
    172              uint8 sinkCountByte = gpdEntryLen;
    173              
    174              gpdEntryLen += sizeof ( sinkCountByte );
    175              
    176              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??CrossCallReturnLabel_3:
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   E582         MOV       A,DPL
   \   0001E4   28           ADD       A,R0
   \   0001E5   F5..         MOV       ?V14,A
   \   0001E7   E4           CLR       A
   \   0001E8   3583         ADDC      A,DPH
   \   0001EA   F5..         MOV       ?V15,A
   \   0001EC   7488         MOV       A,#-0x78
   \   0001EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001F1   88..         MOV       ?V0,R0
   \   0001F3   89..         MOV       ?V1,R1
   \   0001F5   7401         MOV       A,#0x1
   \   0001F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0001FA   88..         MOV       ?V4,R0
   \   0001FC   89..         MOV       ?V5,R1
   \   0001FE   75..00       MOV       ?V6,#0x0
   \   000201                ; Setup parameters for call to function osal_memcmp
   \   000201   7428         MOV       A,#0x28
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   A982         MOV       R1,DPL
   \   000208   AA83         MOV       R2,DPH
   \   00020A   89..         MOV       ?V8,R1
   \   00020C   8A..         MOV       ?V9,R2
   \   00020E   75..00       MOV       ?V10,#0x0
   \   000211   78..         MOV       R0,#?V8
   \   000213   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000216   7C0A         MOV       R4,#0xa
   \   000218   7D00         MOV       R5,#0x0
   \   00021A   A9..         MOV       R1,?V0
   \   00021C   AA..         MOV       R2,?V1
   \   00021E   AB..         MOV       R3,?V2
   \   000220   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000223   7403         MOV       A,#0x3
   \   000225   12....       LCALL     ?DEALLOC_XSTACK8
   \   000228   E9           MOV       A,R1
   \   000229   7042         JNZ       ??pt_ZclReadGetProxyEntry_12
    177              {
    178                sinkCount += 1;
   \   00022B   7401         MOV       A,#0x1
   \   00022D   12....       LCALL     ?XSTACK_DISP0_8
   \   000230   E0           MOVX      A,@DPTR
   \   000231   04           INC       A
   \   000232   F0           MOVX      @DPTR,A
    179                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   000233                ; Setup parameters for call to function osal_memcpy
   \   000233   78..         MOV       R0,#?V4
   \   000235   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000238   7C01         MOV       R4,#0x1
   \   00023A   7D00         MOV       R5,#0x0
   \   00023C   AA..         MOV       R2,?V14
   \   00023E   AB..         MOV       R3,?V15
   \   000240   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000243   7403         MOV       A,#0x3
   \   000245   12....       LCALL     ?DEALLOC_XSTACK8
    180                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000248                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000248   A8..         MOV       R0,?XSP + 0
   \   00024A   A9..         MOV       R1,?XSP + 1
   \   00024C   88..         MOV       ?V8,R0
   \   00024E   89..         MOV       ?V9,R1
   \   000250   78..         MOV       R0,#?V8
   \   000252   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000255   7449         MOV       A,#0x49
   \   000257   12....       LCALL     ?XSTACK_DISP102_8
   \   00025A   790A         MOV       R1,#0xa
   \   00025C   742A         MOV       A,#0x2a
   \   00025E   12....       LCALL     ?XSTACK_DISP0_8
   \   000261   AA82         MOV       R2,DPL
   \   000263   AB83         MOV       R3,DPH
   \   000265   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000268   7402         MOV       A,#0x2
   \   00026A   12....       LCALL     ?DEALLOC_XSTACK8
    181              }
    182              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   00026D                ; Setup parameters for call to function osal_memcmp
   \   00026D   7432         MOV       A,#0x32
   \   00026F   12....       LCALL     ?XSTACK_DISP0_8
   \   000272   A982         MOV       R1,DPL
   \   000274   AA83         MOV       R2,DPH
   \   000276   89..         MOV       ?V8,R1
   \   000278   8A..         MOV       ?V9,R2
   \   00027A   78..         MOV       R0,#?V8
   \   00027C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00027F   7C0A         MOV       R4,#0xa
   \   000281   7D00         MOV       R5,#0x0
   \   000283   A9..         MOV       R1,?V0
   \   000285   AA..         MOV       R2,?V1
   \   000287   AB..         MOV       R3,?V2
   \   000289   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00028C   7403         MOV       A,#0x3
   \   00028E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000291   E9           MOV       A,R1
   \   000292   7042         JNZ       ??pt_ZclReadGetProxyEntry_11
    183              {
    184                sinkCount += 1;
   \   000294   7401         MOV       A,#0x1
   \   000296   12....       LCALL     ?XSTACK_DISP0_8
   \   000299   E0           MOVX      A,@DPTR
   \   00029A   04           INC       A
   \   00029B   F0           MOVX      @DPTR,A
    185                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   00029C                ; Setup parameters for call to function osal_memcpy
   \   00029C   78..         MOV       R0,#?V4
   \   00029E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002A1   7C01         MOV       R4,#0x1
   \   0002A3   7D00         MOV       R5,#0x0
   \   0002A5   AA..         MOV       R2,?V14
   \   0002A7   AB..         MOV       R3,?V15
   \   0002A9   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002AC   7403         MOV       A,#0x3
   \   0002AE   12....       LCALL     ?DEALLOC_XSTACK8
    186                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0002B1                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002B1   A8..         MOV       R0,?XSP + 0
   \   0002B3   A9..         MOV       R1,?XSP + 1
   \   0002B5   88..         MOV       ?V0,R0
   \   0002B7   89..         MOV       ?V1,R1
   \   0002B9   78..         MOV       R0,#?V0
   \   0002BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BE   7449         MOV       A,#0x49
   \   0002C0   12....       LCALL     ?XSTACK_DISP102_8
   \   0002C3   790A         MOV       R1,#0xa
   \   0002C5   7434         MOV       A,#0x34
   \   0002C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CA   AA82         MOV       R2,DPL
   \   0002CC   AB83         MOV       R3,DPH
   \   0002CE   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002D1   7402         MOV       A,#0x2
   \   0002D3   12....       LCALL     ?DEALLOC_XSTACK8
    187              }
    188            }
    189               
    190            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   0002D6   7407         MOV       A,#0x7
   \   0002D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002DE   4003         JC        $+5
   \   0002E0   02....       LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    191            {
    192              uint8 groupCount = 0;
   \   0002E3   7401         MOV       A,#0x1
   \   0002E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E8   12....       LCALL     ?Subroutine2 & 0xFFFF
    193              uint8 groupCountByte = gpdEntryLen;
    194              
    195              gpdEntryLen++;
    196              
    197              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \                     ??CrossCallReturnLabel_4:
   \   0002EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EE   E582         MOV       A,DPL
   \   0002F0   28           ADD       A,R0
   \   0002F1   F5..         MOV       ?V0,A
   \   0002F3   E4           CLR       A
   \   0002F4   3583         ADDC      A,DPH
   \   0002F6   F5..         MOV       ?V1,A
   \   0002F8   7401         MOV       A,#0x1
   \   0002FA   12....       LCALL     ?XSTACK_DISP100_8
   \   0002FD   88..         MOV       ?V4,R0
   \   0002FF   89..         MOV       ?V5,R1
   \   000301   75..00       MOV       ?V6,#0x0
   \   000304   743C         MOV       A,#0x3c
   \   000306   12....       LCALL     ?XSTACK_DISP0_8
   \   000309   E0           MOVX      A,@DPTR
   \   00030A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00030C   5042         JNC       ??pt_ZclReadGetProxyEntry_14
    198              {
    199                groupCount += 1;
   \   00030E   7401         MOV       A,#0x1
   \   000310   12....       LCALL     ?XSTACK_DISP0_8
   \   000313   7401         MOV       A,#0x1
   \   000315   F0           MOVX      @DPTR,A
    200                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \   000316                ; Setup parameters for call to function osal_memcpy
   \   000316   78..         MOV       R0,#?V4
   \   000318   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00031B   7C01         MOV       R4,#0x1
   \   00031D   7D00         MOV       R5,#0x0
   \   00031F   AA..         MOV       R2,?V0
   \   000321   AB..         MOV       R3,?V1
   \   000323   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000326   7403         MOV       A,#0x3
   \   000328   12....       LCALL     ?DEALLOC_XSTACK8
    201                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   00032B                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00032B   A8..         MOV       R0,?XSP + 0
   \   00032D   A9..         MOV       R1,?XSP + 1
   \   00032F   88..         MOV       ?V2,R0
   \   000331   89..         MOV       ?V3,R1
   \   000333   78..         MOV       R0,#?V2
   \   000335   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000338   7449         MOV       A,#0x49
   \   00033A   12....       LCALL     ?XSTACK_DISP102_8
   \   00033D   7904         MOV       R1,#0x4
   \   00033F   743F         MOV       A,#0x3f
   \   000341   12....       LCALL     ?XSTACK_DISP0_8
   \   000344   AA82         MOV       R2,DPL
   \   000346   AB83         MOV       R3,DPH
   \   000348   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00034B   7402         MOV       A,#0x2
   \   00034D   12....       LCALL     ?DEALLOC_XSTACK8
    202              }
    203              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   000350   743C         MOV       A,#0x3c
   \   000352   12....       LCALL     ?XSTACK_DISP0_8
   \   000355   E0           MOVX      A,@DPTR
   \   000356   A2E1         MOV       C,0xE0 /* A   */.1
   \   000358   5042         JNC       ??pt_ZclReadGetProxyEntry_13
    204              {
    205                groupCount += 1;
   \   00035A   7401         MOV       A,#0x1
   \   00035C   12....       LCALL     ?XSTACK_DISP0_8
   \   00035F   E0           MOVX      A,@DPTR
   \   000360   04           INC       A
   \   000361   F0           MOVX      @DPTR,A
    206                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \   000362                ; Setup parameters for call to function osal_memcpy
   \   000362   78..         MOV       R0,#?V4
   \   000364   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000367   7C01         MOV       R4,#0x1
   \   000369   7D00         MOV       R5,#0x0
   \   00036B   AA..         MOV       R2,?V0
   \   00036D   AB..         MOV       R3,?V1
   \   00036F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000372   7403         MOV       A,#0x3
   \   000374   12....       LCALL     ?DEALLOC_XSTACK8
    207                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000377                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000377   A8..         MOV       R0,?XSP + 0
   \   000379   A9..         MOV       R1,?XSP + 1
   \   00037B   88..         MOV       ?V0,R0
   \   00037D   89..         MOV       ?V1,R1
   \   00037F   78..         MOV       R0,#?V0
   \   000381   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000384   7449         MOV       A,#0x49
   \   000386   12....       LCALL     ?XSTACK_DISP102_8
   \   000389   7904         MOV       R1,#0x4
   \   00038B   7443         MOV       A,#0x43
   \   00038D   12....       LCALL     ?XSTACK_DISP0_8
   \   000390   AA82         MOV       R2,DPL
   \   000392   AB83         MOV       R3,DPH
   \   000394   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000397   7402         MOV       A,#0x2
   \   000399   12....       LCALL     ?DEALLOC_XSTACK8
    208              }
    209            }
    210            
    211            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   00039C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00039C   A8..         MOV       R0,?XSP + 0
   \   00039E   A9..         MOV       R1,?XSP + 1
   \   0003A0   88..         MOV       ?V0,R0
   \   0003A2   89..         MOV       ?V1,R1
   \   0003A4   78..         MOV       R0,#?V0
   \   0003A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003A9   7449         MOV       A,#0x49
   \   0003AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0003AE   7901         MOV       R1,#0x1
   \   0003B0   7447         MOV       A,#0x47
   \   0003B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B5   AA82         MOV       R2,DPL
   \   0003B7   AB83         MOV       R3,DPH
   \   0003B9   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003BC   7402         MOV       A,#0x2
   \   0003BE   12....       LCALL     ?DEALLOC_XSTACK8
    212            
    213            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   0003C1   7406         MOV       A,#0x6
   \   0003C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C6   E0           MOVX      A,@DPTR
   \   0003C7   5418         ANL       A,#0x18
   \   0003C9   6418         XRL       A,#0x18
   \   0003CB   601D         JZ        ??pt_ZclReadGetProxyEntry_15
    214            {
    215              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0003CD                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003CD   78..         MOV       R0,#?V0
   \   0003CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003D2   7449         MOV       A,#0x49
   \   0003D4   12....       LCALL     ?XSTACK_DISP102_8
   \   0003D7   7901         MOV       R1,#0x1
   \   0003D9   7448         MOV       A,#0x48
   \   0003DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0003DE   AA82         MOV       R2,DPL
   \   0003E0   AB83         MOV       R3,DPH
   \   0003E2   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003E5   7402         MOV       A,#0x2
   \   0003E7   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   0003EA   74AA         MOV       A,#-0x56
   \   0003EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EF   E0           MOVX      A,@DPTR
   \   0003F0   F5..         MOV       ?V0,A
   \   0003F2   A3           INC       DPTR
   \   0003F3   E0           MOVX      A,@DPTR
   \   0003F4   F5..         MOV       ?V1,A
    216            }
    217            
    218            if ( pData != NULL )
   \   0003F6   85..82       MOV       DPL,?V0
   \   0003F9   F583         MOV       DPH,A
   \   0003FB   E0           MOVX      A,@DPTR
   \   0003FC   F8           MOV       R0,A
   \   0003FD   E5..         MOV       A,?V12
   \   0003FF   45..         ORL       A,?V13
   \   000401   7003         JNZ       $+5
   \   000403   02....       LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    219            {
    220              uint8 sinkEntryLen;
    221              uint16 totalLen;
    222              
    223              sinkEntryLen = gpdEntryLen;
   \   000406   85..82       MOV       DPL,?XSP + 0
   \   000409   85..83       MOV       DPH,?XSP + 1
   \   00040C   E0           MOVX      A,@DPTR
   \   00040D   FF           MOV       R7,A
    224              if ( *len != 0 )
   \   00040E   E8           MOV       A,R0
   \   00040F   6004         JZ        ??pt_ZclReadGetProxyEntry_17
    225              {
    226              gpdEntryLen -= sizeof ( uint16 );
   \   000411   E0           MOVX      A,@DPTR
   \   000412   24FE         ADD       A,#-0x2
   \   000414   F0           MOVX      @DPTR,A
    227              }
    228              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   000415   E0           MOVX      A,@DPTR
   \   000416   F8           MOV       R0,A
   \   000417   7402         MOV       A,#0x2
   \   000419   12....       LCALL     ?XSTACK_DISP0_8
   \   00041C   E8           MOV       A,R0
   \   00041D   F0           MOVX      @DPTR,A
   \   00041E   A3           INC       DPTR
   \   00041F   E4           CLR       A
   \   000420   F0           MOVX      @DPTR,A
    229              totalLen += *len;
   \   000421   85..82       MOV       DPL,?V0
   \   000424   85..83       MOV       DPH,?V1
   \   000427   E0           MOVX      A,@DPTR
   \   000428   F8           MOV       R0,A
   \   000429   7402         MOV       A,#0x2
   \   00042B   12....       LCALL     ?XSTACK_DISP0_8
   \   00042E   E0           MOVX      A,@DPTR
   \   00042F   28           ADD       A,R0
   \   000430   F0           MOVX      @DPTR,A
   \   000431   A3           INC       DPTR
   \   000432   E0           MOVX      A,@DPTR
   \   000433   3400         ADDC      A,#0x0
   \   000435   F0           MOVX      @DPTR,A
    230              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   000436                ; Setup parameters for call to function osal_memcpy
   \   000436   7402         MOV       A,#0x2
   \   000438   12....       LCALL     ?XSTACK_DISP100_8
   \   00043B   88..         MOV       ?V4,R0
   \   00043D   89..         MOV       ?V5,R1
   \   00043F   75..00       MOV       ?V6,#0x0
   \   000442   78..         MOV       R0,#?V4
   \   000444   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000447   7C02         MOV       R4,#0x2
   \   000449   7D00         MOV       R5,#0x0
   \   00044B   AA..         MOV       R2,?V12
   \   00044D   AB..         MOV       R3,?V13
   \   00044F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000452   7403         MOV       A,#0x3
   \   000454   12....       LCALL     ?DEALLOC_XSTACK8
    231              if ( *len == 0 )
   \   000457   85..82       MOV       DPL,?V0
   \   00045A   85..83       MOV       DPH,?V1
   \   00045D   E0           MOVX      A,@DPTR
   \   00045E   700A         JNZ       ??pt_ZclReadGetProxyEntry_18
    232              {
    233                pData += sizeof ( uint16 );
   \   000460   E5..         MOV       A,?V12
   \   000462   2402         ADD       A,#0x2
   \   000464   F5..         MOV       ?V12,A
   \   000466   5002         JNC       ??pt_ZclReadGetProxyEntry_18
   \   000468   05..         INC       ?V13
    234              }
    235              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   00046A   85..82       MOV       DPL,?XSP + 0
   \   00046D   85..83       MOV       DPH,?XSP + 1
   \   000470   E0           MOVX      A,@DPTR
   \   000471   2402         ADD       A,#0x2
   \   000473   F0           MOVX      @DPTR,A
    236              
    237              pData += *len;
    238              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   000474                ; Setup parameters for call to function osal_memcpy
   \   000474   7447         MOV       A,#0x47
   \   000476   12....       LCALL     ?XSTACK_DISP100_8
   \   000479   88..         MOV       ?V4,R0
   \   00047B   89..         MOV       ?V5,R1
   \   00047D   78..         MOV       R0,#?V4
   \   00047F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000482   EF           MOV       A,R7
   \   000483   FC           MOV       R4,A
   \   000484   7D00         MOV       R5,#0x0
   \   000486   85..82       MOV       DPL,?V0
   \   000489   85..83       MOV       DPH,?V1
   \   00048C   E0           MOVX      A,@DPTR
   \   00048D   F8           MOV       R0,A
   \   00048E   E5..         MOV       A,?V12
   \   000490   28           ADD       A,R0
   \   000491   FA           MOV       R2,A
   \   000492   E4           CLR       A
   \   000493   35..         ADDC      A,?V13
   \   000495   FB           MOV       R3,A
   \   000496   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000499   7403         MOV       A,#0x3
   \   00049B   12....       LCALL     ?DEALLOC_XSTACK8
    239              if ( *len != 0 )
   \   00049E   85..82       MOV       DPL,?V0
   \   0004A1   85..83       MOV       DPH,?V1
   \   0004A4   E0           MOVX      A,@DPTR
   \   0004A5   601B         JZ        ??pt_ZclReadGetProxyEntry_19
    240              {
    241                *len = totalLen;
   \   0004A7   7402         MOV       A,#0x2
   \   0004A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004AC   E0           MOVX      A,@DPTR
   \   0004AD   85..82       MOV       DPL,?V0
   \   0004B0   85..83       MOV       DPH,?V1
   \   0004B3   801D         SJMP      ??pt_ZclReadGetProxyEntry_20
    242                return status;
    243              }
    244              *len += gpdEntryLen;
    245              return status;
    246            }
    247            else
    248            {
    249              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   0004B5   E8           MOV       A,R0
   \   0004B6   700A         JNZ       ??pt_ZclReadGetProxyEntry_19
    250              {
    251                gpdEntryLen += sizeof ( uint16 );
   \   0004B8   85..82       MOV       DPL,?XSP + 0
   \   0004BB   85..83       MOV       DPH,?XSP + 1
   \   0004BE   E0           MOVX      A,@DPTR
   \   0004BF   2402         ADD       A,#0x2
   \   0004C1   F0           MOVX      @DPTR,A
    252              }
    253              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   0004C2   85..82       MOV       DPL,?XSP + 0
   \   0004C5   85..83       MOV       DPH,?XSP + 1
   \   0004C8   E0           MOVX      A,@DPTR
   \   0004C9   F8           MOV       R0,A
   \   0004CA   85..82       MOV       DPL,?V0
   \   0004CD   85..83       MOV       DPH,?V1
   \   0004D0   E0           MOVX      A,@DPTR
   \   0004D1   28           ADD       A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   0004D2   F0           MOVX      @DPTR,A
    254              return status;
   \   0004D3   EE           MOV       A,R6
   \   0004D4   F9           MOV       R1,A
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   0004D5   7492         MOV       A,#-0x6e
   \   0004D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004DA   7F10         MOV       R7,#0x10
   \   0004DC   02....       LJMP      ?BANKED_LEAVE_XDATA
    255            }
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR       A
   \   000001   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000004   F8           MOV       R0,A
   \   000005   04           INC       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   7447         MOV       A,#0x47
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FB           MOV       R3,A
   \   000008   22           RET
    257          
    258          /*********************************************************************
    259           * @fn      zclGpp_ReadWriteAttrCB
    260           *
    261           * @brief   Handle Diagnostics attributes.
    262           *
    263           * @param   clusterId - cluster that attribute belongs to
    264           * @param   attrId - attribute to be read or written
    265           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    266           * @param   pValue - pointer to attribute value, OTA endian
    267           * @param   pLen - length of attribute value read, native endian
    268           *
    269           * @return  status
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    272                                                   uint8 *pValue, uint16 *pLen )
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    274            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV       R1,#0x0
    275            uint16 proxyTableIndex;
    276            uint8 i;
    277          
    278            switch ( oper )
   \   000009   E5..         MOV       A,?V1
   \   00000B   6008         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC       A
   \   00000E   6005         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC       A
   \   000011   604A         JZ        ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP      ??zclGpp_ReadWriteAttrCB_2
    279            {
    280              case ZCL_OPER_LEN:
    281              case ZCL_OPER_READ:
    282                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV       A,#0x11
   \   000017   6C           XRL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7044         JNZ       ??zclGpp_ReadWriteAttrCB_2
    283                { 
    284                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   740E         MOV       A,#0xe
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
    285                  {
    286                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    287                    
    288                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2410         ADD       A,#0x10
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   3403         ADDC      A,#0x3
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   E9           MOV       A,R1
   \   00004F   F9           MOV       R1,A
    289                    if ( status != ZSuccess )
   \   000050   700B         JNZ       ??zclGpp_ReadWriteAttrCB_1
    290                    {
    291                      status = ZFailure;
    292                      break;
    293                    }
    294                  }
   \   000052   05..         INC       ?V0
   \   000054   E5..         MOV       A,?V0
   \   000056   C3           CLR       C
   \   000057   9406         SUBB      A,#0x6
   \   000059   5004         JNC       ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP      ??zclGpp_ReadWriteAttrCB_3
    295                  
    296                }
    297                break;
    298          
    299              case ZCL_OPER_WRITE:
    300                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV       R1,#0x1
    301                break;
    302            }
    303          
    304            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F   7F04         MOV       R7,#0x4
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    305          }
    306          
    307           /*********************************************************************
    308           * @fn          gp_pairingSetProxyTblOptions
    309           *
    310           * @brief       Function to fill the options pramenter in a Proxy Table entry
    311           *              from a GP Pairing Command
    312           *
    313           * @param       pBitField - pointer to the bit field.
    314           *              bit       - position of the bit to set in the given bitfield.
    315           *
    316           * @return      
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    320            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    321            uint16 opt = 0; 
    322            
    323            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    324            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    325            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   8A..         MOV       ?V0,R2
   \   000020   EA           MOV       A,R2
   \   000021   5407         ANL       A,#0x7
   \   000023   F8           MOV       R0,A
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   54F8         ANL       A,#0xf8
   \   00002D   48           ORL       A,R0
   \   00002E   4418         ORL       A,#0x18
   \   000030   F0           MOVX      @DPTR,A
    326            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   000031   54DF         ANL       A,#0xdf
   \   000033   FA           MOV       R2,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FB           MOV       R3,A
   \   000037   85....       MOV       ?V1,?V5
   \   00003A   7403         MOV       A,#0x3
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?US_SHR
   \   000041   E5..         MOV       A,?V0
   \   000043   5420         ANL       A,#0x20
   \   000045   F8           MOV       R0,A
   \   000046   EA           MOV       A,R2
   \   000047   48           ORL       A,R0
   \   000048   F8           MOV       R0,A
   \   000049   EB           MOV       A,R3
   \   00004A   F9           MOV       R1,A
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E8           MOV       A,R0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   E9           MOV       A,R1
   \   000055   F0           MOVX      @DPTR,A
    327            
    328            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000056   85....       MOV       ?V0,?V4
   \   000059   E5..         MOV       A,?V0
   \   00005B   C4           SWAP      A
   \   00005C   13           RRC       A
   \   00005D   5407         ANL       A,#0x7
   \   00005F   5403         ANL       A,#0x3
   \   000061   F9           MOV       R1,A
   \   000062   7403         MOV       A,#0x3
   \   000064   69           XRL       A,R1
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   7017         JNZ       ??gp_pairingSetProxyTblOptions_0
    329            {
    330              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   D2E6         SETB      0xE0 /* A   */.6
   \   000070   F0           MOVX      @DPTR,A
    331            }
    332            else
    333            {
    334              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    335            }
    336            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    337            {
    338              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    339            }
    340            else
    341            {
    342              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   000071   E0           MOVX      A,@DPTR
   \   000072   C2E7         CLR       0xE0 /* A   */.7
   \   000074   F0           MOVX      @DPTR,A
    343            }
    344            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   000075   7402         MOV       A,#0x2
   \   000077   69           XRL       A,R1
   \   000078   7017         JNZ       ??gp_pairingSetProxyTblOptions_2
    345            {
    346              PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   D2E0         SETB      0xE0 /* A   */.0
   \   000082   8015         SJMP      ??gp_pairingSetProxyTblOptions_3
    347            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   000084   E0           MOVX      A,@DPTR
   \   000085   C2E6         CLR       0xE0 /* A   */.6
   \   000087   F0           MOVX      @DPTR,A
   \   000088   7401         MOV       A,#0x1
   \   00008A   69           XRL       A,R1
   \   00008B   70E4         JNZ       ??gp_pairingSetProxyTblOptions_1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   D2E7         SETB      0xE0 /* A   */.7
   \   000090   F0           MOVX      @DPTR,A
    348            else
    349            {
    350              PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   000091   7401         MOV       A,#0x1
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E0           MOVX      A,@DPTR
   \   000097   C2E0         CLR       0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   000099   F0           MOVX      @DPTR,A
    351            }
    352            
    353            // FALSE by default
    354            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    355            
    356            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    357            // of this proxy. The default value is FALSE
    358            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   54F9         ANL       A,#0xf9
   \   00009D   F0           MOVX      @DPTR,A
    359            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    360            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   00009E   E5..         MOV       A,?V0
   \   0000A0   5480         ANL       A,#0x80
   \   0000A2   6005         JZ        ??gp_pairingSetProxyTblOptions_4
    361            {
    362              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   D2E3         SETB      0xE0 /* A   */.3
   \   0000A7   8003         SJMP      ??gp_pairingSetProxyTblOptions_5
    363            }
    364            else
    365            {
    366              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   C2E3         CLR       0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000AC   F0           MOVX      @DPTR,A
    367            }
    368            
    369            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000AD   E9           MOV       A,R1
   \   0000AE   7005         JNZ       ??gp_pairingSetProxyTblOptions_6
    370            {
    371              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   D2E4         SETB      0xE0 /* A   */.4
   \   0000B3   8003         SJMP      ??gp_pairingSetProxyTblOptions_7
    372            }
    373            else
    374            {
    375              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   C2E4         CLR       0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B8   F0           MOVX      @DPTR,A
    376            }
    377            if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
   \   0000B9   85....       MOV       ?V1,?V5
   \   0000BC   85....       MOV       ?V2,?V6
   \   0000BF   85....       MOV       ?V3,?V7
   \   0000C2   90....       MOV       DPTR,#__Constant_10000
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?L_AND_X
   \   0000CA   E5..         MOV       A,?V0
   \   0000CC   45..         ORL       A,?V1
   \   0000CE   45..         ORL       A,?V2
   \   0000D0   45..         ORL       A,?V3
   \   0000D2   600F         JZ        ??gp_pairingSetProxyTblOptions_8
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   69           XRL       A,R1
   \   0000D7   600A         JZ        ??gp_pairingSetProxyTblOptions_8
    378            {
    379              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000D9   7401         MOV       A,#0x1
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   D2E5         SETB      0xE0 /* A   */.5
   \   0000E1   8008         SJMP      ??gp_pairingSetProxyTblOptions_9
    380            }
    381            else
    382            {
    383              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000E3   7401         MOV       A,#0x1
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C2E5         CLR       0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000EB   F0           MOVX      @DPTR,A
    384            }
    385            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000EC   7409         MOV       A,#0x9
   \   0000EE   78..         MOV       R0,#?V4
   \   0000F0   12....       LCALL     ?US_SHR
   \   0000F3   E5..         MOV       A,?V4
   \   0000F5   5403         ANL       A,#0x3
   \   0000F7   C3           CLR       C
   \   0000F8   9402         SUBB      A,#0x2
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   4004         JC        ??gp_pairingSetProxyTblOptions_10
    386            {
    387              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   0000FD   D2E6         SETB      0xE0 /* A   */.6
   \   0000FF   8002         SJMP      ??gp_pairingSetProxyTblOptions_11
    388            }
    389            else
    390            {
    391              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   000101   C2E6         CLR       0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   000103   F0           MOVX      @DPTR,A
    392            }
    393            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    394            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000104   E0           MOVX      A,@DPTR
   \   000105   C2E7         CLR       0xE0 /* A   */.7
   \   000107   12....       LCALL     ?Subroutine4 & 0xFFFF
    395            
    396            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    397            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    398              
    399            return opt;
   \                     ??CrossCallReturnLabel_9:
   \   00010A   FA           MOV       R2,A
   \   00010B   7401         MOV       A,#0x1
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   E0           MOVX      A,@DPTR
   \   000111   FB           MOV       R3,A
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   7F08         MOV       R7,#0x8
   \   000119   02....       LJMP      ?BANKED_LEAVE_XDATA
    400          }
    401          
    402          /*********************************************************************
    403           * @fn          gp_PairingUpdateProxyTlb
    404           *
    405           * @brief       General function fill the proxy table vector
    406           *
    407           * @param       
    408           *
    409           * @return      
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 72
   \   000005   74B8         MOV       A,#-0x48
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    413            uint8  entryVector[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_3`
   \   000011   7407         MOV       A,#0x7
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    414            uint8  entryLen = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
    415            uint8  addSink;
    416            uint8  newSinkGroup = 0;
    417            uint16 entryOptions = 0;
   \   000022   7403         MOV       A,#0x3
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    418            uint8  securityOpt = 0;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
    419            uint8  searchCounter = 0x0A;
   \   000032   04           INC       A
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   740A         MOV       A,#0xa
   \   000038   F0           MOVX      @DPTR,A
    420            uint16 invalidAlias = 0xFFFF;
   \   000039   7405         MOV       A,#0x5
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   74FF         MOV       A,#-0x1
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
    421            
    422            addSink = GP_ADD_SINK( payload->options );
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   78..         MOV       R0,#?V8
   \   000049   12....       LCALL     ?L_MOV_X
   \   00004C   85....       MOV       ?V0,?V8
   \   00004F   E5..         MOV       A,?V0
   \   000051   13           RRC       A
   \   000052   13           RRC       A
   \   000053   13           RRC       A
   \   000054   541F         ANL       A,#0x1f
   \   000056   5401         ANL       A,#0x1
   \   000058   F5..         MOV       ?V6,A
    423            
    424            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   00005A                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   00005A   AA..         MOV       R2,?V8
   \   00005C   AB..         MOV       R3,?V9
   \   00005E   AC..         MOV       R4,?V10
   \   000060   AD..         MOV       R5,?V11
   \   000062   12....       LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   000065   7403         MOV       A,#0x3
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   EA           MOV       A,R2
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   EB           MOV       A,R3
   \   00006E   12....       LCALL     ?Subroutine1 & 0xFFFF
    425            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   7409         MOV       A,#0x9
   \   000076   12....       LCALL     ?XSTACK_DISP102_8
   \   000079   7902         MOV       R1,#0x2
   \   00007B   7405         MOV       A,#0x5
   \   00007D   12....       LCALL     ?XSTACK_DISP101_8
   \   000080   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?L_MOV_X
   \   000091   E5..         MOV       A,?V0
   \   000093   5407         ANL       A,#0x7
   \   000095   F8           MOV       R0,A
   \   000096   7018         JNZ       ??gp_PairingUpdateProxyTlb_0
    426              
    427            // Options bitfield
    428            // If Application Id bitfield is 0b000
    429            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    430            {        
    431              // Populate GPD ID
    432              entryLen += sizeof( uint32 );
   \   000098   85..82       MOV       DPL,?XSP + 0
   \   00009B   85..83       MOV       DPH,?XSP + 1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   2404         ADD       A,#0x4
   \   0000A1   12....       LCALL     ?Subroutine1 & 0xFFFF
    433              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    434            }
   \                     ??CrossCallReturnLabel_1:
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   7409         MOV       A,#0x9
   \   0000A9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AC   7904         MOV       R1,#0x4
   \   0000AE   8019         SJMP      ??gp_PairingUpdateProxyTlb_1
    435            // If Application Id bitfield is 0b010
    436            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000B0   7402         MOV       A,#0x2
   \   0000B2   68           XRL       A,R0
   \   0000B3   7022         JNZ       ??gp_PairingUpdateProxyTlb_2
    437            {   
    438              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000B5                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000B5   A8..         MOV       R0,?XSP + 0
   \   0000B7   A9..         MOV       R1,?XSP + 1
   \   0000B9   88..         MOV       ?V0,R0
   \   0000BB   89..         MOV       ?V1,R1
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   7409         MOV       A,#0x9
   \   0000C4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C7   7908         MOV       R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000C9   EE           MOV       A,R6
   \   0000CA   29           ADD       A,R1
   \   0000CB   FA           MOV       R2,A
   \   0000CC   E4           CLR       A
   \   0000CD   3F           ADDC      A,R7
   \   0000CE   FB           MOV       R3,A
   \   0000CF   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000D2   7402         MOV       A,#0x2
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
    439            }
    440            
    441             gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000D7                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000D7   A8..         MOV       R0,?XSP + 0
   \   0000D9   A9..         MOV       R1,?XSP + 1
   \   0000DB   88..         MOV       ?V0,R0
   \   0000DD   89..         MOV       ?V1,R1
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E4   7409         MOV       A,#0x9
   \   0000E6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E9   7901         MOV       R1,#0x1
   \   0000EB   EE           MOV       A,R6
   \   0000EC   2410         ADD       A,#0x10
   \   0000EE   FA           MOV       R2,A
   \   0000EF   E4           CLR       A
   \   0000F0   3F           ADDC      A,R7
   \   0000F1   FB           MOV       R3,A
   \   0000F2   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000F5   7402         MOV       A,#0x2
   \   0000F7   12....       LCALL     ?DEALLOC_XSTACK8
    442          
    443            if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
   \   0000FA   EE           MOV       A,R6
   \   0000FB   2432         ADD       A,#0x32
   \   0000FD   F5..         MOV       ?V4,A
   \   0000FF   E4           CLR       A
   \   000100   3F           ADDC      A,R7
   \   000101   F5..         MOV       ?V5,A
   \   000103   8E82         MOV       DPL,R6
   \   000105   8F83         MOV       DPH,R7
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?L_MOV_X
   \   00010C   E5..         MOV       A,?V0
   \   00010E   C4           SWAP      A
   \   00010F   13           RRC       A
   \   000110   5407         ANL       A,#0x7
   \   000112   5403         ANL       A,#0x3
   \   000114   6402         XRL       A,#0x2
   \   000116   A8..         MOV       R0,?XSP + 0
   \   000118   A9..         MOV       R1,?XSP + 1
   \   00011A   88..         MOV       ?V0,R0
   \   00011C   89..         MOV       ?V1,R1
   \   00011E   78..         MOV       R0,#?V0
   \   000120   6010         JZ        ??gp_PairingUpdateProxyTlb_3
    444            {
    445              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   000122                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000125   7409         MOV       A,#0x9
   \   000127   12....       LCALL     ?XSTACK_DISP102_8
   \   00012A   7902         MOV       R1,#0x2
   \   00012C   AA..         MOV       R2,?V4
   \   00012E   AB..         MOV       R3,?V5
   \   000130   800F         SJMP      ??gp_PairingUpdateProxyTlb_4
    446            }
    447            else
    448            {
    449              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   000132                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000135   7409         MOV       A,#0x9
   \   000137   12....       LCALL     ?XSTACK_DISP102_8
   \   00013A   7902         MOV       R1,#0x2
   \   00013C   7407         MOV       A,#0x7
   \   00013E   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??gp_PairingUpdateProxyTlb_4:
   \   000141   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000144   7402         MOV       A,#0x2
   \   000146   12....       LCALL     ?DEALLOC_XSTACK8
    450            }
    451          
    452          
    453            //Security options
    454            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    455            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   000149   8E82         MOV       DPL,R6
   \   00014B   8F83         MOV       DPH,R7
   \   00014D   78..         MOV       R0,#?V0
   \   00014F   12....       LCALL     ?L_MOV_X
   \   000152   85....       MOV       ?V8,?V0
   \   000155   85....       MOV       ?V9,?V1
   \   000158   740B         MOV       A,#0xb
   \   00015A   78..         MOV       R0,#?V8
   \   00015C   12....       LCALL     ?US_SHR
   \   00015F   E5..         MOV       A,?V8
   \   000161   33           RLC       A
   \   000162   33           RLC       A
   \   000163   54FC         ANL       A,#0xfc
   \   000165   541C         ANL       A,#0x1c
   \   000167   F9           MOV       R1,A
   \   000168   7409         MOV       A,#0x9
   \   00016A   78..         MOV       R0,#?V0
   \   00016C   12....       LCALL     ?US_SHR
   \   00016F   E5..         MOV       A,?V0
   \   000171   5403         ANL       A,#0x3
   \   000173   49           ORL       A,R1
   \   000174   F8           MOV       R0,A
   \   000175   7402         MOV       A,#0x2
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   48           ORL       A,R0
   \   00017C   F0           MOVX      @DPTR,A
    456            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   00017D                ; Setup parameters for call to function osal_memcpy
   \   00017D   7402         MOV       A,#0x2
   \   00017F   12....       LCALL     ?XSTACK_DISP100_8
   \   000182   88..         MOV       ?V0,R0
   \   000184   89..         MOV       ?V1,R1
   \   000186   75..00       MOV       ?V2,#0x0
   \   000189   78..         MOV       R0,#?V0
   \   00018B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018E   7C01         MOV       R4,#0x1
   \   000190   7D00         MOV       R5,#0x0
   \   000192   7403         MOV       A,#0x3
   \   000194   12....       LCALL     ?XSTACK_DISP0_8
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F8           MOV       R0,A
   \   000199   740A         MOV       A,#0xa
   \   00019B   12....       LCALL     ?XSTACK_DISP0_8
   \   00019E   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001A1   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A4   7403         MOV       A,#0x3
   \   0001A6   12....       LCALL     ?DEALLOC_XSTACK8
    457            entryLen += sizeof ( uint8 );
   \   0001A9   85..82       MOV       DPL,?XSP + 0
   \   0001AC   85..83       MOV       DPH,?XSP + 1
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   04           INC       A
   \   0001B1   12....       LCALL     ?Subroutine1 & 0xFFFF
    458          
    459            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B7   7409         MOV       A,#0x9
   \   0001B9   12....       LCALL     ?XSTACK_DISP102_8
   \   0001BC   7904         MOV       R1,#0x4
   \   0001BE   EE           MOV       A,R6
   \   0001BF   241E         ADD       A,#0x1e
   \   0001C1   FA           MOV       R2,A
   \   0001C2   E4           CLR       A
   \   0001C3   3F           ADDC      A,R7
   \   0001C4   FB           MOV       R3,A
   \   0001C5   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001C8   7402         MOV       A,#0x2
   \   0001CA   12....       LCALL     ?DEALLOC_XSTACK8
    460            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   0001CD                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001CD   78..         MOV       R0,#?V0
   \   0001CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D2   7409         MOV       A,#0x9
   \   0001D4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D7   7910         MOV       R1,#0x10
   \   0001D9   EE           MOV       A,R6
   \   0001DA   2422         ADD       A,#0x22
   \   0001DC   FA           MOV       R2,A
   \   0001DD   E4           CLR       A
   \   0001DE   3F           ADDC      A,R7
   \   0001DF   FB           MOV       R3,A
   \   0001E0   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001E3   7402         MOV       A,#0x2
   \   0001E5   12....       LCALL     ?DEALLOC_XSTACK8
    461            
    462            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001E8   EE           MOV       A,R6
   \   0001E9   2411         ADD       A,#0x11
   \   0001EB   F5..         MOV       ?V2,A
   \   0001ED   E4           CLR       A
   \   0001EE   3F           ADDC      A,R7
   \   0001EF   F5..         MOV       ?V3,A
   \   0001F1                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001F1   78..         MOV       R0,#?V0
   \   0001F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F6   7409         MOV       A,#0x9
   \   0001F8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001FB   7908         MOV       R1,#0x8
   \   0001FD   AA..         MOV       R2,?V2
   \   0001FF   AB..         MOV       R3,?V3
   \   000201   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000204   7402         MOV       A,#0x2
   \   000206   12....       LCALL     ?DEALLOC_XSTACK8
    463            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000209   EE           MOV       A,R6
   \   00020A   2419         ADD       A,#0x19
   \   00020C   F5..         MOV       ?V0,A
   \   00020E   E4           CLR       A
   \   00020F   3F           ADDC      A,R7
   \   000210   F5..         MOV       ?V1,A
   \   000212                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000212   A8..         MOV       R0,?XSP + 0
   \   000214   A9..         MOV       R1,?XSP + 1
   \   000216   88..         MOV       ?V8,R0
   \   000218   89..         MOV       ?V9,R1
   \   00021A   78..         MOV       R0,#?V8
   \   00021C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021F   7409         MOV       A,#0x9
   \   000221   12....       LCALL     ?XSTACK_DISP102_8
   \   000224   7902         MOV       R1,#0x2
   \   000226   AA..         MOV       R2,?V0
   \   000228   AB..         MOV       R3,?V1
   \   00022A   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00022D   7402         MOV       A,#0x2
   \   00022F   12....       LCALL     ?DEALLOC_XSTACK8
    464            // to add the invalid entries
    465            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   000232                ; Setup parameters for call to function osal_memset
   \   000232   7C08         MOV       R4,#0x8
   \   000234   7D00         MOV       R5,#0x0
   \   000236   79FF         MOV       R1,#-0x1
   \   000238   AA..         MOV       R2,?V2
   \   00023A   AB..         MOV       R3,?V3
   \   00023C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    466            payload->sinkNwkAddr = 0xFFFF;
   \   00023F   85..82       MOV       DPL,?V0
   \   000242   85..83       MOV       DPH,?V1
   \   000245   74FF         MOV       A,#-0x1
   \   000247   F0           MOVX      @DPTR,A
   \   000248   A3           INC       DPTR
   \   000249   F0           MOVX      @DPTR,A
    467            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   00024A                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00024A   78..         MOV       R0,#?V8
   \   00024C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00024F   7409         MOV       A,#0x9
   \   000251   12....       LCALL     ?XSTACK_DISP102_8
   \   000254   7908         MOV       R1,#0x8
   \   000256   AA..         MOV       R2,?V2
   \   000258   AB..         MOV       R3,?V3
   \   00025A   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00025D   7402         MOV       A,#0x2
   \   00025F   12....       LCALL     ?DEALLOC_XSTACK8
    468            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000262                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000262   A8..         MOV       R0,?XSP + 0
   \   000264   A9..         MOV       R1,?XSP + 1
   \   000266   88..         MOV       ?V2,R0
   \   000268   89..         MOV       ?V3,R1
   \   00026A   78..         MOV       R0,#?V2
   \   00026C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026F   7409         MOV       A,#0x9
   \   000271   12....       LCALL     ?XSTACK_DISP102_8
   \   000274   7902         MOV       R1,#0x2
   \   000276   AA..         MOV       R2,?V0
   \   000278   AB..         MOV       R3,?V1
   \   00027A   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00027D   7402         MOV       A,#0x2
   \   00027F   12....       LCALL     ?DEALLOC_XSTACK8
    469            
    470            newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
    471            newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
    472            osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
   \   000282                ; Setup parameters for call to function osal_memset
   \   000282   7C01         MOV       R4,#0x1
   \   000284   7D00         MOV       R5,#0x0
   \   000286   7403         MOV       A,#0x3
   \   000288   12....       LCALL     ?XSTACK_DISP0_8
   \   00028B   A3           INC       DPTR
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   5401         ANL       A,#0x1
   \   00028F   FA           MOV       R2,A
   \   000290   7403         MOV       A,#0x3
   \   000292   12....       LCALL     ?XSTACK_DISP0_8
   \   000295   E0           MOVX      A,@DPTR
   \   000296   33           RLC       A
   \   000297   33           RLC       A
   \   000298   5401         ANL       A,#0x1
   \   00029A   4A           ORL       A,R2
   \   00029B   F9           MOV       R1,A
   \   00029C   85..82       MOV       DPL,?XSP + 0
   \   00029F   85..83       MOV       DPH,?XSP + 1
   \   0002A2   E0           MOVX      A,@DPTR
   \   0002A3   FA           MOV       R2,A
   \   0002A4   7407         MOV       A,#0x7
   \   0002A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A9   E582         MOV       A,DPL
   \   0002AB   2A           ADD       A,R2
   \   0002AC   FA           MOV       R2,A
   \   0002AD   E4           CLR       A
   \   0002AE   3583         ADDC      A,DPH
   \   0002B0   FB           MOV       R3,A
   \   0002B1   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    473            entryLen++;
   \   0002B4   85..82       MOV       DPL,?XSP + 0
   \   0002B7   85..83       MOV       DPH,?XSP + 1
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   04           INC       A
   \   0002BC   F0           MOVX      @DPTR,A
    474            
    475            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   0002BD   EE           MOV       A,R6
   \   0002BE   241B         ADD       A,#0x1b
   \   0002C0   F5..         MOV       ?V0,A
   \   0002C2   E4           CLR       A
   \   0002C3   3F           ADDC      A,R7
   \   0002C4   F5..         MOV       ?V1,A
   \   0002C6                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002C6   78..         MOV       R0,#?V2
   \   0002C8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002CB   7409         MOV       A,#0x9
   \   0002CD   12....       LCALL     ?XSTACK_DISP102_8
   \   0002D0   7902         MOV       R1,#0x2
   \   0002D2   AA..         MOV       R2,?V0
   \   0002D4   AB..         MOV       R3,?V1
   \   0002D6   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002D9   7402         MOV       A,#0x2
   \   0002DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DE   8E82         MOV       DPL,R6
   \   0002E0   8F83         MOV       DPH,R7
   \   0002E2   78..         MOV       R0,#?V8
   \   0002E4   12....       LCALL     ?L_MOV_X
   \   0002E7   E5..         MOV       A,?V8
   \   0002E9   C4           SWAP      A
   \   0002EA   13           RRC       A
   \   0002EB   5407         ANL       A,#0x7
   \   0002ED   5403         ANL       A,#0x3
   \   0002EF   F8           MOV       R0,A
   \   0002F0   7402         MOV       A,#0x2
   \   0002F2   68           XRL       A,R0
   \   0002F3   6005         JZ        ??gp_PairingUpdateProxyTlb_5
   \   0002F5   7401         MOV       A,#0x1
   \   0002F7   68           XRL       A,R0
   \   0002F8   7012         JNZ       ??gp_PairingUpdateProxyTlb_6
    476            if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
    477            {
    478              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_5:
   \   0002FA                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002FA   78..         MOV       R0,#?V2
   \   0002FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002FF   7409         MOV       A,#0x9
   \   000301   12....       LCALL     ?XSTACK_DISP102_8
   \   000304   7902         MOV       R1,#0x2
   \   000306   AA..         MOV       R2,?V4
   \   000308   AB..         MOV       R3,?V5
   \   00030A   8011         SJMP      ??gp_PairingUpdateProxyTlb_7
    479            }
    480            else
    481            {
    482              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_6:
   \   00030C                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00030C   78..         MOV       R0,#?V2
   \   00030E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000311   7409         MOV       A,#0x9
   \   000313   12....       LCALL     ?XSTACK_DISP102_8
   \   000316   7902         MOV       R1,#0x2
   \   000318   7407         MOV       A,#0x7
   \   00031A   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??gp_PairingUpdateProxyTlb_7:
   \   00031D   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000320   7402         MOV       A,#0x2
   \   000322   12....       LCALL     ?DEALLOC_XSTACK8
    483            }
    484            // to add the invalid entries
    485            payload->sinkGroupID = 0xFFFF;
   \   000325   85..82       MOV       DPL,?V0
   \   000328   85..83       MOV       DPH,?V1
   \   00032B   74FF         MOV       A,#-0x1
   \   00032D   F0           MOVX      @DPTR,A
   \   00032E   A3           INC       DPTR
   \   00032F   F0           MOVX      @DPTR,A
    486            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   000330                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000330   78..         MOV       R0,#?V2
   \   000332   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000335   7409         MOV       A,#0x9
   \   000337   12....       LCALL     ?XSTACK_DISP102_8
   \   00033A   7902         MOV       R1,#0x2
   \   00033C   AA..         MOV       R2,?V0
   \   00033E   AB..         MOV       R3,?V1
   \   000340   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000343   7402         MOV       A,#0x2
   \   000345   12....       LCALL     ?DEALLOC_XSTACK8
    487            gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   000348                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000348   A8..         MOV       R0,?XSP + 0
   \   00034A   A9..         MOV       R1,?XSP + 1
   \   00034C   88..         MOV       ?V0,R0
   \   00034E   89..         MOV       ?V1,R1
   \   000350   78..         MOV       R0,#?V0
   \   000352   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000355   7409         MOV       A,#0x9
   \   000357   12....       LCALL     ?XSTACK_DISP102_8
   \   00035A   7902         MOV       R1,#0x2
   \   00035C   7407         MOV       A,#0x7
   \   00035E   12....       LCALL     ?XSTACK_DISP101_8
   \   000361   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000364   7402         MOV       A,#0x2
   \   000366   12....       LCALL     ?DEALLOC_XSTACK8
    488          
    489            
    490            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   000369                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000369   78..         MOV       R0,#?V0
   \   00036B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00036E   7409         MOV       A,#0x9
   \   000370   12....       LCALL     ?XSTACK_DISP102_8
   \   000373   7901         MOV       R1,#0x1
   \   000375   EE           MOV       A,R6
   \   000376   2434         ADD       A,#0x34
   \   000378   FA           MOV       R2,A
   \   000379   E4           CLR       A
   \   00037A   3F           ADDC      A,R7
   \   00037B   FB           MOV       R3,A
   \   00037C   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00037F   7402         MOV       A,#0x2
   \   000381   12....       LCALL     ?DEALLOC_XSTACK8
    491           
    492            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   000384   85..82       MOV       DPL,?XSP + 0
   \   000387   85..83       MOV       DPH,?XSP + 1
   \   00038A   E0           MOVX      A,@DPTR
   \   00038B   F8           MOV       R0,A
   \   00038C   7407         MOV       A,#0x7
   \   00038E   12....       LCALL     ?XSTACK_DISP0_8
   \   000391   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000394   7401         MOV       A,#0x1
   \   000396   12....       LCALL     ?XSTACK_DISP100_8
   \   000399   88..         MOV       ?V0,R0
   \   00039B   89..         MOV       ?V1,R1
   \   00039D   75..00       MOV       ?V2,#0x0
   \   0003A0   E0           MOVX      A,@DPTR
   \   0003A1   5418         ANL       A,#0x18
   \   0003A3   6008         JZ        ??gp_PairingUpdateProxyTlb_8
    493            {
    494              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   0003A5                ; Setup parameters for call to function osal_memcpy
    495            }
    496            else
    497            {
    498              searchCounter = 0xFF;
   \   0003A5   7401         MOV       A,#0x1
   \   0003A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AA   74FF         MOV       A,#-0x1
   \   0003AC   F0           MOVX      @DPTR,A
    499              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   0003AD                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_8:
   \   0003AD   78..         MOV       R0,#?V0
   \   0003AF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003B2   7C01         MOV       R4,#0x1
   \   0003B4   7D00         MOV       R5,#0x0
   \   0003B6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003B9   7403         MOV       A,#0x3
   \   0003BB   12....       LCALL     ?DEALLOC_XSTACK8
    500            }
    501            // Update the proxy table
    502            gp_UpdateProxyTlb( entryVector, addSink );
   \   0003BE                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   0003BE   A9..         MOV       R1,?V6
   \   0003C0   7407         MOV       A,#0x7
   \   0003C2   12....       LCALL     ?XSTACK_DISP101_8
   \   0003C5   12....       LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    503          }
   \   0003C8   7448         MOV       A,#0x48
   \   0003CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003CD   7F0C         MOV       R7,#0xc
   \   0003CF   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    504          
    505          /*********************************************************************
    506           * @fn          gp_UpdateProxyTlb
    507           *
    508           * @brief       To update the proxy table NV vectors
    509           *
    510           * @param       pNpEntryew - New entry array to be added
    511           *
    512           * @return
    513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 260
   \   000005   7582FC       MOV       DPL,#-0x4
   \   000008   7583FE       MOV       DPH,#-0x2
   \   00000B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00000E   89..         MOV       ?V3,R1
    516            uint8 i;
    517            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000010   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_4`
   \   000013   7441         MOV       A,#0x41
   \   000015   12....       LCALL     ?XSTACK_DISP102_8
   \   000018   7441         MOV       A,#0x41
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    518            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001D   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_5`
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7441         MOV       A,#0x41
   \   000026   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    519            uint16 proxyTableIndex;
    520            uint8 status;
    521            
    522            // Copy the new entry pointer to array
    523            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   8A..         MOV       ?V0,R2
   \   00002B   8B..         MOV       ?V1,R3
   \   00002D   F5..         MOV       ?V2,A
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C41         MOV       R4,#0x41
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7444         MOV       A,#0x44
   \   00003A   12....       LCALL     ?XSTACK_DISP101_8
   \   00003D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
    524          
    525            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000045   7F00         MOV       R7,#0x0
    526            {
    527              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   000047   EF           MOV       A,R7
   \   000048   2410         ADD       A,#0x10
   \   00004A   F5..         MOV       ?V0,A
   \   00004C   E4           CLR       A
   \   00004D   3403         ADDC      A,#0x3
   \   00004F   F5..         MOV       ?V1,A
    528              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   000051                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000051   AC..         MOV       R4,?XSP + 0
   \   000053   AD..         MOV       R5,?XSP + 1
   \   000055   AA..         MOV       R2,?V0
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00005B   E9           MOV       A,R1
   \   00005C   FE           MOV       R6,A
    529          
    530              if ( status == NV_OPER_FAILED )
   \   00005D   740A         MOV       A,#0xa
   \   00005F   6E           XRL       A,R6
   \   000060   7003         JNZ       $+5
   \   000062   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    531              {
    532                // FAIL
    533                return status;
    534              }
    535              
    536              // if the entry is empty
    537              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \   000065   740D         MOV       A,#0xd
   \   000067   6E           XRL       A,R6
   \   000068   6003         JZ        $+5
   \   00006A   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
   \   00006D   7401         MOV       A,#0x1
   \   00006F   65..         XRL       A,?V3
   \   000071   6003         JZ        $+5
   \   000073   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
    538              {
    539                // Save new entry
    540                status = osal_nv_write( proxyTableIndex, 0,
    541                                     PROXY_TBL_ENTRY_LEN, newEntry );
   \   000076                ; Setup parameters for call to function osal_nv_write
   \   000076   7441         MOV       A,#0x41
   \   000078   12....       LCALL     ?XSTACK_DISP100_8
   \   00007B   88..         MOV       ?V4,R0
   \   00007D   89..         MOV       ?V5,R1
   \   00007F   78..         MOV       R0,#?V4
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   75..41       MOV       ?V4,#0x41
   \   000087   75..00       MOV       ?V5,#0x0
   \   00008A   78..         MOV       R0,#?V4
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   7C00         MOV       R4,#0x0
   \   000091   7D00         MOV       R5,#0x0
   \   000093   AA..         MOV       R2,?V0
   \   000095   AB..         MOV       R3,?V1
   \   000097   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009A   7404         MOV       A,#0x4
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009F   E9           MOV       A,R1
   \   0000A0   FE           MOV       R6,A
    542                
    543                if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    544                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    545                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   0000A1   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   0000A4   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   0000A7                ; Setup parameters for call to function osal_memcmp
   \   0000A7   744C         MOV       A,#0x4c
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   A982         MOV       R1,DPL
   \   0000AE   AA83         MOV       R2,DPH
   \   0000B0   89..         MOV       ?V4,R1
   \   0000B2   8A..         MOV       ?V5,R2
   \   0000B4   75..00       MOV       ?V6,#0x0
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BC   7C02         MOV       R4,#0x2
   \   0000BE   7D00         MOV       R5,#0x0
   \   0000C0   A9..         MOV       R1,?V0
   \   0000C2   AA..         MOV       R2,?V1
   \   0000C4   AB..         MOV       R3,?V2
   \   0000C6   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000C9   7403         MOV       A,#0x3
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV       A,R1
   \   0000CF   6003         JZ        $+5
   \   0000D1   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000D4                ; Setup parameters for call to function osal_memcmp
   \   0000D4   7478         MOV       A,#0x78
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   A982         MOV       R1,DPL
   \   0000DB   AA83         MOV       R2,DPH
   \   0000DD   89..         MOV       ?V4,R1
   \   0000DF   8A..         MOV       ?V5,R2
   \   0000E1   78..         MOV       R0,#?V4
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E6   7C02         MOV       R4,#0x2
   \   0000E8   7D00         MOV       R5,#0x0
   \   0000EA   A9..         MOV       R1,?V0
   \   0000EC   AA..         MOV       R2,?V1
   \   0000EE   AB..         MOV       R3,?V2
   \   0000F0   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   E9           MOV       A,R1
   \   0000F9   6003         JZ        $+5
   \   0000FB   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000FE                ; Setup parameters for call to function osal_memcmp
   \   0000FE   747C         MOV       A,#0x7c
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   A982         MOV       R1,DPL
   \   000105   AA83         MOV       R2,DPH
   \   000107   89..         MOV       ?V4,R1
   \   000109   8A..         MOV       ?V5,R2
   \   00010B   78..         MOV       R0,#?V4
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000110   7C02         MOV       R4,#0x2
   \   000112   7D00         MOV       R5,#0x0
   \   000114   A9..         MOV       R1,?V0
   \   000116   AA..         MOV       R2,?V1
   \   000118   AB..         MOV       R3,?V2
   \   00011A   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00011D   7403         MOV       A,#0x3
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000122   E9           MOV       A,R1
   \   000123   6003         JZ        $+5
   \   000125   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   000128   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    546                {
    547                  NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
    548                }
    549                return status;
    550              }
    551              
    552              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_2:
   \   00012B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_11`
   \   00012E   74C3         MOV       A,#-0x3d
   \   000130   12....       LCALL     ?XSTACK_DISP102_8
   \   000133   7441         MOV       A,#0x41
   \   000135   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000138   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_12`
   \   00013B   7482         MOV       A,#-0x7e
   \   00013D   12....       LCALL     ?XSTACK_DISP102_8
   \   000140   7441         MOV       A,#0x41
   \   000142   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000145                ; Setup parameters for call to function osal_memcpy
   \   000145   7441         MOV       A,#0x41
   \   000147   12....       LCALL     ?XSTACK_DISP100_8
   \   00014A   88..         MOV       ?V4,R0
   \   00014C   89..         MOV       ?V5,R1
   \   00014E   75..00       MOV       ?V6,#0x0
   \   000151   78..         MOV       R0,#?V4
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000156   7C41         MOV       R4,#0x41
   \   000158   7D00         MOV       R5,#0x0
   \   00015A   74C6         MOV       A,#-0x3a
   \   00015C   12....       LCALL     ?XSTACK_DISP101_8
   \   00015F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000162   7403         MOV       A,#0x3
   \   000164   12....       LCALL     ?DEALLOC_XSTACK8
   \   000167                ; Setup parameters for call to function osal_nv_read
   \   000167   7482         MOV       A,#-0x7e
   \   000169   12....       LCALL     ?XSTACK_DISP100_8
   \   00016C   88..         MOV       ?V4,R0
   \   00016E   89..         MOV       ?V5,R1
   \   000170   78..         MOV       R0,#?V4
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000175   75..41       MOV       ?V4,#0x41
   \   000178   75..00       MOV       ?V5,#0x0
   \   00017B   78..         MOV       R0,#?V4
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000180   7C00         MOV       R4,#0x0
   \   000182   7D00         MOV       R5,#0x0
   \   000184   AA..         MOV       R2,?V0
   \   000186   AB..         MOV       R3,?V1
   \   000188   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00018B   7404         MOV       A,#0x4
   \   00018D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000190   E9           MOV       A,R1
   \   000191   7040         JNZ       ??gp_UpdateProxyTlb_4
   \   000193   74C3         MOV       A,#-0x3d
   \   000195   12....       LCALL     ?XSTACK_DISP0_8
   \   000198   E0           MOVX      A,@DPTR
   \   000199   5407         ANL       A,#0x7
   \   00019B   F8           MOV       R0,A
   \   00019C   7482         MOV       A,#-0x7e
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   5407         ANL       A,#0x7
   \   0001A4   68           XRL       A,R0
   \   0001A5   702C         JNZ       ??gp_UpdateProxyTlb_4
   \   0001A7                ; Setup parameters for call to function osal_memcmp
   \   0001A7   7484         MOV       A,#-0x7c
   \   0001A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AC   A982         MOV       R1,DPL
   \   0001AE   AA83         MOV       R2,DPH
   \   0001B0   89..         MOV       ?V4,R1
   \   0001B2   8A..         MOV       ?V5,R2
   \   0001B4   78..         MOV       R0,#?V4
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B9   7C08         MOV       R4,#0x8
   \   0001BB   7D00         MOV       R5,#0x0
   \   0001BD   74C8         MOV       A,#-0x38
   \   0001BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C2   A982         MOV       R1,DPL
   \   0001C4   AA83         MOV       R2,DPH
   \   0001C6   7B00         MOV       R3,#0x0
   \   0001C8   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001CB   7403         MOV       A,#0x3
   \   0001CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D0   E9           MOV       A,R1
   \   0001D1   7015         JNZ       ??gp_UpdateProxyTlb_5
    553              {
    554                // Entry found
    555                break;
    556              }
    557              
    558              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_4:
   \   0001D3   EF           MOV       A,R7
   \   0001D4   C3           CLR       C
   \   0001D5   9405         SUBB      A,#0x5
   \   0001D7   4005         JC        ??gp_UpdateProxyTlb_6
    559              {
    560                // No space for new entries
    561                return FAILURE;
   \   0001D9   7901         MOV       R1,#0x1
   \   0001DB   02....       LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
    562              }
    563            }
   \                     ??gp_UpdateProxyTlb_6:
   \   0001DE   0F           INC       R7
   \   0001DF   EF           MOV       A,R7
   \   0001E0   C3           CLR       C
   \   0001E1   9406         SUBB      A,#0x6
   \   0001E3   5003         JNC       $+5
   \   0001E5   02....       LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
    564            
    565            // Remove the entry
    566            if ( addSink == FALSE )
   \                     ??gp_UpdateProxyTlb_5:
   \   0001E8   E5..         MOV       A,?V3
   \   0001EA   7034         JNZ       ??gp_UpdateProxyTlb_8
    567            {
    568              gp_ResetProxyBasicTblEntry( currEntry );
   \   0001EC                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   0001EC   AA..         MOV       R2,?XSP + 0
   \   0001EE   AB..         MOV       R3,?XSP + 1
   \   0001F0   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    569              
    570              status = osal_nv_write( proxyTableIndex, 0,
    571                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   0001F3                ; Setup parameters for call to function osal_nv_write
   \   0001F3   A8..         MOV       R0,?XSP + 0
   \   0001F5   A9..         MOV       R1,?XSP + 1
   \   0001F7   88..         MOV       ?V4,R0
   \   0001F9   89..         MOV       ?V5,R1
   \   0001FB   78..         MOV       R0,#?V4
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000200   75..41       MOV       ?V4,#0x41
   \   000203   75..00       MOV       ?V5,#0x0
   \   000206   78..         MOV       R0,#?V4
   \   000208   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020B   7C00         MOV       R4,#0x0
   \   00020D   7D00         MOV       R5,#0x0
   \   00020F   AA..         MOV       R2,?V0
   \   000211   AB..         MOV       R3,?V1
   \   000213   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000216   7404         MOV       A,#0x4
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021B   E9           MOV       A,R1
   \   00021C   FE           MOV       R6,A
   \   00021D   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    572              return status;
    573            }
    574          
    575            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_8:
   \   000220   7441         MOV       A,#0x41
   \   000222   12....       LCALL     ?XSTACK_DISP0_8
   \   000225   E0           MOVX      A,@DPTR
   \   000226   A2E6         MOV       C,0xE0 /* A   */.6
   \   000228   4003         JC        $+5
   \   00022A   02....       LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
    576            {
    577              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   00022D                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   00022D   A9..         MOV       R1,?V3
   \   00022F   AC..         MOV       R4,?XSP + 0
   \   000231   AD..         MOV       R5,?XSP + 1
   \   000233   7441         MOV       A,#0x41
   \   000235   12....       LCALL     ?XSTACK_DISP101_8
   \   000238   12....       LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   00023B   E9           MOV       A,R1
   \   00023C   7003         JNZ       $+5
   \   00023E   02....       LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
    578              {
    579                // The entry is full
    580                return NV_BAD_ITEM_LEN;
    581              }
    582            }
    583            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    584            {
    585              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    586              {
    587                // The entry is full
    588                return NV_BAD_ITEM_LEN;
    589              }
    590            }
    591          
    592            if ( pt_getAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   000241   7442         MOV       A,#0x42
   \   000243   12....       LCALL     ?XSTACK_DISP0_8
   \   000246   E0           MOVX      A,@DPTR
   \   000247   A2E5         MOV       C,0xE0 /* A   */.5
   \   000249   5027         JNC       ??gp_UpdateProxyTlb_12
    593            {
    594              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   00024B                ; Setup parameters for call to function osal_memcpy
   \   00024B   744C         MOV       A,#0x4c
   \   00024D   12....       LCALL     ?XSTACK_DISP0_8
   \   000250   A982         MOV       R1,DPL
   \   000252   AA83         MOV       R2,DPH
   \   000254   89..         MOV       ?V4,R1
   \   000256   8A..         MOV       ?V5,R2
   \   000258   78..         MOV       R0,#?V4
   \   00025A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00025D   7C02         MOV       R4,#0x2
   \   00025F   7D00         MOV       R5,#0x0
   \   000261   740E         MOV       A,#0xe
   \   000263   12....       LCALL     ?XSTACK_DISP0_8
   \   000266   AA82         MOV       R2,DPL
   \   000268   AB83         MOV       R3,DPH
   \   00026A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00026D   7403         MOV       A,#0x3
   \   00026F   12....       LCALL     ?DEALLOC_XSTACK8
    595            }
    596              
    597            if ( pt_getSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   000272   7442         MOV       A,#0x42
   \   000274   12....       LCALL     ?XSTACK_DISP0_8
   \   000277   E0           MOVX      A,@DPTR
   \   000278   A2E6         MOV       C,0xE0 /* A   */.6
   \   00027A   5057         JNC       ??gp_UpdateProxyTlb_13
    598            {
    599              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   00027C   7401         MOV       A,#0x1
   \   00027E   12....       LCALL     ?XSTACK_DISP0_8
   \   000281   E0           MOVX      A,@DPTR
   \   000282   D2E6         SETB      0xE0 /* A   */.6
   \   000284   F0           MOVX      @DPTR,A
    600              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   000285                ; Setup parameters for call to function osal_memcpy
   \   000285   744E         MOV       A,#0x4e
   \   000287   12....       LCALL     ?XSTACK_DISP0_8
   \   00028A   A982         MOV       R1,DPL
   \   00028C   AA83         MOV       R2,DPH
   \   00028E   89..         MOV       ?V4,R1
   \   000290   8A..         MOV       ?V5,R2
   \   000292   78..         MOV       R0,#?V4
   \   000294   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000297   7C01         MOV       R4,#0x1
   \   000299   7D00         MOV       R5,#0x0
   \   00029B   7410         MOV       A,#0x10
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   AA82         MOV       R2,DPL
   \   0002A2   AB83         MOV       R3,DPH
   \   0002A4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002A7   7403         MOV       A,#0x3
   \   0002A9   12....       LCALL     ?DEALLOC_XSTACK8
    601              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   0002AC                ; Setup parameters for call to function osal_memcpy
   \   0002AC   7453         MOV       A,#0x53
   \   0002AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B1   A982         MOV       R1,DPL
   \   0002B3   AA83         MOV       R2,DPH
   \   0002B5   89..         MOV       ?V4,R1
   \   0002B7   8A..         MOV       ?V5,R2
   \   0002B9   78..         MOV       R0,#?V4
   \   0002BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002BE   7C10         MOV       R4,#0x10
   \   0002C0   7D00         MOV       R5,#0x0
   \   0002C2   7415         MOV       A,#0x15
   \   0002C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C7   AA82         MOV       R2,DPL
   \   0002C9   AB83         MOV       R3,DPH
   \   0002CB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002CE   7403         MOV       A,#0x3
   \   0002D0   12....       LCALL     ?DEALLOC_XSTACK8
    602            }
    603                   
    604            if ( pt_getSecFrameCounterCapabilities( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   0002D3   7441         MOV       A,#0x41
   \   0002D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D8   E0           MOVX      A,@DPTR
   \   0002D9   A2E5         MOV       C,0xE0 /* A   */.5
   \   0002DB   500A         JNC       ??gp_UpdateProxyTlb_14
    605            {
    606              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
   \   0002DD   85..82       MOV       DPL,?XSP + 0
   \   0002E0   85..83       MOV       DPH,?XSP + 1
   \   0002E3   E0           MOVX      A,@DPTR
   \   0002E4   D2E5         SETB      0xE0 /* A   */.5
   \   0002E6   F0           MOVX      @DPTR,A
    607            }
    608            
    609            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   0002E7                ; Setup parameters for call to function osal_memcpy
   \   0002E7   744F         MOV       A,#0x4f
   \   0002E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EC   A982         MOV       R1,DPL
   \   0002EE   AA83         MOV       R2,DPH
   \   0002F0   89..         MOV       ?V4,R1
   \   0002F2   8A..         MOV       ?V5,R2
   \   0002F4   78..         MOV       R0,#?V4
   \   0002F6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002F9   7C04         MOV       R4,#0x4
   \   0002FB   7D00         MOV       R5,#0x0
   \   0002FD   7411         MOV       A,#0x11
   \   0002FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000302   AA82         MOV       R2,DPL
   \   000304   AB83         MOV       R3,DPH
   \   000306   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000309   7403         MOV       A,#0x3
   \   00030B   12....       LCALL     ?DEALLOC_XSTACK8
    610          
    611            currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   00030E   7480         MOV       A,#-0x80
   \   000310   12....       LCALL     ?XSTACK_DISP0_8
   \   000313   E0           MOVX      A,@DPTR
   \   000314   C0E0         PUSH      A
   \   000316   743F         MOV       A,#0x3f
   \   000318   12....       LCALL     ?XSTACK_DISP0_8
   \   00031B   D0E0         POP       A
   \   00031D   F0           MOVX      @DPTR,A
    612              
    613            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \   00031E   7481         MOV       A,#-0x7f
   \   000320   12....       LCALL     ?XSTACK_DISP0_8
   \   000323   E0           MOVX      A,@DPTR
   \   000324   C0E0         PUSH      A
   \   000326   7440         MOV       A,#0x40
   \   000328   12....       LCALL     ?XSTACK_DISP0_8
   \   00032B   D0E0         POP       A
   \   00032D   F0           MOVX      @DPTR,A
    614             
    615            status = osal_nv_write( proxyTableIndex, 0,
    616                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   00032E                ; Setup parameters for call to function osal_nv_write
   \   00032E   A8..         MOV       R0,?XSP + 0
   \   000330   A9..         MOV       R1,?XSP + 1
   \   000332   88..         MOV       ?V4,R0
   \   000334   89..         MOV       ?V5,R1
   \   000336   78..         MOV       R0,#?V4
   \   000338   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00033B   75..41       MOV       ?V4,#0x41
   \   00033E   75..00       MOV       ?V5,#0x0
   \   000341   78..         MOV       R0,#?V4
   \   000343   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000346   7C00         MOV       R4,#0x0
   \   000348   7D00         MOV       R5,#0x0
   \   00034A   AA..         MOV       R2,?V0
   \   00034C   AB..         MOV       R3,?V1
   \   00034E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000351   7404         MOV       A,#0x4
   \   000353   12....       LCALL     ?DEALLOC_XSTACK8
   \   000356   E9           MOV       A,R1
   \   000357   FE           MOV       R6,A
    617            
    618            if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    619                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    620                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   000358   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   00035B   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   00035E                ; Setup parameters for call to function osal_memcmp
   \   00035E   740B         MOV       A,#0xb
   \   000360   12....       LCALL     ?XSTACK_DISP0_8
   \   000363   A982         MOV       R1,DPL
   \   000365   AA83         MOV       R2,DPH
   \   000367   89..         MOV       ?V4,R1
   \   000369   8A..         MOV       ?V5,R2
   \   00036B   78..         MOV       R0,#?V4
   \   00036D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000370   7C02         MOV       R4,#0x2
   \   000372   7D00         MOV       R5,#0x0
   \   000374   A9..         MOV       R1,?V0
   \   000376   AA..         MOV       R2,?V1
   \   000378   AB..         MOV       R3,?V2
   \   00037A   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00037D   7403         MOV       A,#0x3
   \   00037F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000382   E9           MOV       A,R1
   \   000383   704E         JNZ       ??gp_UpdateProxyTlb_3
   \   000385                ; Setup parameters for call to function osal_memcmp
   \   000385   7437         MOV       A,#0x37
   \   000387   12....       LCALL     ?XSTACK_DISP0_8
   \   00038A   A982         MOV       R1,DPL
   \   00038C   AA83         MOV       R2,DPH
   \   00038E   89..         MOV       ?V4,R1
   \   000390   8A..         MOV       ?V5,R2
   \   000392   78..         MOV       R0,#?V4
   \   000394   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000397   7C02         MOV       R4,#0x2
   \   000399   7D00         MOV       R5,#0x0
   \   00039B   A9..         MOV       R1,?V0
   \   00039D   AA..         MOV       R2,?V1
   \   00039F   AB..         MOV       R3,?V2
   \   0003A1   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0003A4   7403         MOV       A,#0x3
   \   0003A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003A9   E9           MOV       A,R1
   \   0003AA   7027         JNZ       ??gp_UpdateProxyTlb_3
   \   0003AC                ; Setup parameters for call to function osal_memcmp
   \   0003AC   743B         MOV       A,#0x3b
   \   0003AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B1   A982         MOV       R1,DPL
   \   0003B3   AA83         MOV       R2,DPH
   \   0003B5   89..         MOV       ?V4,R1
   \   0003B7   8A..         MOV       ?V5,R2
   \   0003B9   78..         MOV       R0,#?V4
   \   0003BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003BE   7C02         MOV       R4,#0x2
   \   0003C0   7D00         MOV       R5,#0x0
   \   0003C2   A9..         MOV       R1,?V0
   \   0003C4   AA..         MOV       R2,?V1
   \   0003C6   AB..         MOV       R3,?V2
   \   0003C8   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0003CB   7403         MOV       A,#0x3
   \   0003CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003D0   E9           MOV       A,R1
   \   0003D1   600D         JZ        ??gp_UpdateProxyTlb_1
    621            {
    622              NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
   \                     ??gp_UpdateProxyTlb_3:
   \   0003D3                ; Setup parameters for call to function NLME_ReportAddressConflict
   \   0003D3   7901         MOV       R1,#0x1
   \   0003D5   90....       MOV       DPTR,#_NIB + 20
   \   0003D8   E0           MOVX      A,@DPTR
   \   0003D9   FA           MOV       R2,A
   \   0003DA   A3           INC       DPTR
   \   0003DB   E0           MOVX      A,@DPTR
   \   0003DC   FB           MOV       R3,A
   \   0003DD   12....       LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
    623            }
    624            
    625            return status;
   \                     ??gp_UpdateProxyTlb_1:
   \   0003E0   EE           MOV       A,R6
   \   0003E1   F9           MOV       R1,A
   \                     ??gp_UpdateProxyTlb_7:
   \   0003E2   758204       MOV       DPL,#0x4
   \   0003E5   758301       MOV       DPH,#0x1
   \   0003E8   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   0003EB   02....       LJMP      ?Subroutine0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   0003EE   7442         MOV       A,#0x42
   \   0003F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F3   E0           MOVX      A,@DPTR
   \   0003F4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0003F6   4003         JC        $+5
   \   0003F8   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   0003FB                ; Setup parameters for call to function pt_addSinkGroup
   \   0003FB   AC..         MOV       R4,?XSP + 0
   \   0003FD   AD..         MOV       R5,?XSP + 1
   \   0003FF   7441         MOV       A,#0x41
   \   000401   12....       LCALL     ?XSTACK_DISP101_8
   \   000404   12....       LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   000407   E9           MOV       A,R1
   \   000408   6003         JZ        $+5
   \   00040A   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   00040D   790C         MOV       R1,#0xc
   \   00040F   80D1         SJMP      ??gp_UpdateProxyTlb_7
    626          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    627          
    628          /*********************************************************************
    629           * @fn          gp_CheckAnnouncedDevice
    630           *
    631           * @brief       General function to check if it has the announced device 
    632           *              listed in the SinkAddressList and look for address conflict
    633           *              resolution.
    634           *
    635           * @param       
    636           *
    637           * @return      
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 67
   \   000005   74BD         MOV       A,#-0x43
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   8A..         MOV       ?V12,R2
   \   000017   8B..         MOV       ?V13,R3
    641            uint8 i;
    642            uint8 status;
    643            uint8 annceDelay;
    644            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    645          
    646            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   8A..         MOV       ?V4,R2
   \   00001D   8B..         MOV       ?V5,R3
   \   00001F   8E..         MOV       ?V6,R6
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V0,R0
   \   000027   89..         MOV       ?V1,R1
   \   000029   8E..         MOV       ?V2,R6
    647            {
    648              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00002B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   2410         ADD       A,#0x10
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003B   E9           MOV       A,R1
   \   00003C   F8           MOV       R0,A
    649          
    650              if ( status == NV_OPER_FAILED )
   \   00003D   740A         MOV       A,#0xa
   \   00003F   68           XRL       A,R0
   \   000040   7005         JNZ       ??gp_CheckAnnouncedDevice_1
    651              {
    652                // FAIL
    653          
    654                return ZFailure;
   \   000042   7901         MOV       R1,#0x1
   \   000044   02....       LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    655              }
    656              
    657              // if the entry is empty
    658              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_1:
   \   000047   740D         MOV       A,#0xd
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    659              {
    660                continue;
    661              }
    662              
    663              // Compare for nwk alias address conflict
    664              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    665                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    666                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   740D         MOV       A,#0xd
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V8,R1
   \   00005A   8A..         MOV       ?V9,R2
   \   00005C   75..00       MOV       ?V10,#0x0
   \   00005F   78..         MOV       R0,#?V8
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C02         MOV       R4,#0x2
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   E9           MOV       A,R1
   \   000077   704E         JNZ       ??gp_CheckAnnouncedDevice_4
   \   000079                ; Setup parameters for call to function osal_memcmp
   \   000079   7439         MOV       A,#0x39
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   A982         MOV       R1,DPL
   \   000080   AA83         MOV       R2,DPH
   \   000082   89..         MOV       ?V8,R1
   \   000084   8A..         MOV       ?V9,R2
   \   000086   78..         MOV       R0,#?V8
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008B   7C02         MOV       R4,#0x2
   \   00008D   7D00         MOV       R5,#0x0
   \   00008F   A9..         MOV       R1,?V0
   \   000091   AA..         MOV       R2,?V1
   \   000093   AB..         MOV       R3,?V2
   \   000095   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000098   7403         MOV       A,#0x3
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   E9           MOV       A,R1
   \   00009E   7027         JNZ       ??gp_CheckAnnouncedDevice_4
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   743D         MOV       A,#0x3d
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   A982         MOV       R1,DPL
   \   0000A7   AA83         MOV       R2,DPH
   \   0000A9   89..         MOV       ?V8,R1
   \   0000AB   8A..         MOV       ?V9,R2
   \   0000AD   78..         MOV       R0,#?V8
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B2   7C02         MOV       R4,#0x2
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   A9..         MOV       R1,?V0
   \   0000B8   AA..         MOV       R2,?V1
   \   0000BA   AB..         MOV       R3,?V2
   \   0000BC   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000BF   7403         MOV       A,#0x3
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   6077         JZ        ??gp_CheckAnnouncedDevice_5
    667              {
    668                // Do address conflict resolution
    669                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    670                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0000C7                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000C7   75..01       MOV       ?V3,#0x1
   \   0000CA   78..         MOV       R0,#?V3
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   790D         MOV       R1,#0xd
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   FC           MOV       R4,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FD           MOV       R5,A
   \   0000DB   7AFD         MOV       R2,#-0x3
   \   0000DD   7BFF         MOV       R3,#-0x1
   \   0000DF   12....       LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
    671                
    672                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   0000E7   85..82       MOV       DPL,?XSP + 0
   \   0000EA   85..83       MOV       DPH,?XSP + 1
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F8           MOV       R0,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F9           MOV       R1,A
   \   0000F2   90....       MOV       DPTR,#aliasConflictAnnce
   \   0000F5   E8           MOV       A,R0
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E9           MOV       A,R1
   \   0000F9   F0           MOVX      @DPTR,A
    673                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000FA                ; Setup parameters for call to function osal_memset
   \   0000FA   7C08         MOV       R4,#0x8
   \   0000FC   7D00         MOV       R5,#0x0
   \   0000FE   79FF         MOV       R1,#-0x1
   \   000100   7A..         MOV       R2,#(aliasConflictAnnce + 2) & 0xff
   \   000102   7B..         MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   000104   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    674                aliasConflictAnnce.capabilities = 0;
   \   000107   90....       MOV       DPTR,#aliasConflictAnnce + 10
   \   00010A   E4           CLR       A
   \   00010B   F0           MOVX      @DPTR,A
    675                
    676                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   00010C                ; Setup parameters for call to function osal_rand
   \   00010C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00010F   8A..         MOV       ?V8,R2
   \   000111   8B..         MOV       ?V9,R3
   \   000113   A8..         MOV       R0,?V8
   \   000115   A9..         MOV       R1,?V9
    677                // where:
    678                // 100 is Dmax
    679                // 5   is Dmin
    680                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   000117                ; Setup parameters for call to function osal_start_timerEx
   \   000117   7A8A         MOV       R2,#-0x76
   \   000119   7B02         MOV       R3,#0x2
   \   00011B   12....       LCALL     ?US_DIV_MOD
   \   00011E   E8           MOV       A,R0
   \   00011F   2405         ADD       A,#0x5
   \   000121   F5..         MOV       ?V8,A
   \   000123   E4           CLR       A
   \   000124   F5..         MOV       ?V9,A
   \   000126   F5..         MOV       ?V11,A
   \   000128   78..         MOV       R0,#?V8
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00012D   7A10         MOV       R2,#0x10
   \   00012F   7B00         MOV       R3,#0x0
   \   000131   90....       MOV       DPTR,#gp_TaskID
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F9           MOV       R1,A
   \   000136   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000139   7404         MOV       A,#0x4
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
    681              }
    682          
    683              if( sinkIEEE )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   00013E   E5..         MOV       A,?V12
   \   000140   45..         ORL       A,?V13
   \   000142   7003         JNZ       $+5
   \   000144   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    684              {
    685                //Check if one of the Sink IEEE is the same
    686                if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \   000147                ; Setup parameters for call to function osal_memcmp
   \   000147   7424         MOV       A,#0x24
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   A982         MOV       R1,DPL
   \   00014E   AA83         MOV       R2,DPH
   \   000150   89..         MOV       ?V8,R1
   \   000152   8A..         MOV       ?V9,R2
   \   000154   78..         MOV       R0,#?V8
   \   000156   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000159   7C08         MOV       R4,#0x8
   \   00015B   7D00         MOV       R5,#0x0
   \   00015D   A9..         MOV       R1,?V4
   \   00015F   AA..         MOV       R2,?V5
   \   000161   AB..         MOV       R3,?V6
   \   000163   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000166   7403         MOV       A,#0x3
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   E9           MOV       A,R1
   \   00016C   6034         JZ        ??gp_CheckAnnouncedDevice_6
    687                {
    688                  // If Nwk address is different, then update the new address
    689                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   00016E                ; Setup parameters for call to function osal_memcmp
   \   00016E   742C         MOV       A,#0x2c
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   A982         MOV       R1,DPL
   \   000175   AA83         MOV       R2,DPH
   \   000177   89..         MOV       ?V8,R1
   \   000179   8A..         MOV       ?V9,R2
   \   00017B   78..         MOV       R0,#?V8
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000180   7C02         MOV       R4,#0x2
   \   000182   7D00         MOV       R5,#0x0
   \   000184   A9..         MOV       R1,?V0
   \   000186   AA..         MOV       R2,?V1
   \   000188   AB..         MOV       R3,?V2
   \   00018A   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00018D   7403         MOV       A,#0x3
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   7075         JNZ       ??gp_CheckAnnouncedDevice_3
    690                  {
    691                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   000195                ; Setup parameters for call to function osal_memcpy
   \   000195   78..         MOV       R0,#?V0
   \   000197   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00019A   7C02         MOV       R4,#0x2
   \   00019C   7D00         MOV       R5,#0x0
   \   00019E   742F         MOV       A,#0x2f
   \   0001A0   8059         SJMP      ??gp_CheckAnnouncedDevice_7
    692                  }
    693                }
    694                else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   0001A2                ; Setup parameters for call to function osal_memcmp
   \   0001A2   742E         MOV       A,#0x2e
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   A982         MOV       R1,DPL
   \   0001A9   AA83         MOV       R2,DPH
   \   0001AB   89..         MOV       ?V8,R1
   \   0001AD   8A..         MOV       ?V9,R2
   \   0001AF   78..         MOV       R0,#?V8
   \   0001B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B4   7C08         MOV       R4,#0x8
   \   0001B6   7D00         MOV       R5,#0x0
   \   0001B8   A9..         MOV       R1,?V4
   \   0001BA   AA..         MOV       R2,?V5
   \   0001BC   AB..         MOV       R3,?V6
   \   0001BE   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001C1   7403         MOV       A,#0x3
   \   0001C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C6   E9           MOV       A,R1
   \   0001C7   6041         JZ        ??gp_CheckAnnouncedDevice_3
    695                {
    696                  // If Nwk address is different, then update the new address
    697                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   0001C9                ; Setup parameters for call to function osal_memcmp
   \   0001C9   7436         MOV       A,#0x36
   \   0001CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CE   A982         MOV       R1,DPL
   \   0001D0   AA83         MOV       R2,DPH
   \   0001D2   89..         MOV       ?V8,R1
   \   0001D4   8A..         MOV       ?V9,R2
   \   0001D6   78..         MOV       R0,#?V8
   \   0001D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001DB   7C02         MOV       R4,#0x2
   \   0001DD   7D00         MOV       R5,#0x0
   \   0001DF   A9..         MOV       R1,?V0
   \   0001E1   AA..         MOV       R2,?V1
   \   0001E3   AB..         MOV       R3,?V2
   \   0001E5   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001E8   7403         MOV       A,#0x3
   \   0001EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001ED   E9           MOV       A,R1
   \   0001EE   701A         JNZ       ??gp_CheckAnnouncedDevice_3
    698                  {
    699                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   0001F0                ; Setup parameters for call to function osal_memcpy
   \   0001F0   78..         MOV       R0,#?V0
   \   0001F2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001F5   7C02         MOV       R4,#0x2
   \   0001F7   7D00         MOV       R5,#0x0
   \   0001F9   7439         MOV       A,#0x39
   \                     ??gp_CheckAnnouncedDevice_7:
   \   0001FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FE   AA82         MOV       R2,DPL
   \   000200   AB83         MOV       R3,DPH
   \   000202   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000205   7403         MOV       A,#0x3
   \   000207   12....       LCALL     ?DEALLOC_XSTACK8
    700                  }
    701                }
    702              }
    703            }
   \                     ??gp_CheckAnnouncedDevice_3:
   \   00020A   0E           INC       R6
   \   00020B   EE           MOV       A,R6
   \   00020C   C3           CLR       C
   \   00020D   9406         SUBB      A,#0x6
   \   00020F   5003         JNC       $+5
   \   000211   02....       LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
    704              
    705            return ZSuccess;
   \   000214   7900         MOV       R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_2:
   \   000216   7443         MOV       A,#0x43
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021B   7F0E         MOV       R7,#0xe
   \   00021D   02....       LJMP      ?BANKED_LEAVE_XDATA
    706          }
    707          
    708           /*********************************************************************
    709           * PRIVATE FUNCTIONS
    710           *********************************************************************/
    711          
    712          /*********************************************************************
    713           * @fn          gp_PopulateProxyTblEntry
    714           *
    715           * @brief       Populate the given item data
    716           *
    717           * @param       pData - Pointer to the new data
    718           *              size - size of the new data
    719           *              pTblEntryVector - Pointer to the new vector
    720           *              vectorLen - Position in the vector to write the data
    721           *
    722           * @return
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8C..         MOV       ?V0,R4
   \   000009   8D..         MOV       ?V1,R5
   \   00000B   740F         MOV       A,#0xf
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FF           MOV       R7,A
    726            pTblEntryVector += *(uint8*)vectorLen;
    727            
    728            osal_memcpy( pTblEntryVector, pData, size );
   \   000015                ; Setup parameters for call to function osal_memcpy
   \   000015   8A..         MOV       ?V4,R2
   \   000017   8B..         MOV       ?V5,R3
   \   000019   75..00       MOV       ?V6,#0x0
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV       R4,?V2
   \   000023   7D00         MOV       R5,#0x0
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   E5..         MOV       A,?V0
   \   00002D   28           ADD       A,R0
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
    729            *(uint8*)vectorLen += size;
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   25..         ADD       A,?V2
   \   000042   F0           MOVX      @DPTR,A
    730          }
   \   000043   02....       LJMP      ?Subroutine0 & 0xFFFF
    731          
    732          /*********************************************************************
    733           * @fn          pt_getAlias
    734           *
    735           * @brief       Get Bit to update assigned alias field or not
    736           *
    737           * @param       pNew - New entry array to be added
    738           *
    739           * @return      newAlias - TRUE if assigned alias bit is set
    740           */
    741          static uint8 pt_getAlias( uint8* pNew )
    742          {
    743            bool newAlias;
    744            
    745            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    746            
    747            return newAlias;
    748          }
    749          
    750          /*********************************************************************
    751           * @fn          pt_getSecurity
    752           *
    753           * @brief       Get Bit to update security options field or not
    754           *
    755           * @param       pNew - New entry array to be added
    756           *
    757           * @return      secUse - TRUE if security use bit is set
    758           */
    759          static uint8 pt_getSecurity( uint8* pNew )
    760          {
    761            bool secUse;
    762            
    763            secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    764          
    765            return secUse;
    766          }
    767          
    768          /*********************************************************************
    769           * @fn          pt_getSecFrameCounterCapabilities
    770           *
    771           * @brief       Get Bit to update security frame counter capabilities
    772           *
    773           * @param       pNew - New entry array to be added
    774           *
    775           * @return      secCap - TRUE if security frame counter capabilities bit is set
    776           */
    777          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
    778          {
    779            bool secCap;
    780            
    781            secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
    782            
    783            return secCap;
    784          }
    785          
    786          /*********************************************************************
    787           * @fn          pt_updateLightweightUnicastSink
    788           *
    789           * @brief       To add new sink entry
    790           *
    791           * @param       pNew - New entry array to be added
    792           *              pCurr - The current entry array in the proxy table
    793           *
    794           * @return      TRUE new entry added, FALSE if not
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 142
   \   000005   7472         MOV       A,#0x72
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   E9           MOV       A,R1
   \   000016   FE           MOV       R6,A
    798            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000017   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_6`
   \   00001A   744D         MOV       A,#0x4d
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   7441         MOV       A,#0x41
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    799            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000024   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_7`
   \   000027   740C         MOV       A,#0xc
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7441         MOV       A,#0x41
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    800            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000031   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_8`
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   740A         MOV       A,#0xa
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    801            
    802            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   F5..         MOV       ?V2,A
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000049   7C41         MOV       R4,#0x41
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7450         MOV       A,#0x50
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000055   7403         MOV       A,#0x3
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
    803            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F5..         MOV       ?V0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V1,A
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006C   7C41         MOV       R4,#0x41
   \   00006E   7D00         MOV       R5,#0x0
   \   000070   740F         MOV       A,#0xf
   \   000072   12....       LCALL     ?XSTACK_DISP101_8
   \   000075   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000078   7403         MOV       A,#0x3
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
    804            
    805            
    806            // if addSink is TRUE then add the sink to current entry
    807            if ( addSink ) 
   \   00007D   7438         MOV       A,#0x38
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   A982         MOV       R1,DPL
   \   000084   AA83         MOV       R2,DPH
   \   000086   89..         MOV       ?V8,R1
   \   000088   8A..         MOV       ?V9,R2
   \   00008A   75..00       MOV       ?V10,#0x0
   \   00008D   742E         MOV       A,#0x2e
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   A982         MOV       R1,DPL
   \   000094   AA83         MOV       R2,DPH
   \   000096   89..         MOV       ?V4,R1
   \   000098   8A..         MOV       ?V5,R2
   \   00009A   75..00       MOV       ?V6,#0x0
   \   00009D   746F         MOV       A,#0x6f
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   A982         MOV       R1,DPL
   \   0000A4   AA83         MOV       R2,DPH
   \   0000A6   89..         MOV       ?V0,R1
   \   0000A8   8A..         MOV       ?V1,R2
   \   0000AA   7402         MOV       A,#0x2
   \   0000AC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AF   88..         MOV       ?V12,R0
   \   0000B1   89..         MOV       ?V13,R1
   \   0000B3   75..00       MOV       ?V14,#0x0
   \   0000B6   EE           MOV       A,R6
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   605E         JZ        ??pt_updateLightweightUnicastSink_0
    808            {
    809              // if the incomming Sink entry is different to the current entry
    810              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000BB                ; Setup parameters for call to function osal_memcmp
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BE   7C0A         MOV       R4,#0xa
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   A9..         MOV       R1,?V4
   \   0000C4   AA..         MOV       R2,?V5
   \   0000C6   AB..         MOV       R3,?V6
   \   0000C8   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000CB   7403         MOV       A,#0x3
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV       A,R1
   \   0000D1   6003         JZ        $+5
   \   0000D3   02....       LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    811              {
    812                // add the sink entry in the next slot if empty
    813                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000D6                ; Setup parameters for call to function osal_memcmp
   \   0000D6   78..         MOV       R0,#?V8
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DB   7C0A         MOV       R4,#0xa
   \   0000DD   7D00         MOV       R5,#0x0
   \   0000DF   A9..         MOV       R1,?V12
   \   0000E1   AA..         MOV       R2,?V13
   \   0000E3   AB..         MOV       R3,?V14
   \   0000E5   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000E8   7403         MOV       A,#0x3
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000ED   E9           MOV       A,R1
   \   0000EE   78..         MOV       R0,#?V0
   \   0000F0   6006         JZ        ??pt_updateLightweightUnicastSink_2
    814                {
    815                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   0000F2                ; Setup parameters for call to function osal_memcpy
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F5   02....       LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    816                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    817                  return TRUE;
    818                }
    819              }
    820              else 
    821              {
    822                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    823               return TRUE;
    824              }
    825              // if the incomming Sink entry is different to the current entry
    826              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   0000F8                ; Setup parameters for call to function osal_memcmp
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FB   7C0A         MOV       R4,#0xa
   \   0000FD   7D00         MOV       R5,#0x0
   \   0000FF   A9..         MOV       R1,?V8
   \   000101   AA..         MOV       R2,?V9
   \   000103   AB..         MOV       R3,?V10
   \   000105   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000108   7403         MOV       A,#0x3
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
    827              {
    828                return FALSE;
    829              }
    830            }
    831            else
    832            {
    833              // if the incomming Sink entry is the same to the current entry
    834              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    835              {
    836                // Move the next sink entry to current
    837                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    838                // Invalidate the sink entry
    839                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    840                
    841                // if the sink entry is empty then remove the proxy table entry
    842                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    843                {
    844                  gp_ResetProxyBasicTblEntry( currEntry );
    845                }
    846                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    847                return TRUE;
    848              }
    849              // if the incomming Sink entry is the same to the current entry
    850              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    851              {
    852                // Invalidate the sink entry
    853                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    854                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    855                return TRUE;
    856              }
    857            }
    858            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   00010D   7900         MOV       R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   00010F   748E         MOV       A,#-0x72
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   \   000114   7F0F         MOV       R7,#0xf
   \   000116   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??pt_updateLightweightUnicastSink_0:
   \   000119                ; Setup parameters for call to function osal_memcmp
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011C   7C0A         MOV       R4,#0xa
   \   00011E   7D00         MOV       R5,#0x0
   \   000120   A9..         MOV       R1,?V4
   \   000122   AA..         MOV       R2,?V5
   \   000124   AB..         MOV       R3,?V6
   \   000126   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000129   7403         MOV       A,#0x3
   \   00012B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012E   E9           MOV       A,R1
   \   00012F   607F         JZ        ??pt_updateLightweightUnicastSink_6
   \   000131                ; Setup parameters for call to function osal_memcpy
   \   000131   78..         MOV       R0,#?V8
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000136   7C0A         MOV       R4,#0xa
   \   000138   7D00         MOV       R5,#0x0
   \   00013A   7431         MOV       A,#0x31
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   AA82         MOV       R2,DPL
   \   000141   AB83         MOV       R3,DPH
   \   000143   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000146   7403         MOV       A,#0x3
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014B                ; Setup parameters for call to function osal_memcpy
   \   00014B   78..         MOV       R0,#?V12
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000150   7C0A         MOV       R4,#0xa
   \   000152   7D00         MOV       R5,#0x0
   \   000154   743B         MOV       A,#0x3b
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   AA82         MOV       R2,DPL
   \   00015B   AB83         MOV       R3,DPH
   \   00015D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000160   7403         MOV       A,#0x3
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165                ; Setup parameters for call to function osal_memcmp
   \   000165   78..         MOV       R0,#?V4
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016A   7C0A         MOV       R4,#0xa
   \   00016C   7D00         MOV       R5,#0x0
   \   00016E   A9..         MOV       R1,?V12
   \   000170   AA..         MOV       R2,?V13
   \   000172   AB..         MOV       R3,?V14
   \   000174   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000177   7403         MOV       A,#0x3
   \   000179   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017C   E9           MOV       A,R1
   \   00017D   6008         JZ        ??pt_updateLightweightUnicastSink_1
   \   00017F                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   00017F   740C         MOV       A,#0xc
   \   000181   12....       LCALL     ?XSTACK_DISP101_8
   \   000184   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
   \                     ??pt_updateLightweightUnicastSink_1:
   \   000187                ; Setup parameters for call to function osal_memcpy
   \   000187   740C         MOV       A,#0xc
   \   000189   12....       LCALL     ?XSTACK_DISP100_8
   \   00018C   88..         MOV       ?V0,R0
   \   00018E   89..         MOV       ?V1,R1
   \   000190   78..         MOV       R0,#?V0
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000195   7C41         MOV       R4,#0x41
   \   000197   7D00         MOV       R5,#0x0
   \   000199   7403         MOV       A,#0x3
   \   00019B   12....       LCALL     ?XSTACK_DISP0_8
   \   00019E   E0           MOVX      A,@DPTR
   \   00019F   FA           MOV       R2,A
   \   0001A0   A3           INC       DPTR
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   FB           MOV       R3,A
   \   0001A3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A6   7403         MOV       A,#0x3
   \   0001A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AB   7901         MOV       R1,#0x1
   \   0001AD   02....       LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   0001B0                ; Setup parameters for call to function osal_memcmp
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B5   7C0A         MOV       R4,#0xa
   \   0001B7   7D00         MOV       R5,#0x0
   \   0001B9   A9..         MOV       R1,?V8
   \   0001BB   AA..         MOV       R2,?V9
   \   0001BD   AB..         MOV       R3,?V10
   \   0001BF   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001C2   7403         MOV       A,#0x3
   \   0001C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C7   E9           MOV       A,R1
   \   0001C8   7003         JNZ       $+5
   \   0001CA   02....       LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   0001CD                ; Setup parameters for call to function osal_memcpy
   \   0001CD   78..         MOV       R0,#?V12
   \   0001CF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   0001D2   7C0A         MOV       R4,#0xa
   \   0001D4   7D00         MOV       R5,#0x0
   \   0001D6   743B         MOV       A,#0x3b
   \   0001D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DB   AA82         MOV       R2,DPL
   \   0001DD   AB83         MOV       R3,DPH
   \   0001DF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001E2   7403         MOV       A,#0x3
   \   0001E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E7   809E         SJMP      ??pt_updateLightweightUnicastSink_1
    859          }
    860          
    861          /*********************************************************************
    862           * @fn          pt_addSinkGroup
    863           *
    864           * @brief       To add new sink group entry
    865           *
    866           * @param       pNew - New entry array to be added
    867           *              pCurr - The current entry array in the proxy table
    868           *
    869           * @return      TRUE new entry added, FALSE if not
    870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 130
   \   000005   747E         MOV       A,#0x7e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    873            bool newSinkGroup;
    874            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_9`
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    875            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_10`
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7441         MOV       A,#0x41
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    876            
    877            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   \   00002B   F5..         MOV       ?V2,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C41         MOV       R4,#0x41
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7444         MOV       A,#0x44
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
    878            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   8E..         MOV       ?V0,R6
   \   000045   8F..         MOV       ?V1,R7
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004C   7C41         MOV       R4,#0x41
   \   00004E   7D00         MOV       R5,#0x0
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?XSTACK_DISP101_8
   \   000055   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000058   7403         MOV       A,#0x3
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
    879            
    880            newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
    881            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    882            
    883            if ( newSinkGroup )
    884            {
    885              if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \   00005D   7442         MOV       A,#0x42
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   A2E0         MOV       C,0xE0 /* A   */.0
   \   000065   4003         JC        $+5
   \   000067   02....       LJMP      ??pt_addSinkGroup_0 & 0xFFFF
   \   00006A   7436         MOV       A,#0x36
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   A2E1         MOV       C,0xE0 /* A   */.1
   \   000072   5003         JNC       $+5
   \   000074   02....       LJMP      ??pt_addSinkGroup_0 & 0xFFFF
    886              {
    887                if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   000077   7478         MOV       A,#0x78
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   A982         MOV       R1,DPL
   \   00007E   AA83         MOV       R2,DPH
   \   000080   89..         MOV       ?V4,R1
   \   000082   8A..         MOV       ?V5,R2
   \   000084   75..00       MOV       ?V6,#0x0
   \   000087   A8..         MOV       R0,?XSP + 0
   \   000089   A9..         MOV       R1,?XSP + 1
   \   00008B   88..         MOV       ?V0,R0
   \   00008D   89..         MOV       ?V1,R1
   \   00008F   7436         MOV       A,#0x36
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   E0           MOVX      A,@DPTR
   \   000095   A2E0         MOV       C,0xE0 /* A   */.0
   \   000097   78..         MOV       R0,#?V4
   \   000099   4022         JC        ??pt_addSinkGroup_1
    888                {
    889                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \   00009B                ; Setup parameters for call to function osal_memcpy
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009E   7C04         MOV       R4,#0x4
   \   0000A0   7D00         MOV       R5,#0x0
   \   0000A2   743A         MOV       A,#0x3a
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   AA82         MOV       R2,DPL
   \   0000A9   AB83         MOV       R3,DPH
   \   0000AB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
    890                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
   \   0000B3   7436         MOV       A,#0x36
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   D2E0         SETB      0xE0 /* A   */.0
   \   0000BB   8020         SJMP      ??pt_addSinkGroup_2
    891                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    892                  return TRUE;
    893                }
    894                else
    895                {
    896                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \                     ??pt_addSinkGroup_1:
   \   0000BD                ; Setup parameters for call to function osal_memcpy
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C0   7C04         MOV       R4,#0x4
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   743E         MOV       A,#0x3e
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV       R2,DPL
   \   0000CB   AB83         MOV       R3,DPH
   \   0000CD   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
    897                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
   \   0000D5   7436         MOV       A,#0x36
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   D2E1         SETB      0xE0 /* A   */.1
   \                     ??pt_addSinkGroup_2:
   \   0000DD   F0           MOVX      @DPTR,A
    898                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   0000DE                ; Setup parameters for call to function osal_memcpy
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E3   7C41         MOV       R4,#0x41
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   EE           MOV       A,R6
   \   0000E8   FA           MOV       R2,A
   \   0000E9   EF           MOV       A,R7
   \   0000EA   FB           MOV       R3,A
   \   0000EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
    899                  return TRUE;
   \   0000F3   7901         MOV       R1,#0x1
   \   0000F5   8002         SJMP      ??pt_addSinkGroup_3
    900                }
    901              }
    902            }
    903            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   0000F7   7900         MOV       R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   0000F9   7482         MOV       A,#-0x7e
   \   0000FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FE                REQUIRE ?Subroutine0
   \   0000FE                ; // Fall through to label ?Subroutine0
    904          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_ZclReadGetProxyEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_ZclReadGetProxyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGpp_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGpp_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_pairingSetProxyTblOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_pairingSetProxyTblOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PairingUpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PairingUpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_UpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_UpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CheckAnnouncedDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CheckAnnouncedDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateProxyTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateProxyTblEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_updateLightweightUnicastSink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_updateLightweightUnicastSink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_addSinkGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_addSinkGroup

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_3`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_4`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_5`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_6`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_7`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_8`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_9`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_10`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_11`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_12`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536
    905          
    906          /*********************************************************************
    907           * @fn          pt_lookForGpd
    908           *
    909           * @brief       To see if the GPD id is in this NV entry
    910           *
    911           * @param       currProxyEntryId - NV ID of the proxy table
    912           *              pNew - New tabble entry array to be added
    913           *
    914           * @return      TRUE if the GPD has an entry in current NV vector
    915           */
    916          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    917          {
    918            uint8 rtrn;
    919          
    920            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    921            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    922          
    923            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    924            
    925            rtrn = osal_nv_read( currProxyEntryId, 0,
    926                                       PROXY_TBL_ENTRY_LEN, currEntry );
    927            
    928            if ( rtrn != SUCCESS )
    929            {
    930              return FALSE;
    931            }
    932          
    933            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    934            {
    935              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    936              {
    937              return TRUE;
    938              }
    939            }
    940            return FALSE;
    941          }
    942          
    943          #endif
    944          /*********************************************************************
    945          *********************************************************************/
    946          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     93   gp_CheckAnnouncedDevice
        0     90   -> NLME_SendNetworkStatus
        0     89   -> gp_getProxyTableByIndex
        0     92   -> osal_memcmp
        0     92   -> osal_memcpy
        0     89   -> osal_memset
        0     89   -> osal_rand
        0     93   -> osal_start_timerEx
      0     95   gp_PairingUpdateProxyTlb
        0     94   -> gp_PopulateProxyTblEntry
        0     92   -> gp_UpdateProxyTlb
        0     92   -> gp_pairingSetProxyTblOptions
        0     95   -> osal_memcpy
        0     92   -> osal_memset
      0    190   gp_PopulateProxyTblEntry
        0     18   -> osal_memcpy
      1    371   gp_UpdateProxyTlb
        0    275   -> NLME_ReportAddressConflict
        0    275   -> gp_ResetProxyBasicTblEntry
        0    275   -> gp_getProxyTableByIndex
        0    278   -> osal_memcmp
        0    278   -> osal_memcpy
        0    279   -> osal_nv_read
        0    279   -> osal_nv_write
        0    275   -> pt_addSinkGroup
        0    275   -> pt_updateLightweightUnicastSink
      1    110   gp_pairingSetProxyTblOptions
      1    187   pt_ZclReadGetProxyEntry
        0    172   -> gp_PopulateProxyTblEntry
        0    170   -> gp_getProxyTableByIndex
        0    173   -> osal_memcmp
        0    173   -> osal_memcpy
      0    423   pt_addSinkGroup
        0    148   -> osal_memcpy
      0    443   pt_updateLightweightUnicastSink
        0    165   -> gp_ResetProxyBasicTblEntry
        0    168   -> osal_memcmp
        0    168   -> osal_memcpy
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_10
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_11
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_12
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_3
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_4
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_5
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_6
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_7
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_8
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_9
       5  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
       9  ?Subroutine3
       9  ?Subroutine4
       4  __Constant_10000
      11  aliasConflictAnnce
     544  gp_CheckAnnouncedDevice
       6  gp_CheckAnnouncedDevice::?relay
     978  gp_PairingUpdateProxyTlb
       6  gp_PairingUpdateProxyTlb::?relay
      70  gp_PopulateProxyTblEntry
       6  gp_PopulateProxyTblEntry::?relay
    1041  gp_UpdateProxyTlb
       6  gp_UpdateProxyTlb::?relay
     284  gp_pairingSetProxyTblOptions
       6  gp_pairingSetProxyTblOptions::?relay
    1247  pt_ZclReadGetProxyEntry
       6  pt_ZclReadGetProxyEntry::?relay
     254  pt_addSinkGroup
       6  pt_addSinkGroup::?relay
     489  pt_updateLightweightUnicastSink
       6  pt_updateLightweightUnicastSink::?relay
     100  zclGpp_ReadWriteAttrCB
       6  zclGpp_ReadWriteAttrCB::?relay

 
 5 052 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
   741 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
   737 bytes of CONST    memory (+ 4 bytes shared)
 5 052 bytes of HUGECODE memory
    11 bytes of XDATA    memory

Errors: none
Warnings: none
