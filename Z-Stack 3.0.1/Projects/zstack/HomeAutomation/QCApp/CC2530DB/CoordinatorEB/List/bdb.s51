///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              19/Dec/2017  10:31:36
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Components\stack\bdb\bdb.c
//    Command line       =  
//        -f C:\Users\sam\AppData\Local\Temp\EW1A44.tmp
//        ("C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Components\stack\bdb\bdb.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
//        ZCL_GROUPS -lC "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\target\QC_CC2530\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List\bdb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,0203H
        PUBLIC `??bdb_ClearNetworkParams::?relay`
        FUNCTION `??bdb_ClearNetworkParams::?relay`,0203H
        PUBLIC `??bdb_CreateRespondentList::?relay`
        FUNCTION `??bdb_CreateRespondentList::?relay`,0203H
        PUBLIC `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,0203H
        PUBLIC `??bdb_Init::?relay`
        FUNCTION `??bdb_Init::?relay`,0203H
        PUBLIC `??bdb_NetworkRestoredResumeState::?relay`
        FUNCTION `??bdb_NetworkRestoredResumeState::?relay`,0203H
        PUBLIC `??bdb_NotifyCommissioningModeStart::?relay`
        FUNCTION `??bdb_NotifyCommissioningModeStart::?relay`,0203H
        PUBLIC `??bdb_ProcessNodeDescRsp::?relay`
        FUNCTION `??bdb_ProcessNodeDescRsp::?relay`,0203H
        PUBLIC `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,0203H
        PUBLIC `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,0203H
        PUBLIC `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`
        FUNCTION `??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`,0203H
        PUBLIC `??bdb_SendMsg::?relay`
        FUNCTION `??bdb_SendMsg::?relay`,0203H
        PUBLIC `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,0203H
        PUBLIC `??bdb_TCAddJoiningDevice::?relay`
        FUNCTION `??bdb_TCAddJoiningDevice::?relay`,0203H
        FUNCTION `??bdb_TCJoiningDeviceFree::?relay`,0203H
        FUNCTION `??bdb_TCProcessJoiningList::?relay`,0203H
        PUBLIC `??bdb_TCjoiningDeviceComplete::?relay`
        FUNCTION `??bdb_TCjoiningDeviceComplete::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,0203H
        PUBLIC `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,0203H
        PUBLIC `??bdb_calculateCCITT_CRC::?relay`
        FUNCTION `??bdb_calculateCCITT_CRC::?relay`,0203H
        PUBLIC `??bdb_crcBitByBitFast::?relay`
        FUNCTION `??bdb_crcBitByBitFast::?relay`,0203H
        PUBLIC `??bdb_crcInit::?relay`
        FUNCTION `??bdb_crcInit::?relay`,0203H
        PUBLIC `??bdb_crcReflect::?relay`
        FUNCTION `??bdb_crcReflect::?relay`,0203H
        PUBLIC `??bdb_doTrustCenterRequireKeyExchange::?relay`
        FUNCTION `??bdb_doTrustCenterRequireKeyExchange::?relay`,0203H
        PUBLIC `??bdb_event_loop::?relay`
        FUNCTION `??bdb_event_loop::?relay`,0203H
        PUBLIC `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,0203H
        PUBLIC `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,0203H
        PUBLIC `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,0203H
        FUNCTION `??bdb_nwkJoiningFormation::?relay`,0203H
        FUNCTION `??bdb_nwkSteeringDeviceOnNwk::?relay`,0203H
        PUBLIC `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,0203H
        PUBLIC `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,0203H
        PUBLIC `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,0203H
        PUBLIC `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,0203H
        PUBLIC `??bdb_setChannel::?relay`
        FUNCTION `??bdb_setChannel::?relay`,0203H
        PUBLIC `??bdb_setChannelAttribute::?relay`
        FUNCTION `??bdb_setChannelAttribute::?relay`,0203H
        PUBLIC `??bdb_setCommissioningGroupID::?relay`
        FUNCTION `??bdb_setCommissioningGroupID::?relay`,0203H
        PUBLIC `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,0203H
        PUBLIC `??bdb_setJoinUsesInstallCodeKey::?relay`
        FUNCTION `??bdb_setJoinUsesInstallCodeKey::?relay`,0203H
        PUBLIC `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,0203H
        PUBLIC `??bdb_setTCRequireKeyExchange::?relay`
        FUNCTION `??bdb_setTCRequireKeyExchange::?relay`,0203H
        FUNCTION `??bdb_startResumeCommissioningProcess::?relay`,0203H
        PUBLIC `??bdb_touchlinkSendFNReset::?relay`
        FUNCTION `??bdb_touchlinkSendFNReset::?relay`,0203H
        PUBLIC `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,0203H
        FUNCTION `??gp_ChangeChannelReq::?relay`,0203H
        PUBWEAK __Constant_10
        PUBWEAK __Constant_32
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_c8
        PUBLIC bdbAttributes
        PUBLIC bdbCommissioningProcedureState
        PUBLIC bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_ClearNetworkParams
        FUNCTION bdb_ClearNetworkParams,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_CreateRespondentList
        FUNCTION bdb_CreateRespondentList,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_CurrEpDescriptorList
        PUBLIC bdb_FB_InitiatorCurrentCyclesNumber
        PUBLIC bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBLIC bdb_HeadEpDescriptorList
        PUBLIC bdb_Init
        FUNCTION bdb_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_NetworkRestoredResumeState
        FUNCTION bdb_NetworkRestoredResumeState,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_NotifyCommissioningModeStart
        FUNCTION bdb_NotifyCommissioningModeStart,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_ProcessNodeDescRsp
        FUNCTION bdb_ProcessNodeDescRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_RegisterTCLinkKeyExchangeProcessCB
        FUNCTION bdb_RegisterTCLinkKeyExchangeProcessCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_SendMsg
        FUNCTION bdb_SendMsg,0a1203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bdb_TCAddJoiningDevice
        FUNCTION bdb_TCAddJoiningDevice,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        FUNCTION bdb_TCJoiningDeviceFree,0a1203H
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION bdb_TCProcessJoiningList,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 61, STACK
        PUBLIC bdb_TCjoiningDeviceComplete
        FUNCTION bdb_TCjoiningDeviceComplete,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC bdb_TaskID
        PUBLIC bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_ZclTransactionSequenceNumber
        PUBLIC bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC bdb_calculateCCITT_CRC
        FUNCTION bdb_calculateCCITT_CRC,0a1203H
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bdb_crcBitByBitFast
        FUNCTION bdb_crcBitByBitFast,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_crcInit
        FUNCTION bdb_crcInit,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_crcReflect
        FUNCTION bdb_crcReflect,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_doTrustCenterRequireKeyExchange
        FUNCTION bdb_doTrustCenterRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_event_loop
        FUNCTION bdb_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_initialization
        PUBLIC bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkJoiningFormation,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION bdb_nwkSteeringDeviceOnNwk,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_parentLost
        FUNCTION bdb_parentLost,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0a1203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setChannel
        FUNCTION bdb_setChannel,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_setChannelAttribute
        FUNCTION bdb_setChannelAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_setCommissioningGroupID
        FUNCTION bdb_setCommissioningGroupID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setFN
        FUNCTION bdb_setFN,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setJoinUsesInstallCodeKey
        FUNCTION bdb_setJoinUsesInstallCodeKey,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_setTCRequireKeyExchange
        FUNCTION bdb_setTCRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_startResumeCommissioningProcess,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC bdb_touchlinkSendFNReset
        FUNCTION bdb_touchlinkSendFNReset,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION gp_ChangeChannelReq,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC pRespondentCurr
        PUBLIC pRespondentHead
        PUBLIC pRespondentNext
        PUBLIC touchLinkTargetEnabled
        PUBLIC vDoPrimaryScan
        PUBLIC zgBdbInstallCodeCRC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_AddTCLinkKey  SYMBOL "APSME_AddTCLinkKey"
`??APSME_AddTCLinkKey::?relay` SYMBOL "?relay", APSME_AddTCLinkKey
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_SearchTCLinkKeyEntry SYMBOL "APSME_SearchTCLinkKeyEntry"
`??APSME_SearchTCLinkKeyEntry::?relay` SYMBOL "?relay", APSME_SearchTCLinkKeyEntry
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
`?<Name GP_DataCnf 8>` SYMBOL "GP_DataCnf"
`??GP_DataCnf::?relay` SYMBOL "?relay", `?<Name GP_DataCnf 8>`
`?<Name GP_DataInd 10>` SYMBOL "GP_DataInd"
`??GP_DataInd::?relay` SYMBOL "?relay", `?<Name GP_DataInd 10>`
`?<Name GP_SecReq 12>` SYMBOL "GP_SecReq"
`??GP_SecReq::?relay` SYMBOL "?relay", `?<Name GP_SecReq 12>`
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_ResetRequest   SYMBOL "NLME_ResetRequest"
`??NLME_ResetRequest::?relay` SYMBOL "?relay", NLME_ResetRequest
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
bdb_setNodeJoinLinkKeyType SYMBOL "bdb_setNodeJoinLinkKeyType"
`??bdb_setNodeJoinLinkKeyType::?relay` SYMBOL "?relay", bdb_setNodeJoinLinkKeyType
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
`?<Name gp_CheckAnnouncedDev 62>` SYMBOL "gp_CheckAnnouncedDevice"
`??gp_CheckAnnouncedDevice::?relay` SYMBOL "?relay", `?<Name gp_CheckAnnouncedDev 62>`
gp_RegisterGPChangeChannelReqForBDBCB SYMBOL "gp_RegisterGPChangeChannelReqForBDBCB"
`??gp_RegisterGPChangeChannelReqForBDBCB::?relay` SYMBOL "?relay", gp_RegisterGPChangeChannelReqForBDBCB
gp_endpointInit     SYMBOL "gp_endpointInit"
`??gp_endpointInit::?relay` SYMBOL "?relay", gp_endpointInit
`?<Name gp_expireDuplicateFi 68>` SYMBOL "gp_expireDuplicateFiltering"
`??gp_expireDuplicateFiltering::?relay` SYMBOL "?relay", `?<Name gp_expireDuplicateFi 68>`
`?<Name gp_returnOperational 70>` SYMBOL "gp_returnOperationalChannel"
`??gp_returnOperationalChannel::?relay` SYMBOL "?relay", `?<Name gp_returnOperational 70>`
`?<Name gp_stopCommissioning 72>` SYMBOL "gp_stopCommissioningMode"
`??gp_stopCommissioningMode::?relay` SYMBOL "?relay", `?<Name gp_stopCommissioning 72>`
nwk_setStateIdle    SYMBOL "nwk_setStateIdle"
`??nwk_setStateIdle::?relay` SYMBOL "?relay", nwk_setStateIdle
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_reload_timer SYMBOL "osal_start_reload_timer"
`??osal_start_reload_timer::?relay` SYMBOL "?relay", osal_start_reload_timer
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sspMMOHash          SYMBOL "sspMMOHash"
`??sspMMOHash::?relay` SYMBOL "?relay", sspMMOHash
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_ClearNetworkParams SYMBOL "bdb_ClearNetworkParams"
`??bdb_ClearNetworkParams::?relay` SYMBOL "?relay", bdb_ClearNetworkParams
bdb_CreateRespondentList SYMBOL "bdb_CreateRespondentList"
`??bdb_CreateRespondentList::?relay` SYMBOL "?relay", bdb_CreateRespondentList
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_Init            SYMBOL "bdb_Init"
`??bdb_Init::?relay` SYMBOL "?relay", bdb_Init
bdb_NetworkRestoredResumeState SYMBOL "bdb_NetworkRestoredResumeState"
`??bdb_NetworkRestoredResumeState::?relay` SYMBOL "?relay", bdb_NetworkRestoredResumeState
bdb_NotifyCommissioningModeStart SYMBOL "bdb_NotifyCommissioningModeStart"
`??bdb_NotifyCommissioningModeStart::?relay` SYMBOL "?relay", bdb_NotifyCommissioningModeStart
bdb_ProcessNodeDescRsp SYMBOL "bdb_ProcessNodeDescRsp"
`??bdb_ProcessNodeDescRsp::?relay` SYMBOL "?relay", bdb_ProcessNodeDescRsp
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_RegisterTCLinkKeyExchangeProcessCB SYMBOL "bdb_RegisterTCLinkKeyExchangeProcessCB"
`??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela` SYMBOL "?relay", bdb_RegisterTCLinkKeyExchangeProcessCB
bdb_SendMsg         SYMBOL "bdb_SendMsg"
`??bdb_SendMsg::?relay` SYMBOL "?relay", bdb_SendMsg
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_TCAddJoiningDevice SYMBOL "bdb_TCAddJoiningDevice"
`??bdb_TCAddJoiningDevice::?relay` SYMBOL "?relay", bdb_TCAddJoiningDevice
bdb_TCjoiningDeviceComplete SYMBOL "bdb_TCjoiningDeviceComplete"
`??bdb_TCjoiningDeviceComplete::?relay` SYMBOL "?relay", bdb_TCjoiningDeviceComplete
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_calculateCCITT_CRC SYMBOL "bdb_calculateCCITT_CRC"
`??bdb_calculateCCITT_CRC::?relay` SYMBOL "?relay", bdb_calculateCCITT_CRC
bdb_crcBitByBitFast SYMBOL "bdb_crcBitByBitFast"
`??bdb_crcBitByBitFast::?relay` SYMBOL "?relay", bdb_crcBitByBitFast
bdb_crcInit         SYMBOL "bdb_crcInit"
`??bdb_crcInit::?relay` SYMBOL "?relay", bdb_crcInit
bdb_crcReflect      SYMBOL "bdb_crcReflect"
`??bdb_crcReflect::?relay` SYMBOL "?relay", bdb_crcReflect
bdb_doTrustCenterRequireKeyExchange SYMBOL "bdb_doTrustCenterRequireKeyExchange"
`??bdb_doTrustCenterRequireKeyExchange::?relay` SYMBOL "?relay", bdb_doTrustCenterRequireKeyExchange
bdb_event_loop      SYMBOL "bdb_event_loop"
`??bdb_event_loop::?relay` SYMBOL "?relay", bdb_event_loop
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setChannel      SYMBOL "bdb_setChannel"
`??bdb_setChannel::?relay` SYMBOL "?relay", bdb_setChannel
bdb_setChannelAttribute SYMBOL "bdb_setChannelAttribute"
`??bdb_setChannelAttribute::?relay` SYMBOL "?relay", bdb_setChannelAttribute
bdb_setCommissioningGroupID SYMBOL "bdb_setCommissioningGroupID"
`??bdb_setCommissioningGroupID::?relay` SYMBOL "?relay", bdb_setCommissioningGroupID
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setJoinUsesInstallCodeKey SYMBOL "bdb_setJoinUsesInstallCodeKey"
`??bdb_setJoinUsesInstallCodeKey::?relay` SYMBOL "?relay", bdb_setJoinUsesInstallCodeKey
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
bdb_setTCRequireKeyExchange SYMBOL "bdb_setTCRequireKeyExchange"
`??bdb_setTCRequireKeyExchange::?relay` SYMBOL "?relay", bdb_setTCRequireKeyExchange
bdb_touchlinkSendFNReset SYMBOL "bdb_touchlinkSendFNReset"
`??bdb_touchlinkSendFNReset::?relay` SYMBOL "?relay", bdb_touchlinkSendFNReset
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean

        EXTERN `??APSME_AddTCLinkKey::?relay`
        FUNCTION `??APSME_AddTCLinkKey::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_SearchTCLinkKeyEntry::?relay`
        FUNCTION `??APSME_SearchTCLinkKeyEntry::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??GP_DataCnf::?relay`
        FUNCTION `??GP_DataCnf::?relay`,00H
        EXTERN `??GP_DataInd::?relay`
        FUNCTION `??GP_DataInd::?relay`,00H
        EXTERN `??GP_SecReq::?relay`
        FUNCTION `??GP_SecReq::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_ResetRequest::?relay`
        FUNCTION `??NLME_ResetRequest::?relay`,00H
        EXTERN `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,00H
        EXTERN `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,00H
        EXTERN `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,00H
        EXTERN `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,00H
        EXTERN `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,00H
        EXTERN `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,00H
        EXTERN `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,00H
        EXTERN `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,00H
        EXTERN `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,00H
        EXTERN `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,00H
        EXTERN `??bdb_setNodeJoinLinkKeyType::?relay`
        FUNCTION `??bdb_setNodeJoinLinkKeyType::?relay`,00H
        EXTERN `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,00H
        EXTERN `??gp_CheckAnnouncedDevice::?relay`
        FUNCTION `??gp_CheckAnnouncedDevice::?relay`,00H
        EXTERN `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`
        FUNCTION `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`,00H
        EXTERN `??gp_endpointInit::?relay`
        FUNCTION `??gp_endpointInit::?relay`,00H
        EXTERN `??gp_expireDuplicateFiltering::?relay`
        FUNCTION `??gp_expireDuplicateFiltering::?relay`,00H
        EXTERN `??gp_returnOperationalChannel::?relay`
        FUNCTION `??gp_returnOperationalChannel::?relay`,00H
        EXTERN `??gp_stopCommissioningMode::?relay`
        FUNCTION `??gp_stopCommissioningMode::?relay`,00H
        EXTERN `??nwk_setStateIdle::?relay`
        FUNCTION `??nwk_setStateIdle::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_reload_timer::?relay`
        FUNCTION `??osal_start_reload_timer::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sspMMOHash::?relay`
        FUNCTION `??sspMMOHash::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsTrustCenterAddress
        EXTERN APSME_AddTCLinkKey
        FUNCTION APSME_AddTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SearchTCLinkKeyEntry
        FUNCTION APSME_SearchTCLinkKeyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GP_CheckAnnouncedDeviceGCB
        EXTERN GP_DataCnfGCB
        EXTERN GP_DataIndGCB
        EXTERN GP_SecReqGCB
        EXTERN GP_aliasConflictAnnce
        EXTERN GP_endpointInitGCB
        EXTERN GP_expireDuplicateFilteringGCB
        EXTERN GP_returnOperationalChannelGCB
        EXTERN GP_stopCommissioningModeGCB
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ResetRequest
        FUNCTION NLME_ResetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TCLinkKeyFrmCntr
        EXTERN ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aliasConflictAnnce
        EXTERN bdbIndentifyActiveEndpoint
        EXTERN bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setNodeJoinLinkKeyType
        FUNCTION bdb_setNodeJoinLinkKeyType,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_RegisterGPChangeChannelReqForBDBCB
        FUNCTION gp_RegisterGPChangeChannelReqForBDBCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_endpointInit
        FUNCTION gp_endpointInit,0602H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_setStateIdle
        FUNCTION nwk_setStateIdle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_reload_timer
        FUNCTION osal_start_reload_timer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindAddEntry
        EXTERN pfnIdentifyTimeChangeCB
        EXTERN requestNewTrustCenterLinkKey
        EXTERN runtimeChannel
        EXTERN sspMMOHash
        FUNCTION sspMMOHash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zgAllowInstallCodes
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\sam\Documents\GitHub\ti\Z-Stack 3.0.1\Components\stack\bdb\bdb.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDApp.h"
//   46 #include "OSAL.h"
//   47 #include "ZDConfig.h"
//   48 #include "hal_led.h"
//   49 #include "ZDObject.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AddrMgr.h"
//   52 #include "ZDSecMgr.h"
//   53 #include "nwk.h"
//   54 #include "nwk_util.h"
//   55 #include "ssp_hash.h"
//   56 #ifdef BDB_REPORTING
//   57 #include "bdb_Reporting.h"
//   58 #endif 
//   59 
//   60 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   61 #include "gp_interface.h"
//   62 #include "gp_common.h"
//   63 #include "dgp_stub.h"
//   64 #endif
//   65 
//   66 #include "bdb_interface.h"
//   67 
//   68 #if defined ( INTER_PAN ) 
//   69 #if defined ( BDB_TL_INITIATOR )  
//   70 #include "bdb_touchlink_initiator.h"
//   71 #endif
//   72 #if defined ( BDB_TL_TARGET )  
//   73 #include "bdb_touchlink_target.h"
//   74 #endif
//   75 #endif
//   76    
//   77 #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
//   78   #include "bdb_touchlink.h"
//   79 #endif
//   80  
//   81 #ifdef MT_APP_CNF_FUNC
//   82 #include "MT_APP_CONFIG.h"
//   83 #endif
//   84    
//   85  /*********************************************************************
//   86  * MACROS
//   87  */
//   88 //This is actually the channels used
//   89 #define vScanChannels  zgDefaultChannelList
//   90    
//   91  /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 #define NUMBER_OF_CHANNELS     16
//   96 
//   97 #define CHANNEL_11_MASK_POS    11
//   98 #define CHANNEL_26_MASK_POS    26
//   99    

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
bdb_FB_InitiatorCurrentCyclesNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  101 
//  102 /*********************************************************************
//  103  * TYPEDEFS
//  104  */
//  105  
//  106  
//  107  /*********************************************************************
//  108  * GLOBAL VARIABLES
//  109  */
//  110 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte bdb_TaskID;
bdb_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  112 bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
bdbAttributes:
        DATA8
        DS 18
        REQUIRE `?<Initializer for bdbAttributes>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  113 epList_t *bdb_HeadEpDescriptorList = NULL;
bdb_HeadEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 epList_t *bdb_CurrEpDescriptorList = NULL;
bdb_CurrEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  115 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 bdbFindingBindingRespondent_t *pRespondentHead = NULL;
pRespondentHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  117 bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
pRespondentCurr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 bdbFindingBindingRespondent_t *pRespondentNext = NULL;
pRespondentNext:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  119 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  120 bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
bdbCommissioningProcedureState:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  121 bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
bdb_initialization:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  122 
//  123 //Nwk formation and nwk steering for nodes not in nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 bool vDoPrimaryScan = TRUE;
vDoPrimaryScan:
        DATA8
        DS 1
        REQUIRE `?<Initializer for vDoPrimaryScan>`
        REQUIRE __INIT_XDATA_I
//  125 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
zgBdbInstallCodeCRC:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
        REQUIRE __INIT_XDATA_I
//  127 
//  128 //Pointer of the nwk being tried in association process
//  129 #if (ZG_BUILD_JOINING_TYPE)
//  130 static networkDesc_t *pBDBListNwk = NULL;
//  131 #endif
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 bdb_ZclTransactionSequenceNumber=0x00;
bdb_ZclTransactionSequenceNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 bool touchLinkTargetEnabled = FALSE;
touchLinkTargetEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136 
//  137  /*********************************************************************
//  138  * EXTERNAL VARIABLES
//  139  */
//  140 
//  141 extern devStartModes_t devStartMode;
//  142 extern bool  requestNewTrustCenterLinkKey;
//  143 extern uint32 requestLinkKeyTimeout;
//  144 extern uint32 ZDApp_SavedPollRate;
//  145 
//  146 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  147 extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
//  148 extern uint8 bdbIndentifyActiveEndpoint;
//  149 #endif
//  150 
//  151 extern bdbFindingBindingRespondent_t *pRespondentNext;
//  152 
//  153 #ifndef DISABLE_GREENPOWER_BASIC_PROXY
//  154 extern ZDO_DeviceAnnce_t aliasConflictAnnce;
//  155 #endif
//  156 
//  157 /*********************************************************************
//  158  * EXTERNAL FUNCTIONS
//  159  */
//  160 
//  161 extern void ZDApp_ResetTimerStart( uint16 delay );
//  162 extern void ZDApp_NodeProfileSync( uint8 stackProfile );
//  163 extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  164 extern uint8 ZDApp_ReadNetworkRestoreState( void );
//  165 
//  166 extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  167 extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  168 extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  169 
//  170 /*********************************************************************
//  171  * LOCAL VARIABLES
//  172  */
//  173 #if (ZG_BUILD_JOINING_TYPE)
//  174   static uint8 bdb_nwkAssocRetriesCount = 0;
//  175 #endif
//  176 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  177   static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
bdb_joiningDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  178 #endif
//  179   
//  180 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  181 //Latch to save the status success of any attempt in the periodic F&B process  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 static uint8 bdb_FBStateSuccessLatch = FALSE;
bdb_FBStateSuccessLatch:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 #endif
//  184  /*********************************************************************
//  185  * LOCAL FUNCTIONS
//  186  */
//  187 static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
//  188 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
//  189 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
//  190 
//  191 #if (ZG_BUILD_JOINING_TYPE)
//  192 static void bdb_requestTCStackVersion(void);
//  193 static void bdb_requestTCLinkKey(void);
//  194 static void bdb_requestVerifyTCLinkKey(void);
//  195 static void bdb_tryNwkAssoc(void);
//  196 #endif
//  197 
//  198 
//  199 static void bdb_processTimeout(void);
//  200 static void bdb_startResumeCommissioningProcess(void);
//  201 static void bdb_nwkSteeringDeviceOnNwk(void);
//  202 static void bdb_nwkJoiningFormation(bool isJoining);
//  203 
//  204 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  205 static uint8 gp_ChangeChannelReq(void);
//  206 static void gp_CBInit(void);
//  207 #endif
//  208 
//  209 
//  210 #if (ZG_BUILD_COORDINATOR_TYPE)
//  211 static void bdb_TCProcessJoiningList(void);
//  212 static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
//  213 #endif
//  214 #if (ZG_BUILD_COORDINATOR_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  215 static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
pfnTCLinkKeyExchangeProcessCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  216 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  217 static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
pfnCommissioningStatusCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  218 #if (ZG_BUILD_JOINING_TYPE)
//  219 static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
//  220 static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
//  221 #endif
//  222 
//  223 
//  224 
//  225 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
//  226 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
//  227 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
//  228 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
//  229 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
//  230 
//  231 /*********************************************************************
//  232  * PUBLIC FUNCTIONS
//  233  *********************************************************************/
//  234 void bdb_filterNwkDisc(void);
//  235 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
//  236 
//  237 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
//  238 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
//  239 
//  240  /*********************************************************************
//  241  * @fn          bdb_Init
//  242  *
//  243  * @brief       Initialization function for the Base Device Behavior.
//  244  *
//  245  * @param       task_id - bdb_TaskID Task ID
//  246  *
//  247  * @return      none
//  248  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  249 void bdb_Init( byte task_id )
bdb_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_Init
        CODE
//  250 {
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, gp_RegisterGPChangeChannelReqForBDBCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, gp_endpointInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  251   bdb_TaskID = task_id;
        MOV       DPTR,#bdb_TaskID
        MOVX      @DPTR,A
//  252     
//  253 #if (ZG_BUILD_COORDINATOR_TYPE)
//  254   if(ZG_DEVICE_COORDINATOR_TYPE)
//  255   {
//  256     if(bdbAttributes.bdbJoinUsesInstallCodeKey)
        MOV       DPTR,#bdbAttributes + 15
        MOVX      A,@DPTR
        JZ        ??bdb_Init_0
//  257     {
//  258       zgAllowInstallCodes = ZG_IC_MUST_USED;
        MOV       DPTR,#zgAllowInstallCodes
        MOV       A,#0x2
        MOVX      @DPTR,A
//  259     }
//  260   }
//  261 #endif
//  262   
//  263 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
//  264   touchLinkInitiator_InitDevice( );
//  265 #endif
//  266 
//  267 #if (BDB_REPORTING)
//  268   bdb_RepInit();
//  269 #endif  
//  270   
//  271   //Register ZDO callbacks
//  272   ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
??bdb_Init_0:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x2
        MOV       R3,#-0x80
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  273 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  274   ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  275   ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x4
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  276 #endif
//  277   
//  278 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  279   gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
        ; Setup parameters for call to function gp_RegisterGPChangeChannelReqForBDBCB
        MOV       R2,#`??gp_ChangeChannelReq::?relay` & 0xff
        MOV       R3,#(`??gp_ChangeChannelReq::?relay` >> 8) & 0xff
        LCALL     `??gp_RegisterGPChangeChannelReqForBDBCB::?relay`; Banked call to: gp_RegisterGPChangeChannelReqForBDBCB
//  280   gp_CBInit();
        MOV       DPTR,#GP_DataCnfGCB
        MOV       A,#`??GP_DataCnf::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??GP_DataCnf::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_endpointInitGCB
        MOV       A,#`??gp_endpointInit::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_endpointInit::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_expireDuplicateFilteringGCB
        MOV       A,#`??gp_expireDuplicateFiltering::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_expireDuplicateFiltering::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_stopCommissioningModeGCB
        MOV       A,#`??gp_stopCommissioningMode::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_stopCommissioningMode::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_returnOperationalChannelGCB
        MOV       A,#`??gp_returnOperationalChannel::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_returnOperationalChannel::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_DataIndGCB
        MOV       A,#`??GP_DataInd::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??GP_DataInd::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_SecReqGCB
        MOV       A,#`??GP_SecReq::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??GP_SecReq::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
        MOV       A,#`??gp_CheckAnnouncedDevice::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??gp_CheckAnnouncedDevice::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#GP_aliasConflictAnnce
        MOV       A,#aliasConflictAnnce & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(aliasConflictAnnce >> 8) & 0xff
        MOVX      @DPTR,A
        ; Setup parameters for call to function gp_endpointInit
        LCALL     `??gp_endpointInit::?relay`; Banked call to: gp_endpointInit
//  281 #endif
//  282 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  283 
//  284 /*********************************************************************
//  285  * @fn      bdb_RegisterSimpleDescriptor
//  286  *
//  287  * @brief   Register the Simple descriptor. This function also registers 
//  288  *          the profile's cluster conversion table.
//  289  *
//  290  * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
//  291  *
//  292  * @return  none
//  293  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  294 void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
bdb_RegisterSimpleDescriptor:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
        CODE
//  295 {
        FUNCALL bdb_RegisterSimpleDescriptor, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RegisterSimpleDescriptor, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  296   endPointDesc_t *epDesc;
//  297 
//  298   // Register the application's endpoint descriptor
//  299   //  - This memory is allocated and never freed.
//  300   epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  301   if ( epDesc )
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterSimpleDescriptor_0
//  302   {
//  303     // Fill out the endpoint description.
//  304     epDesc->endPoint = simpleDesc->EndPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  305     epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
        INC       DPTR
        INC       DPTR
        MOV       A,#zcl_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zcl_TaskID >> 8) & 0xff
        LCALL     ?Subroutine11 & 0xFFFF
//  306     epDesc->simpleDesc = simpleDesc;
??CrossCallReturnLabel_0:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine11 & 0xFFFF
//  307     epDesc->latencyReq = noLatencyReqs;
??CrossCallReturnLabel_1:
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  308 
//  309     // Register the endpoint description with the AF
//  310     afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  311   }
//  312 }
??bdb_RegisterSimpleDescriptor_0:
        SJMP      ??Subroutine33_0
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function bdb_RegisterSimpleDescriptor
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock5
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  313 
//  314 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  315 /*********************************************************************
//  316  * @fn      bdb_ZclIdentifyCmdInd
//  317  *
//  318  * @brief   Callback from the ZCL General Cluster Library when
//  319  *          it received an Identity Command for this application.
//  320  *
//  321  * @param   identifyTime - the number of seconds to identify yourself
//  322  * @param   endpoint - destination endpoint
//  323  *
//  324  * @return  none
//  325  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  326 void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
bdb_ZclIdentifyCmdInd:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
        CODE
//  327 {
        FUNCALL bdb_ZclIdentifyCmdInd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  328   zclAttrRec_t identifyAttrRec;
//  329   
//  330   if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  331                       ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       R1,?V0
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  332   {
//  333     //If we are processing an actual change
//  334     if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_19:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_ZclIdentifyCmdInd_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_ZclIdentifyCmdInd_1:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  335     {
//  336       if ( identifyTime > 0 )
        MOV       A,R6
        ORL       A,R7
        MOV       DPL,R0
        MOV       DPH,R1
        JZ        ??bdb_ZclIdentifyCmdInd_2
//  337       {
//  338         *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  339         osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??bdb_ZclIdentifyCmdInd_3
//  340       }
//  341       else if ( identifyTime <= 0 )
//  342       {
//  343         *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
??bdb_ZclIdentifyCmdInd_2:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  344         osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,A
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  345       }
//  346       
//  347       if(pfnIdentifyTimeChangeCB != NULL)
??bdb_ZclIdentifyCmdInd_3:
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_57:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  348       {
//  349         pfnIdentifyTimeChangeCB(endpoint);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        LCALL     ??Subroutine41_0 & 0xFFFF
//  350       }
//  351     }
//  352   }
??CrossCallReturnLabel_48:
        LCALL     ?CALL_IND
//  353 }
??bdb_ZclIdentifyCmdInd_0:
        MOV       A,#0x8
        LJMP      ??Subroutine39_0 & 0xFFFF
          CFI EndBlock cfiBlock7
//  354 #endif
//  355 
//  356 
//  357 #if (ZG_BUILD_JOINING_TYPE) 
//  358  /*********************************************************************
//  359  * @fn          bdb_setActiveCentralizedLinkKey
//  360  *
//  361  * @brief       Set the active centralized key to be used, Global or IC derived.
//  362  *
//  363  * @param       useGlobal - If TRUE, then use default TC link key, if FALSE use 
//  364  *                          pBuf as source for IC key derived input
//  365  * @param       pBuf - The expected format and length of the IC is defined by 
//  366  *                     BDB_INSTALL_CODE_USE
//  367  *
//  368  * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
//  369  *                          ZInvalidParameter when IC buffer is null
//  370  */
//  371 ZStatus_t bdb_setActiveCentralizedLinkKey(bool useGlobal, uint8* pBuf)
//  372 {
//  373   ZStatus_t Status = ZSuccess;
//  374   uint8 extAddr[Z_EXTADDR_LEN];
//  375   
//  376   if(useGlobal)
//  377   {
//  378     //Set the default key to be used in centralized networks as defaultTCLinkKey
//  379     APSME_SetDefaultKey();
//  380   } 
//  381   else
//  382   {
//  383     if(pBuf != NULL)
//  384     {
//  385   #if (BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_IC_CRC)
//  386       
//  387       osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
//  388       
//  389       //Set the install code as default key
//  390       Status = bdb_addInstallCode(pBuf,extAddr);
//  391     
//  392   #elif (BDB_INSTALL_CODE_USE==BDB_INSTALL_CODE_USE_KEY)
//  393 
//  394       //Set the key as global default
//  395       APSME_AddTCLinkKey(pBuf,extAddr);
//  396   #else
//  397     
//  398       //BDB_INSTALL_CODE_USE not supported
//  399       Status = ZFailure;
//  400   #endif
//  401     }
//  402     else
//  403     {
//  404       Status = ZInvalidParameter;
//  405     }
//  406   }
//  407   return Status;
//  408 }
//  409 #endif
//  410 
//  411 
//  412     
//  413   
//  414 /******************************************************************************
//  415  * @fn          bdb_addInstallCode
//  416  *
//  417  * @brief       Interface to add an install codes and adds a APS TC Link key.
//  418  *
//  419  * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
//  420  *              pExt - [in] Extended address of the node.
//  421  *
//  422  * @return      ZStatus_t
//  423  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  424 ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
bdb_addInstallCode:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_addInstallCode
        CODE
//  425 {
        FUNCALL bdb_addInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, sspMMOHash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  426   uint8  hashOutput[16];
//  427   uint16 CRC;
//  428   
//  429 #if (ZG_BUILD_COORDINATOR_TYPE)
//  430   if(ZG_DEVICE_COORDINATOR_TYPE)
//  431   {
//  432     if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
        MOV       DPTR,#zgAllowInstallCodes
        MOVX      A,@DPTR
        JNZ       ??bdb_addInstallCode_0
//  433     {
//  434       return ZFailure;
        MOV       R1,#0x1
        SJMP      ??bdb_addInstallCode_1
//  435     }
//  436   }
//  437 #endif
//  438        
//  439   if((pInstallCode == NULL) || (pExt == NULL))
??bdb_addInstallCode_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_addInstallCode_2
        MOV       A,R4
        ORL       A,?V1
        JZ        ??bdb_addInstallCode_2
//  440   {
//  441     return ZInvalidParameter;
//  442   }
//  443   
//  444   CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV       ?V2,R2
        MOV       ?V3,R3
//  445   //Validate CRC
//  446   if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,R2
        XRL       A,?V2
        JNZ       ??bdb_addInstallCode_3
        MOV       A,R3
        XRL       A,?V3
??bdb_addInstallCode_3:
        JZ        ??bdb_addInstallCode_4
//  447   {
//  448     return ZInvalidParameter;
??bdb_addInstallCode_2:
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_1
//  449   }
//  450 
//  451   sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
??bdb_addInstallCode_4:
        ; Setup parameters for call to function sspMMOHash
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V2,#-0x70
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  452 
//  453   return APSME_AddTCLinkKey(hashOutput,pExt);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
??bdb_addInstallCode_1:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  454 }    
          CFI EndBlock cfiBlock8
//  455     
//  456 
//  457 #if (ZG_BUILD_COORDINATOR_TYPE)
//  458  /*********************************************************************
//  459  * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
//  460  *
//  461  * @brief   Register a callback to receive notifications on the joining devices 
//  462  *          and its status on TC link key exchange
//  463  *
//  464  * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
//  465  *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
//  466  *
//  467  * @return  none
//  468  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  469 void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
bdb_RegisterTCLinkKeyExchangeProcessCB:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_RegisterTCLinkKeyExchangeProcessCB
        CODE
//  470 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  471   if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterTCLinkKeyExchangeProcessCB_0
//  472   {
//  473     pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  474   }
//  475 }
??bdb_RegisterTCLinkKeyExchangeProcessCB_0:
        LJMP      ??Subroutine37_0 & 0xFFFF
          CFI EndBlock cfiBlock9
//  476 
//  477 
//  478 
//  479  /*********************************************************************
//  480  * @fn          bdb_setTCRequireKeyExchange
//  481  *
//  482  * @brief       Set the bdb_setTCRequireKeyExchange attribute
//  483  *
//  484  * @param       isKeyExchangeRequired - True if TC will remove devices that do 
//  485  *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
//  486  *              False to not remove devices.
//  487  *
//  488  * @return      none
//  489  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  490 void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
bdb_setTCRequireKeyExchange:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_setTCRequireKeyExchange
        CODE
//  491 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  492   bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 17
        LJMP      ??Subroutine36_0 & 0xFFFF
//  493 }
          CFI EndBlock cfiBlock10
//  494 
//  495 
//  496 
//  497  /*********************************************************************
//  498  * @fn          bdb_TCAddJoiningDevice
//  499  *
//  500  * @brief       Add a joining device to the list of devices that must request a 
//  501  *              key before bdbTrustCenterNodeJoinTimeout.
//  502  *
//  503  * @param       parentAddr - Address of the parent device
//  504  * @param       JoiningExtAddr - IEEE address of the joining device
//  505  *
//  506  * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
//  507  *                          ZInvalidParameter
//  508  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  509 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
bdb_TCAddJoiningDevice:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
        CODE
//  510 {
        FUNCALL bdb_TCAddJoiningDevice, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_start_reload_timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCAddJoiningDevice, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V6,R2
        MOV       ?V7,R3
//  511   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  512   
//  513   if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
        MOV       A,#-0x2
        XRL       A,?V6
        JNZ       ??bdb_TCAddJoiningDevice_0
        MOV       A,#-0x1
        XRL       A,?V7
??bdb_TCAddJoiningDevice_0:
        JZ        ??bdb_TCAddJoiningDevice_1
        MOV       A,R4
        ORL       A,R5
        JNZ       ??bdb_TCAddJoiningDevice_2
//  514   {
//  515     return ZInvalidParameter;
??bdb_TCAddJoiningDevice_1:
        MOV       R1,#0x2
        LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
//  516   }
//  517   
//  518   //If the list was empty and element was allocated, then start the timer
//  519   if(bdb_joiningDeviceList == NULL)
??bdb_TCAddJoiningDevice_2:
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,#0x0
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_58:
        JNZ       ??bdb_TCAddJoiningDevice_4
//  520   {
//  521     bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#bdb_joiningDeviceList
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  522     if(bdb_joiningDeviceList == NULL)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_59:
        JNZ       $+5
        LJMP      ??bdb_TCAddJoiningDevice_5 & 0xFFFF
//  523     {
//  524       return ZFailure;
//  525     }
//  526    
//  527     osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
        ; Setup parameters for call to function osal_start_reload_timer
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  528     tempJoiningDescNode = bdb_joiningDeviceList;
        MOV       DPTR,#bdb_joiningDeviceList
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        LJMP      ??bdb_TCAddJoiningDevice_6 & 0xFFFF
//  529   }
//  530   //if the list was not empty then add the entry at the end of the list
//  531   else
//  532   {
//  533     tempJoiningDescNode = bdb_joiningDeviceList;
??bdb_TCAddJoiningDevice_4:
        LCALL     ?Subroutine30 & 0xFFFF
//  534     
//  535     //Validate that this is not already in the list... somehow
//  536     if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
??CrossCallReturnLabel_84:
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JNZ       ??bdb_TCAddJoiningDevice_7
//  537     {
//  538       //The device added is already in the list, refresh its time and do nothing else
//  539       tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  540       return ZSuccess;
//  541     }
//  542     
//  543     while(tempJoiningDescNode->nextDev != NULL)
??bdb_TCAddJoiningDevice_8:
        MOV       A,R6
        ADD       A,#0xb
        MOV       R6,A
        JNC       ??bdb_TCAddJoiningDevice_9
        INC       R7
??bdb_TCAddJoiningDevice_9:
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_72:
        JZ        ??bdb_TCAddJoiningDevice_10
//  544     {
//  545       tempJoiningDescNode = tempJoiningDescNode->nextDev;
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
//  546       
//  547       //Validate that this is not already in the list... somehow
//  548       if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V8,R1
        MOV       ?V9,R2
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??bdb_TCAddJoiningDevice_8
//  549       {
//  550         //The device added is already in the list, refresh its time and do nothing else
//  551         tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
??bdb_TCAddJoiningDevice_7:
        LCALL     ?Subroutine19 & 0xFFFF
//  552         return ZSuccess;
??CrossCallReturnLabel_17:
        LJMP      ??bdb_TCAddJoiningDevice_11 & 0xFFFF
//  553       }
//  554     }
//  555     
//  556     tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
??bdb_TCAddJoiningDevice_10:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
        LCALL     ??Subroutine45_0 & 0xFFFF
//  557     if(tempJoiningDescNode->nextDev == NULL)
??CrossCallReturnLabel_81:
        JNZ       ??bdb_TCAddJoiningDevice_12
//  558     {
//  559       return ZFailure;
??bdb_TCAddJoiningDevice_5:
        MOV       R1,#0x1
        LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
//  560     }
//  561     
//  562     tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCAddJoiningDevice_12:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
??bdb_TCAddJoiningDevice_6:
        MOV       R7,A
//  563   }
//  564   
//  565   if(pfnTCLinkKeyExchangeProcessCB)
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_60:
        JZ        ??bdb_TCAddJoiningDevice_13
//  566   {
//  567     bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  568     osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,?V4
        MOV       ?V9,?V5
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  569     bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  570     
//  571     bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  572   }
//  573   
//  574   tempJoiningDescNode->nextDev = NULL;
??bdb_TCAddJoiningDevice_13:
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  575   tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
        LCALL     ?Subroutine19 & 0xFFFF
//  576   tempJoiningDescNode->parentAddr = parentAddr;
??CrossCallReturnLabel_18:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
//  577   osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  578   
//  579   return ZSuccess;
??bdb_TCAddJoiningDevice_11:
        MOV       R1,#0x0
??bdb_TCAddJoiningDevice_3:
          CFI EndBlock cfiBlock11
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  580 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 28)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function bdb_TCAddJoiningDevice
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  581 
//  582 /****************************************************************************
//  583  * @fn          bdb_TCProcessJoiningList
//  584  *
//  585  * @brief       Process the timer to handle the joining devices if the TC link 
//  586  *              key is mandatory for all devices
//  587  *
//  588  * @param       none
//  589  *
//  590  * @return      none
//  591  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  592 void bdb_TCProcessJoiningList(void)
bdb_TCProcessJoiningList:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
        CODE
//  593 {
        FUNCALL bdb_TCProcessJoiningList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, ZDSecMgrAPSRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, bdb_TCJoiningDeviceFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCProcessJoiningList, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 42
        MOV       A,#-0x2a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  594   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  595   
//  596   if(bdb_joiningDeviceList)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_61:
        JNZ       $+5
        LJMP      ??bdb_TCProcessJoiningList_0 & 0xFFFF
//  597   {
//  598     tempJoiningDescNode = bdb_joiningDeviceList;
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine24 & 0xFFFF
//  599   
//  600     while(tempJoiningDescNode)
//  601     {
//  602       if(tempJoiningDescNode->NodeJoinTimeout)
??CrossCallReturnLabel_24:
        MOV       A,?V0
        ADD       A,#0xa
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??bdb_TCProcessJoiningList_1
//  603       {
//  604         tempJoiningDescNode->NodeJoinTimeout--;
        DEC       A
        MOVX      @DPTR,A
//  605       }
//  606       
//  607       if(tempJoiningDescNode->NodeJoinTimeout == 0)
        JZ        $+5
        LJMP      ??bdb_TCProcessJoiningList_2 & 0xFFFF
//  608       {
//  609         //Check if the key exchange is required 
//  610         if(bdb_doTrustCenterRequireKeyExchange())
??bdb_TCProcessJoiningList_1:
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       DPTR,#bdbAttributes + 17
        MOVX      A,@DPTR
        JZ        ??bdb_TCProcessJoiningList_3
//  611         {
//  612             AddrMgrEntry_t entry;
//  613             
//  614             entry.user = ADDRMGR_USER_DEFAULT;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  615             osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  616             
//  617             if(AddrMgrEntryLookupExt(&entry))
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,R1
        JZ        ??bdb_TCProcessJoiningList_3
//  618             {
//  619               ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
        ; Setup parameters for call to function ZDSecMgrAPSRemove
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine47_0 & 0xFFFF
//  620             }
//  621         }
??CrossCallReturnLabel_86:
        LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  622         
//  623         //Expired device either is legacy device not using the TCLK entry or got 
//  624         //removed from the network because of timeout, eitherway it is not using
//  625         //TCLK entry neither the Security user in the address manager, so free the entry
//  626         //in both tables.
//  627         
//  628         uint16 keyNvIndex;
//  629         uint16 index;        
//  630         APSME_TCLKDevEntry_t TCLKDevEntry;
//  631         uint8 found;
//  632         
//  633         //Remove the entry in address manager
//  634         ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
??bdb_TCProcessJoiningList_3:
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
//  635         
//  636         //search for the entry in the TCLK table
//  637         keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
//  638         
//  639         //If found, erase it.
//  640         if(found == TRUE)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_TCProcessJoiningList_4
//  641         {
//  642           osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  643           TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  644           
//  645           //Increase the shift by one. Validate the maximum shift of the seed which is 15
//  646           index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
        MOV       A,R6
        ADD       A,#-0x11
        MOV       R0,A
        MOV       A,R7
        ADDC      A,#-0x2
        MOV       R1,A
//  647           
//  648           TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
        MOV       A,R0
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#TCLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
//  649           TCLinkKeyFrmCntr[index].txFrmCntr = 0;
??CrossCallReturnLabel_46:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine35_0 & 0xFFFF
//  650           
//  651           //Update the entry
//  652           osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
??CrossCallReturnLabel_44:
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 61)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  653         }
//  654         
//  655         if(pfnTCLinkKeyExchangeProcessCB)
??bdb_TCProcessJoiningList_4:
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_62:
        JZ        ??bdb_TCProcessJoiningList_5
//  656         {
//  657           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  658           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  659           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  660           
//  661           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
        ; Setup parameters for call to function bdb_SendMsg
        DEC       A
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 57)
//  662         }
//  663        
//  664         //Free the device from the list
//  665         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
??bdb_TCProcessJoiningList_5:
        ; Setup parameters for call to function bdb_TCJoiningDeviceFree
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
//  666       }
//  667       tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCProcessJoiningList_2:
        MOV       A,?V0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?Subroutine23 & 0xFFFF
//  668     }
//  669   }
??CrossCallReturnLabel_22:
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_24 & 0xFFFF
//  670 
//  671   //we are done with the list
//  672   if(bdb_joiningDeviceList == NULL)
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_63:
        JNZ       ??bdb_TCProcessJoiningList_6
//  673   {
//  674     osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
??bdb_TCProcessJoiningList_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  675   }
//  676 }
??bdb_TCProcessJoiningList_6:
        MOV       A,#0x2a
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
//  677 
//  678 
//  679 
//  680 /****************************************************************************
//  681  * @fn          bdb_TCjoiningDeviceComplete
//  682  *
//  683  * @brief       This function frees a joining device from the list that has 
//  684  *              finished TC link key exchange process
//  685  *
//  686  * @param       JoiningExtAddr - Extended address of the device
//  687  *
//  688  * @return      none
//  689  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  690 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
bdb_TCjoiningDeviceComplete:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
        CODE
//  691 {
        FUNCALL bdb_TCjoiningDeviceComplete, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, bdb_TCJoiningDeviceFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCjoiningDeviceComplete, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  692   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  693   
//  694   if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JNZ       $+5
        LJMP      ??bdb_TCjoiningDeviceComplete_0 & 0xFFFF
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_TCjoiningDeviceComplete_0 & 0xFFFF
//  695   {
//  696     tempJoiningDescNode = bdb_joiningDeviceList;
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V8,?V0
        MOV       ?V9,?V1
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R3,?V6
//  697     
//  698     while(tempJoiningDescNode != NULL)
//  699     {
//  700       if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??bdb_TCjoiningDeviceComplete_1
//  701       {
//  702         if(pfnTCLinkKeyExchangeProcessCB)
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ        ??bdb_TCjoiningDeviceComplete_2
//  703         {
//  704           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  705           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  706           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
        LCALL     ?Subroutine8 & 0xFFFF
//  707           
//  708           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  709         }        
??CrossCallReturnLabel_39:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x9
        MOV       R3,#0x0
        MOV       R2,#0x9
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  710         
//  711         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
??bdb_TCjoiningDeviceComplete_2:
        ; Setup parameters for call to function bdb_TCJoiningDeviceFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
//  712         break;
        SJMP      ??bdb_TCjoiningDeviceComplete_3
//  713       }
//  714       tempJoiningDescNode = tempJoiningDescNode->nextDev;
??bdb_TCjoiningDeviceComplete_1:
        LCALL     ?Subroutine26 & 0xFFFF
//  715     }
??CrossCallReturnLabel_30:
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??CrossCallReturnLabel_85
//  716    
//  717     if(bdb_joiningDeviceList == NULL)
??bdb_TCjoiningDeviceComplete_3:
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_66:
        JNZ       ??bdb_TCjoiningDeviceComplete_0
//  718     {
//  719       osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  720     }
//  721   }
//  722 }
??bdb_TCjoiningDeviceComplete_0:
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV       A,R6
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function bdb_NotifyCommissioningModeStart
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30
//  723 
//  724 
//  725 
//  726 /****************************************************************************
//  727  * @fn          bdb_TCJoiningDeviceFree
//  728  *
//  729  * @brief       This function frees a joining device from the list.
//  730  *
//  731  * @param       ZSuccess - If the device was found and erased
//  732  * @param       ZInvalidParameter - Not found
//  733  *
//  734  * @return      none
//  735  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  736 ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
bdb_TCJoiningDeviceFree:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
        CODE
//  737 {
        FUNCALL bdb_TCJoiningDeviceFree, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_TCJoiningDeviceFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine18 & 0xFFFF
//  738   bdb_joiningDeviceList_t* descCurrent;
//  739   bdb_joiningDeviceList_t* descPrev;
//  740   
//  741   //validate empty list?
//  742   
//  743   //Is it the first?
//  744   if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
??CrossCallReturnLabel_15:
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPTR,#bdb_joiningDeviceList
        JZ        ??bdb_TCJoiningDeviceFree_0
//  745   {
//  746     descCurrent = bdb_joiningDeviceList;
        LCALL     ??Subroutine47_0 & 0xFFFF
//  747     bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
??CrossCallReturnLabel_87:
        MOV       DPTR,#bdb_joiningDeviceList
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV       DPTR,#bdb_joiningDeviceList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  748     osal_mem_free( descCurrent );
        ; Setup parameters for call to function osal_mem_free
        SJMP      ??bdb_TCJoiningDeviceFree_1
//  749     return ZSuccess;
//  750   }
//  751   
//  752   descPrev = NULL;
//  753   descCurrent = bdb_joiningDeviceList;
//  754   
//  755   while(descCurrent != NULL)
//  756   {
//  757     if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  758     {
//  759       descPrev = descCurrent;
//  760       break;
//  761     }
//  762     descCurrent = descCurrent->nextDev;
??bdb_TCJoiningDeviceFree_0:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ        ??bdb_TCJoiningDeviceFree_2
        MOV       A,R2
        ADD       A,#0xb
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
        ; Setup parameters for call to function osal_memcmp
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPL,R6
        MOV       DPH,R7
        JZ        ??bdb_TCJoiningDeviceFree_0
//  763   }
//  764   if(descPrev == NULL)
//  765   {
//  766     //Not found
//  767     return ZInvalidParameter;
//  768   }
//  769   
//  770   descPrev->nextDev = descPrev->nextDev->nextDev;
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  771     
//  772   osal_mem_free( JoiningDeviceToRemove );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
??bdb_TCJoiningDeviceFree_1:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  773   return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_TCJoiningDeviceFree_3
??bdb_TCJoiningDeviceFree_2:
        MOV       R1,#0x2
??bdb_TCJoiningDeviceFree_3:
        LJMP      ?Subroutine5 & 0xFFFF
//  774 
//  775 }
          CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_14
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_19
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_20
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function bdb_event_loop
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_21
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function bdb_CreateRespondentList
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_53
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function bdb_AddRespondentNode
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_54
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function bdb_zclRespondentListClean
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_55
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function bdb_AddRespondentNode
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_56
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function bdb_TCAddJoiningDevice
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_72
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function bdb_ZclIdentifyCmdInd
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_57
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function bdb_TCAddJoiningDevice
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_58
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function bdb_TCAddJoiningDevice
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_59
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function bdb_TCAddJoiningDevice
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_60
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function bdb_TCProcessJoiningList
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_61
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function bdb_TCProcessJoiningList
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_62
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-4
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function bdb_TCProcessJoiningList
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_63
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_64
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-4
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_65
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_66
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function bdb_reportCommissioningState
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_67
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_68
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function bdb_event_loop
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_69
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function bdb_event_loop
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_70
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_71
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function bdb_event_loop
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bdb_event_loop
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bdb_crcInit
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
//  776 
//  777  /*********************************************************************
//  778  * @fn          bdb_setJoinUsesInstallCodeKey
//  779  *
//  780  * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
//  781  *
//  782  * @param       set - If TRUE only devices with IC register in TC can join the 
//  783  *              nwk, otherwise devices may or not have a IC register
//  784  *
//  785  * @return      none
//  786  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  787 void bdb_setJoinUsesInstallCodeKey(bool set)
bdb_setJoinUsesInstallCodeKey:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function bdb_setJoinUsesInstallCodeKey
        CODE
//  788 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  789   bdbAttributes.bdbJoinUsesInstallCodeKey = set;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 15
        MOVX      @DPTR,A
//  790   if(set)
        MOV       DPTR,#zgAllowInstallCodes
        JZ        ??bdb_setJoinUsesInstallCodeKey_0
//  791   {
//  792     zgAllowInstallCodes = ZG_IC_MUST_USED;
        MOV       A,#0x2
        SJMP      ??bdb_setJoinUsesInstallCodeKey_1
//  793   }
//  794   else
//  795   {
//  796     zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
??bdb_setJoinUsesInstallCodeKey_0:
        MOV       A,#0x1
//  797   }
??bdb_setJoinUsesInstallCodeKey_1:
        LJMP      ??Subroutine36_0 & 0xFFFF
//  798 }
          CFI EndBlock cfiBlock67
//  799 #endif
//  800 
//  801  /*********************************************************************
//  802  * @fn          bdb_StartCommissioning
//  803  *
//  804  * @brief       Start the commissioning process setting the commissioning mode given.
//  805  *
//  806  * @param       mode - refer to bdbCommissioningMode
//  807  *
//  808  * @return      none
//  809  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  810 void bdb_StartCommissioning(uint8 mode)
bdb_StartCommissioning:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function bdb_StartCommissioning
        CODE
//  811 {
        FUNCALL bdb_StartCommissioning, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R1
//  812   //Application cannot request to set the device in initialization mode or parent lost
//  813   mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
//  814     
//  815 #ifdef BDB_TL_INITIATOR
//  816   if ( touchlinkFNReset == TRUE )
//  817   {
//  818     return;
//  819   }
//  820 #else
//  821   //Commissioning mode used only for initiator
//  822   mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        ANL       ?V0,#0xce
//  823 #endif
//  824   
//  825 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
//  826   //Commissioning mode used only for devices with F&B
//  827   mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
//  828 #endif
//  829  
//  830   //If we have running process or the machine state is triggered, then just append and it will be excecuted
//  831   if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        ??bdb_StartCommissioning_1
//  832   {
//  833 #if ZG_BUILD_ENDDEVICE_TYPE
//  834     if(ZG_DEVICE_ENDDEVICE_TYPE)
//  835     {
//  836       //Devices with parent lost are not allowed to perform actions
//  837       if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
//  838       {
//  839         return;
//  840       }
//  841     }
//  842 #endif
//  843     
//  844     //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
//  845     // just send permit joining and report the application
//  846     if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
??bdb_StartCommissioning_0:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_StartCommissioning_2
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_StartCommissioning_2
//  847     {
//  848       bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
//  849       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  850       
//  851       //Clean nwk steering
//  852       mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
        XRL       ?V0,#0x2
//  853     }
//  854     
//  855     //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
//  856     bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_2:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  857     return;      
        LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
//  858   }
//  859 
//  860   //Save the commissioning modes valid requested
//  861   bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_1:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R6,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R6
        MOVX      @DPTR,A
//  862   
//  863   
//  864   //Start processing the initialization, once per power cycle.
//  865   if(!bdb_initialization)
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  866   {
//  867     bdb_initialization = TRUE;
        MOV       A,#0x1
        LCALL     ?Subroutine12 & 0xFFFF
//  868     
//  869 #ifdef BDB_REPORTING
//  870     //Delete NV data if startup was with factory reset
//  871     if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
//  872     {
//  873       //Factory reset bdb reporting NV data
//  874       uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
//  875       if ( attrRepNvLen > 0 )
//  876       {
//  877         osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
//  878       }
//  879     }
//  880 
//  881     //Construct the Endpoint-cluster array
//  882     bdb_RepConstructReportingData();
//  883 #endif //BDB_REPORTING
//  884     
//  885     osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  886     
//  887     //Are we on a network
//  888     if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  889     {
//  890 #ifdef ZG_BUILD_JOINING_TYPE
//  891       //Only for joining devices validate the joining procedure
//  892       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_StartCommissioning_5
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  893       {
//  894         //If we got into a network
//  895         if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
??bdb_StartCommissioning_5:
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       DPTR,#AIB_apsTrustCenterAddress
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  896         {
//  897           //Which is not distributed
//  898           if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  899           {
//  900             uint8 keyAttributes;
//  901             osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  902             //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
//  903             if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfd
        JZ        ??bdb_StartCommissioning_6
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??bdb_StartCommissioning_6
//  904             {
//  905               //Force to initialize the entry
//  906               APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
//  907               
//  908               osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  909               APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  910               osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  911               TCLinkKeyFrmCntr[0].txFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr
        LCALL     ?Subroutine9 & 0xFFFF
//  912               TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
??CrossCallReturnLabel_47:
        INC       DPTR
        LCALL     ??Subroutine35_0 & 0xFFFF
//  913               
//  914               
//  915               //reset the device parameters to FN
//  916               bdbAttributes.bdbNodeIsOnANetwork = FALSE;
??CrossCallReturnLabel_45:
        MOV       DPTR,#bdbAttributes + 14
        LCALL     ?Subroutine12 & 0xFFFF
//  917               osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  918               zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  919               
//  920               //Then start the commissioning process requested
//  921               bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        SJMP      ??bdb_StartCommissioning_7
//  922               osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
//  923               return;
//  924             }
//  925           }
//  926         }
//  927       }
//  928 #endif //ZG_BUILD_JOINING_TYPE
//  929       
//  930       //Set the initialization
//  931       bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
//  932       bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
??bdb_StartCommissioning_6:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  933       bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
        MOV       A,#0x10
        ORL       A,R6
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  934       
//  935       if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JZ        ??bdb_StartCommissioning_3
//  936       {
//  937 #ifdef BDB_REPORTING
//  938         //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
//  939         bdb_RepUpdateMarkBindings();
//  940 #endif
//  941         return;
//  942       }
//  943       bdb_setNodeIsOnANetwork(FALSE);  
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  944       //Not in the network
//  945       bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        SJMP      ??bdb_StartCommissioning_8
//  946       return;
//  947     }
//  948   }
//  949 
//  950   //Got requested only to initialize, if so, report that it failed
//  951   if(bdbAttributes.bdbCommissioningMode == 0)
??bdb_StartCommissioning_4:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_7
//  952   {
//  953     //Set the initialization state and report it to fail
//  954     bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  955     bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,A
??bdb_StartCommissioning_8:
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  956     return;
        SJMP      ??bdb_StartCommissioning_3
//  957   }
//  958 
//  959   
//  960   //Start the commissioning process
//  961   bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_StartCommissioning_7:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
//  962   osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,A
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  963 }
??bdb_StartCommissioning_3:
        MOV       A,#0x14
        LJMP      ??Subroutine39_0 & 0xFFFF
          CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function bdb_StartCommissioning
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bdb_StartCommissioning
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function bdb_StartCommissioning
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        CLR       A
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function bdb_StartCommissioning
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function bdb_TCProcessJoiningList
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function bdb_StartCommissioning
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
//  964 
//  965 
//  966  /*********************************************************************
//  967  * @fn          bdb_NotifyCommissioningModeStart
//  968  *
//  969  * @brief       Notify the user about a commissioning method just started
//  970  *
//  971  * @param       commissioningMode
//  972  *
//  973  * @return      none
//  974  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  975 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
bdb_NotifyCommissioningModeStart:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
        CODE
//  976 {
        FUNCALL bdb_NotifyCommissioningModeStart, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  977   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
//  978 
//  979   bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
//  980   bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
        LCALL     ?Subroutine8 & 0xFFFF
//  981   //Remaining commissioning modes are set just before the call to the application to avoid race conditions
//  982 
//  983   bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
??CrossCallReturnLabel_40:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  984 }
        MOV       A,#0x3
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock80
//  985 
//  986 
//  987 
//  988 #if (ZG_BUILD_JOINING_TYPE)
//  989  /*********************************************************************
//  990  * @fn          bdb_setNodeJoinLinkKeyType
//  991  *
//  992  * @brief       Set the key type in use in the network joined. Global centralized key is used by default
//  993  *
//  994  * @param       none
//  995  *
//  996  * @return      none
//  997  */
//  998 void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
//  999 {
// 1000   bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
// 1001 }
// 1002 #endif
// 1003 
// 1004  /*********************************************************************
// 1005  * @fn          bdb_setFN
// 1006  *
// 1007  * @brief       Set configuration for FN. This FN configuration will be perfome 
// 1008  *              upon call to ZDOInitDevice
// 1009  *
// 1010  * @param       none
// 1011  *
// 1012  * @return      none
// 1013  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1014 void bdb_setFN(void)
bdb_setFN:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function bdb_setFN
        CODE
// 1015 {
        FUNCALL bdb_setFN, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1016   bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1017 
// 1018 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
// 1019     touchLink_InitFreeRanges( TRUE );
// 1020     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1021 #endif
// 1022 #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
// 1023     touchLink_InitFreeRanges( FALSE );
// 1024     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1025 #endif
// 1026 
// 1027   //Set the device as factory new
// 1028   zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1029 }
        SJMP      ??Subroutine37_0
          CFI EndBlock cfiBlock81
// 1030 
// 1031  /*********************************************************************
// 1032  * @fn          bdb_resetLocalAction
// 1033  *
// 1034  * @brief       Application interface to perform BDB Reset to FN.
// 1035  *
// 1036  * @param       none
// 1037  *
// 1038  * @return      none
// 1039  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1040 void bdb_resetLocalAction(void)
bdb_resetLocalAction:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function bdb_resetLocalAction
        CODE
// 1041 {
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1042   //Process reset as nwk leave if the device is on the network and is able to process it
// 1043   if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
// 1044   {
// 1045     NLME_LeaveReq_t leaveReq;
// 1046     // Set every field to 0
// 1047     osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
// 1048     
// 1049     bdb_setFN();
// 1050       
// 1051     NLME_LeaveReq( &leaveReq );
// 1052     
// 1053     return;
// 1054   }
// 1055   else
// 1056   {
// 1057     bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1058     
// 1059     ZDApp_ResetTimerStart( 500 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0xc
        MOV       R3,#0x1
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1060   }
// 1061 }
        SJMP      ??Subroutine37_0
          CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
          CFI EndBlock cfiBlock83
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      @DPTR,A
          CFI EndBlock cfiBlock84
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiBlock85 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock85
// 1062 
// 1063 
// 1064  /*********************************************************************
// 1065  * @fn          bdb_parentLost
// 1066  *
// 1067  * @brief       Notify bdb that connection with parent is lost
// 1068  *
// 1069  * @return      none
// 1070  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1071 void bdb_parentLost(void)
bdb_parentLost:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI Function bdb_parentLost
        CODE
// 1072 {
        ; Saved register size: 0
        ; Auto size: 0
// 1073 #if ZG_BUILD_ENDDEVICE_TYPE
// 1074   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1075   {
// 1076     while(pBDBListNwk)
// 1077     {
// 1078       bdb_nwkDescFree(pBDBListNwk);
// 1079     }
// 1080     
// 1081     nwk_desc_list_free();  
// 1082     if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
// 1083     {
// 1084       //If parent lost during TCLK exchange, then report TCLK exchange fail
// 1085       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
// 1086       {
// 1087         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
// 1088         return;
// 1089       }
// 1090       bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
// 1091       
// 1092     }
// 1093     bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
// 1094     NLME_OrphanStateSet();
// 1095     ZDApp_ChangeState( DEV_NWK_ORPHAN );
// 1096     bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
// 1097   }
// 1098 #endif
// 1099 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock86
// 1100 
// 1101 
// 1102 
// 1103 
// 1104 
// 1105  /*********************************************************************
// 1106  * @fn          bdb_NetworkRestoredResumeState
// 1107  *
// 1108  * @brief       Restore the state of child device after parent lost
// 1109  *
// 1110  * @return      none
// 1111  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1112 void bdb_NetworkRestoredResumeState(void)
bdb_NetworkRestoredResumeState:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
        CODE
// 1113 {
        ; Saved register size: 0
        ; Auto size: 0
// 1114 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
// 1115 #if ZG_BUILD_ENDDEVICE_TYPE
// 1116   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1117   {
// 1118     uint8 restoreSimpleDesc = FALSE;
// 1119     //If restored when F&B still enabled, then restore the simple descriptors attempts
// 1120     if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
// 1121     {
// 1122       bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
// 1123       
// 1124       pRespondentTemp = pRespondentHead;
// 1125       
// 1126       while(pRespondentTemp != NULL)
// 1127       {
// 1128         if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
// 1129         {
// 1130           pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
// 1131           restoreSimpleDesc = TRUE;
// 1132         }
// 1133         pRespondentTemp = pRespondentTemp->pNext;
// 1134       }
// 1135     }
// 1136     if(restoreSimpleDesc)
// 1137     {
// 1138       //Restore the simple Descriptor sending after 1 second of restoring the network
// 1139       osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
// 1140     }
// 1141   }
// 1142 #endif
// 1143 #endif
// 1144 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock87
// 1145 
// 1146 #if ZG_BUILD_ENDDEVICE_TYPE
// 1147  /*********************************************************************
// 1148  * @fn          bdb_ZedAttemptRecoverNwk
// 1149  *
// 1150  * @brief       Instruct the ZED to try to rejoin its previews network
// 1151  *
// 1152  * @return      success if the attempt is being excecuted
// 1153  *              False if device do not have nwk parameters to perform this action
// 1154  */
// 1155 uint8 bdb_ZedAttemptRecoverNwk(void)
// 1156 {
// 1157   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1158   {
// 1159     if(bdbAttributes.bdbNodeIsOnANetwork)
// 1160     {
// 1161       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
// 1162       {
// 1163         if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
// 1164         {
// 1165           return ZSuccess;
// 1166         }
// 1167       }
// 1168     }
// 1169   }
// 1170   return ZFailure;
// 1171 }
// 1172 
// 1173 #endif
// 1174 
// 1175  /*********************************************************************
// 1176  * @fn          bdb_reportCommissioningState
// 1177  *
// 1178  * @brief       Process the result of a BDB main state attempt.
// 1179  *
// 1180  * @param       bdbCommissioningState - MainState that is issuing fail
// 1181  * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
// 1182  *
// 1183  * @return      none
// 1184  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1185 void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
bdb_reportCommissioningState:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
        CODE
// 1186 {
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_ResetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, nwk_setStateIdle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
// 1187   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 1188   //Process only if we are in that state, or if we are on parent lost and processing F&B
// 1189   if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
// 1190      || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??bdb_reportCommissioningState_0
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1191   {
// 1192     switch(bdbCommissioningState)
??bdb_reportCommissioningState_0:
        MOV       A,R6
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
        ADD       A,#-0x2
        JZ        ??bdb_reportCommissioningState_3
        DEC       A
        JZ        ??bdb_reportCommissioningState_4
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
        LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
// 1193     {
// 1194 #if (ZG_BUILD_JOINING_TYPE)
// 1195       case BDB_COMMISSIONING_STATE_JOINING:
// 1196         if(ZG_DEVICE_JOINING_TYPE)
// 1197         {
// 1198           //Prepare for the next state or commissioning mode to be excecuted
// 1199           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
// 1200 
// 1201           if(didSuccess)
// 1202           {
// 1203             //Next state is TC link key exchange
// 1204             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
// 1205             //Free the list of nwk discovered
// 1206             while(pBDBListNwk)
// 1207             {
// 1208               bdb_nwkDescFree(pBDBListNwk);
// 1209             }
// 1210             
// 1211             //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
// 1212             //exchange be perfomed successfully in cases in which application has a 
// 1213             //slow pollrate
// 1214             NLME_SetPollRate(TCLK_POLL_RATE);
// 1215             
// 1216             //No notification in this step
// 1217             return;
// 1218           } 
// 1219           else
// 1220           {
// 1221             uint8 temp = FALSE;
// 1222             //If fail, then restore poll rate
// 1223             NLME_SetPollRate(POLL_RATE);
// 1224             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1225             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
// 1226             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
// 1227             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
// 1228             
// 1229             //Turn off the radio
// 1230             ZMacSetReq(ZMacRxOnIdle, &temp);
// 1231             //Set the device to FN, to start as new for subsequent attempts
// 1232             bdb_setFN();
// 1233             NLME_ResetRequest();
// 1234             ZDApp_ChangeState( DEV_HOLD );
// 1235             
// 1236             //Free the list of nwk discovered
// 1237             while(pBDBListNwk)
// 1238             {
// 1239               bdb_nwkDescFree(pBDBListNwk);
// 1240             }
// 1241           }
// 1242         }
// 1243       break;
// 1244 
// 1245       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 1246         if(ZG_DEVICE_JOINING_TYPE)
// 1247         {
// 1248           if(didSuccess)
// 1249           {
// 1250             //Clear any setting that would set the device as FN
// 1251             zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
// 1252             
// 1253             //Next state is nwk steering on the nwk (permit joining)
// 1254             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
// 1255             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
// 1256             
// 1257             //Set the poll rate to the application default after TCLK success
// 1258             NLME_SetPollRate(POLL_RATE);
// 1259 
// 1260             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
// 1261             //No notification to the user is needed
// 1262             return;
// 1263           }
// 1264           else
// 1265           {
// 1266             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
// 1267             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
// 1268             
// 1269             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
// 1270            
// 1271             //No process shall be attempted after this fail
// 1272             bdbAttributes.bdbCommissioningMode = 0;
// 1273             
// 1274             //Fill the context for the user notification
// 1275             osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
// 1276           }
// 1277         }
// 1278       break;
// 1279 #endif
// 1280       
// 1281       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 1282         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_3:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1283         if(didSuccess)
        MOV       A,R7
        MOV       DPTR,#bdbAttributes + 10
        JZ        ??bdb_reportCommissioningState_8
// 1284         {
// 1285           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1286           
// 1287 #if (ZG_BUILD_RTR_TYPE)          
// 1288           //Update ZDApp state
// 1289           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_9
// 1290           {          
// 1291             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
        SJMP      ??bdb_reportCommissioningState_9
// 1292           }
// 1293 #endif
// 1294 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1295           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1296           {
// 1297             ZDApp_ChangeState( DEV_END_DEVICE );
// 1298           }
// 1299 #endif
// 1300         }
// 1301 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1302         else
// 1303         {
// 1304           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1305           {
// 1306             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_8:
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1307           }
// 1308         }
// 1309 #endif
// 1310         
// 1311         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_9:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1312         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1313         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1314       break;
// 1315       
// 1316       case BDB_COMMISSIONING_STATE_FORMATION:
// 1317         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
??bdb_reportCommissioningState_4:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1318 
// 1319         if(didSuccess)
        MOV       A,R7
        MOV       DPTR,#bdbAttributes + 10
        JZ        ??bdb_reportCommissioningState_11
// 1320         {
// 1321           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1322 
// 1323           //Clear any setting that would set the device as FN
// 1324           zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,A
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1325           
// 1326            //Update ZDApp State
// 1327 #if (ZG_BUILD_RTR_TYPE)
// 1328           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_12
// 1329           {          
// 1330             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1331           }
// 1332 #endif    
// 1333 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1334           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1335           {          
// 1336             ZDApp_ChangeState( DEV_ZB_COORD );
??bdb_reportCommissioningState_12:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        SJMP      ??bdb_reportCommissioningState_13
// 1337           }     
// 1338 #endif
// 1339         }
// 1340         else
// 1341         {
// 1342           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
??bdb_reportCommissioningState_11:
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1343           //If not on the nwk, then restart the nwk parameters
// 1344 #if (ZG_BUILD_RTR_TYPE)
// 1345           if(ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_14
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_15
// 1346           {           
// 1347             if(!bdbAttributes.bdbNodeIsOnANetwork)
??bdb_reportCommissioningState_14:
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_15
// 1348             {
// 1349               uint8 temp = FALSE;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1350               //Turn off the radio
// 1351               ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1352               //Set the device to FN, to start as new for subsequent attempts
// 1353               bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1354               NLME_ResetRequest();
        ; Setup parameters for call to function NLME_ResetRequest
        LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
// 1355               ZDApp_ChangeState( DEV_HOLD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x0
??bdb_reportCommissioningState_13:
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1356             }
// 1357           }
// 1358 #endif
// 1359         }
// 1360         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_15:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1361         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1362         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1363       break;  
// 1364       
// 1365 
// 1366       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 1367 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
// 1368         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_reportCommissioningState_5:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1369 
// 1370         //Do not notify the status if we have another identify to send
// 1371         if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_16
// 1372         {
// 1373           //Success at least once during F&B as initiator, mark it
// 1374           bdb_FBStateSuccessLatch = TRUE;
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1375         }        
// 1376         
// 1377         //Will we process another indentify?
// 1378         if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
??bdb_reportCommissioningState_16:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1379         {
// 1380           // Dealocate respondent list and clean all the F&B process
// 1381           pRespondentCurr = NULL;
        MOV       DPTR,#pRespondentCurr
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1382           pRespondentNext = NULL;
        MOV       DPTR,#pRespondentNext
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1383           bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
// 1384           osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1385           
// 1386           //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
// 1387           if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_17
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       ??bdb_reportCommissioningState_17
// 1388           {
// 1389             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        CLR       A
        MOVX      @DPTR,A
// 1390           }
// 1391           
// 1392           //Set default state
// 1393           bdb_FBStateSuccessLatch = FALSE;
??bdb_reportCommissioningState_17:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        CLR       A
        MOVX      @DPTR,A
// 1394           
// 1395           //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
// 1396           if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_18
// 1397           {
// 1398             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR       A
        MOVX      @DPTR,A
// 1399             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP      ??bdb_reportCommissioningState_19
// 1400           }
// 1401           else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
??bdb_reportCommissioningState_18:
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_19
// 1402           {
// 1403             bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
        CLR       A
        MOVX      @DPTR,A
// 1404           }
// 1405           
// 1406           bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
??bdb_reportCommissioningState_19:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.3
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1407         }
// 1408         else
// 1409         {
// 1410           return;
// 1411         }
// 1412 
// 1413 #endif
// 1414       break;     
// 1415       case BDB_COMMISSIONING_STATE_TL:
// 1416         // Set NWK task to run
// 1417         nwk_setStateIdle( FALSE );
??bdb_reportCommissioningState_2:
        ; Setup parameters for call to function nwk_setStateIdle
        MOV       R1,#0x0
        LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
// 1418         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1419         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_20
// 1420         {
// 1421           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 1422           bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
        INC       DPTR
        MOVX      @DPTR,A
// 1423           
// 1424           //Update ZDApp state
// 1425 #if (ZG_BUILD_RTR_TYPE)
// 1426           if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_reportCommissioningState_20
// 1427           {          
// 1428             ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1429           }
// 1430 #endif
// 1431 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1432           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1433           {
// 1434             ZDApp_ChangeState( DEV_END_DEVICE );
// 1435           }
// 1436 #endif          
// 1437         }
// 1438         //The fail status is already set from the calling function to report commissioning process
// 1439         
// 1440         // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
// 1441         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_20:
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1442         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1443         //Clear the event
// 1444         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
        SJMP      ??bdb_reportCommissioningState_10
// 1445         
// 1446       break;
// 1447       
// 1448       case BDB_INITIALIZATION:
// 1449         //Notify user about successfull initialization
// 1450         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
??bdb_reportCommissioningState_6:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1451         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_21
// 1452         {
// 1453           //Update ZDApp state
// 1454 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1455           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1456           {          
// 1457             ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1458           }
// 1459 #endif          
// 1460 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1461           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1462           {
// 1463             uint32 pollrate = POLL_RATE;
// 1464             NLME_SetPollRate(pollrate);
// 1465             ZDApp_ChangeState( DEV_END_DEVICE );
// 1466             
// 1467           }
// 1468 #endif          
// 1469           ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1470           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1471           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        CLR       A
        MOVX      @DPTR,A
// 1472           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_c8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP      ??bdb_reportCommissioningState_22
// 1473         }
// 1474         else
// 1475         {
// 1476 #if (ZG_BUILD_ENDDEVICE_TYPE)                   
// 1477           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1478           {
// 1479             if(bdb_isDeviceNonFactoryNew())
// 1480             {
// 1481               //Notify the user about losing parent
// 1482               bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
// 1483               bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1484               
// 1485               //Update ZDApp state
// 1486               ZDApp_ChangeState( DEV_NWK_ORPHAN );
// 1487             }
// 1488           }
// 1489 #endif
// 1490           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_21:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1491         }
// 1492         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_reportCommissioningState_22:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.4
??bdb_reportCommissioningState_10:
        MOVX      @DPTR,A
// 1493 
// 1494       break;
// 1495 #if (ZG_BUILD_ENDDEVICE_TYPE)     
// 1496       case BDB_PARENT_LOST:
// 1497         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
// 1498         if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1499         {
// 1500           if(didSuccess)
// 1501           {
// 1502             uint32 pollrate = POLL_RATE;
// 1503             bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
// 1504             bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
// 1505             NLME_SetPollRate(pollrate);
// 1506             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1507             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
// 1508             //Update ZDApp state
// 1509             ZDApp_ChangeState( DEV_END_DEVICE );
// 1510             
// 1511             bdb_NetworkRestoredResumeState();
// 1512           }
// 1513           else
// 1514           {
// 1515             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
// 1516             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1517           }
// 1518         }
// 1519       break;
// 1520 #endif
// 1521     }
// 1522 #ifdef MT_APP_CNF_FUNC
// 1523     //Notify the user about the status, the main state which has failed
// 1524     bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
// 1525     
// 1526     bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1527 #else
// 1528     if(pfnCommissioningStatusCB)
??bdb_reportCommissioningState_7:
        MOV       DPTR,#pfnCommissioningStatusCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_67:
        JZ        ??bdb_reportCommissioningState_1
// 1529     {
// 1530       //Notify the user about the status, the main state which has failed
// 1531       bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine34_0 & 0xFFFF
// 1532       
// 1533       bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1534     }
// 1535 #endif
// 1536   }  
??CrossCallReturnLabel_41:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1537 }
??bdb_reportCommissioningState_1:
        MOV       A,#0x4
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock88
// 1538 
// 1539 
// 1540  /*********************************************************************
// 1541  * @fn          bdb_nwkFormationAttempt
// 1542  *
// 1543  * @brief       Process a nwk formation attempt.
// 1544  *
// 1545  * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
// 1546  *                         otherwise and try secondary channel
// 1547  *
// 1548  * @return      none
// 1549  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1550 void bdb_nwkFormationAttempt(bool didSuccess)
bdb_nwkFormationAttempt:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function bdb_nwkFormationAttempt
        CODE
// 1551 {
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 1552   if(didSuccess)
        JZ        ??bdb_nwkFormationAttempt_0
// 1553   {
// 1554     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        SJMP      ??bdb_nwkFormationAttempt_1
// 1555   }
// 1556   else
// 1557   {
// 1558     //Can we try the secondary channel set?
// 1559     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkFormationAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkFormationAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkFormationAttempt_2
// 1560     {
// 1561       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        CLR       A
        MOVX      @DPTR,A
// 1562       bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,A
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
        SJMP      ??bdb_nwkFormationAttempt_3
// 1563     }
// 1564     else
// 1565     {
// 1566       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkFormationAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
??bdb_nwkFormationAttempt_1:
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1567     }
// 1568   }
// 1569 }
??bdb_nwkFormationAttempt_3:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock89
// 1570 
// 1571 
// 1572 
// 1573 /*********************************************************************
// 1574  * @fn          bdb_isDeviceNonFactoryNew
// 1575  *
// 1576  * @brief       Returns the state of bdbNodeIsOnANetwork attribute
// 1577  * 
// 1578  * @param       none
// 1579  *
// 1580  * @return      bdbNodeIsOnANetwork
// 1581  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1582 bool bdb_isDeviceNonFactoryNew(void)
bdb_isDeviceNonFactoryNew:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function bdb_isDeviceNonFactoryNew
        CODE
// 1583 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1584   return bdbAttributes.bdbNodeIsOnANetwork;
        MOV       DPTR,#bdbAttributes + 14
          CFI EndBlock cfiBlock90
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 1585 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      A,@DPTR
          CFI EndBlock cfiBlock91
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV       R1,A
        LJMP      ??Subroutine37_0 & 0xFFFF
          CFI EndBlock cfiBlock92
// 1586 
// 1587 
// 1588 /*********************************************************************
// 1589  * @fn          bdb_doTrustCenterRequireKeyExchange
// 1590  *
// 1591  * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
// 1592  * 
// 1593  * @param       none
// 1594  *
// 1595  * @return      bdbTrustCenterRequireKeyExchange
// 1596  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1597 bool bdb_doTrustCenterRequireKeyExchange(void)
bdb_doTrustCenterRequireKeyExchange:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI Function bdb_doTrustCenterRequireKeyExchange
        CODE
// 1598 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1599 #if (ZG_BUILD_COORDINATOR_TYPE) 
// 1600   return bdbAttributes.bdbTrustCenterRequireKeyExchange;
        MOV       DPTR,#bdbAttributes + 17
        SJMP      ?Subroutine7
// 1601 #else
// 1602   return 0;
// 1603 #endif
// 1604 }
          CFI EndBlock cfiBlock93
// 1605 
// 1606 /*********************************************************************
// 1607  * @fn      bdb_rejoinNwk
// 1608  *
// 1609  * @brief   Attempt to rejoin/resume a nwk from nv parameters
// 1610  *
// 1611  * @param   none
// 1612  *
// 1613  * @return  ZStatus_t
// 1614  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1615 ZStatus_t bdb_rejoinNwk(void)
bdb_rejoinNwk:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function bdb_rejoinNwk
        CODE
// 1616 {
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1617   ZStatus_t rejoinStatus = ZSuccess;
        MOV       R6,#0x0
// 1618   
// 1619   // Transition state machine to correct rejoin state based on nwk key
// 1620   if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x0
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_0
// 1621   {
// 1622     ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        SJMP      ??bdb_rejoinNwk_1
// 1623   }
// 1624   else
// 1625   {
// 1626     ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
??bdb_rejoinNwk_0:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xe
??bdb_rejoinNwk_1:
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1627   }
// 1628 
// 1629   // Before trying to do rejoin, check if the device has a valid short address
// 1630   // If not, generate a random short address for itself
// 1631   if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_rejoinNwk_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_rejoinNwk_2:
        JNZ       ??bdb_rejoinNwk_3
// 1632   {
// 1633     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1634   }
// 1635 
// 1636   // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1637   if ( _NIB.nwkPanId == 0xFFFF )
??bdb_rejoinNwk_3:
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_rejoinNwk_4
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??bdb_rejoinNwk_4:
        JNZ       ??bdb_rejoinNwk_5
// 1638   {
// 1639     rejoinStatus = ZFailure;
        MOV       R6,#0x1
        SJMP      ??bdb_rejoinNwk_6
// 1640   }
// 1641 
// 1642   if(rejoinStatus == ZSuccess)
??bdb_rejoinNwk_5:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_rejoinNwk_6
// 1643   {
// 1644     uint8 tmp = true;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1645     ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1646         
// 1647     // Perform Secure or Unsecure Rejoin depending on available configuration
// 1648     if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        MOV       DPTR,#_NIB + 22
        JNZ       ??bdb_rejoinNwk_7
// 1649     {
// 1650       rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        SJMP      ??bdb_rejoinNwk_8
// 1651     }
// 1652     else
// 1653     {
// 1654       rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
??bdb_rejoinNwk_7:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
??bdb_rejoinNwk_8:
        MOV       A,R1
        MOV       R6,A
// 1655     }
// 1656   }
// 1657   
// 1658   return rejoinStatus;
??bdb_rejoinNwk_6:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock94
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
// 1659 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock95
// 1660 
// 1661 #if (ZG_BUILD_JOINING_TYPE)
// 1662  /*********************************************************************
// 1663  * @fn          bdb_nwkDiscoveryAttempt
// 1664  *
// 1665  * @brief       Process a nwk discovery attempt
// 1666  *
// 1667  * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
// 1668  *                           no suitable nwks were found, try secondary channel
// 1669  *
// 1670  * @return      none
// 1671  */
// 1672 void bdb_nwkDiscoveryAttempt(bool didSuccess)
// 1673 {
// 1674   uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
// 1675   
// 1676   if(didSuccess)
// 1677   {
// 1678     bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
// 1679   }
// 1680   else
// 1681   {
// 1682     //Can we try the secondary channel set?
// 1683     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
// 1684     {
// 1685       vDoPrimaryScan = FALSE;
// 1686       bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
// 1687       
// 1688       ZDApp_NetworkInit( 50 );
// 1689     }
// 1690     else
// 1691     {
// 1692       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
// 1693     }
// 1694   }
// 1695 }
// 1696 
// 1697  /*********************************************************************
// 1698  * @fn          bdb_filterNwkDisc
// 1699  *
// 1700  * @brief       Filter the nwks found and attempt to join the suitable nwks
// 1701  *              Here the application can include nwk filters 
// 1702  *
// 1703  * @param       none
// 1704  *
// 1705  * @return      none
// 1706  */
// 1707 void bdb_filterNwkDisc(void)
// 1708 {
// 1709   networkDesc_t* pNwkDesc;
// 1710   uint8 i = 0;
// 1711   uint8 ResultCount = 0;
// 1712   uint8 stackProfile = 0;
// 1713   uint8 stackProfilePro = 0;
// 1714   
// 1715   pBDBListNwk  = nwk_getNwkDescList();
// 1716   nwk_desc_list_release();
// 1717   
// 1718   pNwkDesc = pBDBListNwk;
// 1719   while (pNwkDesc)
// 1720   {
// 1721     ResultCount++;
// 1722     pNwkDesc = pNwkDesc->nextDesc;
// 1723   }
// 1724   
// 1725   if(pBDBListNwk)
// 1726   {
// 1727     if(pfnFilterNwkDesc)
// 1728     {
// 1729       pfnFilterNwkDesc(pBDBListNwk, ResultCount);
// 1730     }
// 1731     
// 1732     for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
// 1733     {
// 1734       pNwkDesc = pBDBListNwk;
// 1735       
// 1736       if(pNwkDesc)
// 1737       {
// 1738         for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
// 1739         {
// 1740           if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 1741           {
// 1742             // If the extended Pan ID is commissioned to a non zero value
// 1743             // Only join the Pan that has match EPID
// 1744             if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1745             {
// 1746               //Remove from the list
// 1747               bdb_nwkDescFree(pNwkDesc);
// 1748               ResultCount--;
// 1749               continue;
// 1750             }
// 1751           }
// 1752           else if ( zgConfigPANID != 0xFFFF )
// 1753           {
// 1754             // PAN Id is preconfigured. check if it matches
// 1755             if ( pNwkDesc->panId != zgConfigPANID )
// 1756             {
// 1757               //Remove from the list
// 1758               bdb_nwkDescFree(pNwkDesc);
// 1759               ResultCount--;
// 1760               continue;
// 1761             }
// 1762           }
// 1763 
// 1764           if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 1765           {
// 1766             // check that network is allowing joining
// 1767             if ( ZSTACK_ROUTER_BUILD )
// 1768             {
// 1769               if ( stackProfilePro == FALSE )
// 1770               {
// 1771                 if ( !pNwkDesc->routerCapacity )
// 1772                 {
// 1773                   //Remove from the list
// 1774                   bdb_nwkDescFree(pNwkDesc);
// 1775                   ResultCount--;
// 1776                   continue;
// 1777                 }
// 1778               }
// 1779               else
// 1780               {
// 1781                 if ( !pNwkDesc->deviceCapacity )
// 1782                 {
// 1783                   //Remove from the list
// 1784                   bdb_nwkDescFree(pNwkDesc);
// 1785                   ResultCount--;
// 1786                   continue;
// 1787                 }
// 1788               }
// 1789             }
// 1790             else if ( ZSTACK_END_DEVICE_BUILD )
// 1791             {
// 1792               if ( !pNwkDesc->deviceCapacity )
// 1793               {
// 1794                 //Remove from the list
// 1795                 bdb_nwkDescFree(pNwkDesc);
// 1796                 ResultCount--;
// 1797                 continue;
// 1798               }
// 1799             }
// 1800           }
// 1801 
// 1802           // check version of zigbee protocol
// 1803           if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 1804             continue;
// 1805 
// 1806           // check version of stack profile
// 1807           if ( pNwkDesc->stackProfile != zgStackProfile  )
// 1808           {
// 1809             if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1810                 || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
// 1811             {
// 1812               stackProfilePro = TRUE;
// 1813             }
// 1814 
// 1815             if ( stackProfile == 0 )
// 1816             {
// 1817               //Remove from the list
// 1818               bdb_nwkDescFree(pNwkDesc);
// 1819               ResultCount--;
// 1820               continue;
// 1821             }
// 1822           }
// 1823         }
// 1824       }
// 1825     }
// 1826   }
// 1827 }
// 1828       
// 1829  /*********************************************************************
// 1830  * @fn          bdb_tryNwkAssoc
// 1831  *
// 1832  * @brief       Try to associate to the first network in the network descriptor list
// 1833  *
// 1834  * @param       none
// 1835  *
// 1836  * @return      none
// 1837  */
// 1838 static void bdb_tryNwkAssoc(void)
// 1839 {
// 1840   if(pBDBListNwk)
// 1841   {
// 1842     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 1843     
// 1844     //Try the first in the list after the filtering
// 1845     if(ZSuccess != bdb_joinProcess(pBDBListNwk))
// 1846     {
// 1847       //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
// 1848       uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
// 1849       bdb_nwkDescFree(pBDBListNwk);
// 1850       bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
// 1851     }
// 1852   }
// 1853   else
// 1854   {
// 1855     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
// 1856     uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
// 1857     
// 1858     bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
// 1859   }
// 1860 }
// 1861 
// 1862 
// 1863 
// 1864  /*********************************************************************
// 1865  * @fn          bdb_nwkAssocAttemt
// 1866  *
// 1867  * @brief       Process the result of an attempt to associate to a network 
// 1868  *
// 1869  * @param       didSuccess - bool
// 1870  *
// 1871  * @return      none
// 1872  */
// 1873 void bdb_nwkAssocAttemt(bool didSuccess)
// 1874 {
// 1875   bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
// 1876   uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
// 1877   uint8 status;
// 1878   
// 1879   if(didSuccess)
// 1880   {
// 1881     status = BDB_MSG_EVENT_SUCCESS;
// 1882   }
// 1883   else
// 1884   {
// 1885     if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
// 1886     {
// 1887       bdb_nwkAssocRetriesCount++;
// 1888     }
// 1889     else
// 1890     {
// 1891       //Free the first in the list and prepare for futher processing
// 1892       bdb_nwkDescFree(pBDBListNwk);
// 1893       bdb_nwkAssocRetriesCount = 0;
// 1894     }
// 1895     status = BDB_MSG_EVENT_FAIL;
// 1896   }
// 1897   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
// 1898 }
// 1899                        
// 1900 
// 1901 /****************************************************************************
// 1902  * @fn          bdb_nwkDescFree
// 1903  *
// 1904  * @brief       This function frees one network discovery data.
// 1905  *
// 1906  * @param       ZSuccess - If the device was found and erased
// 1907  * @param       ZInvalidParameter - Not found
// 1908  *
// 1909  * @return      none
// 1910  */
// 1911 ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
// 1912 {
// 1913   networkDesc_t* current_desc;
// 1914   networkDesc_t* prev_desc;
// 1915   
// 1916   current_desc = pBDBListNwk;
// 1917 
// 1918   while(current_desc != NULL)
// 1919   {  
// 1920     if(current_desc == nodeDescToRemove)
// 1921     {
// 1922       if (current_desc == pBDBListNwk)
// 1923       {
// 1924         pBDBListNwk = pBDBListNwk->nextDesc;
// 1925       }
// 1926       else
// 1927       {
// 1928         prev_desc->nextDesc = current_desc->nextDesc;
// 1929       }
// 1930       
// 1931       osal_mem_free( current_desc );
// 1932       
// 1933       return ZSuccess;
// 1934     }
// 1935 
// 1936     prev_desc = current_desc;
// 1937     current_desc = current_desc->nextDesc;
// 1938   }
// 1939   
// 1940   return ZInvalidParameter;
// 1941 }
// 1942 
// 1943 /*********************************************************************
// 1944 * @fn          bdb_joinProcess
// 1945 *
// 1946 * @brief       Start the joining process for the selected nwk
// 1947 *
// 1948 * @return      ZStatus_t
// 1949 */  
// 1950 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
// 1951 {
// 1952   ZStatus_t status;
// 1953  
// 1954   ZDApp_ChangeState( DEV_NWK_JOINING );
// 1955   ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
// 1956 
// 1957   status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1958                         pChosenNwk->logicalChannel,
// 1959                         ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1960                         pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
// 1961   
// 1962   if(status == ZSuccess)
// 1963   {
// 1964     // The receiver is on, turn network layer polling off.
// 1965     if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1966     {
// 1967       // for an End Device with NO Child Table Management process or for a Router
// 1968       if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1969            ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
// 1970       {
// 1971         NLME_SetPollRate( 0 );
// 1972         NLME_SetQueuedPollRate( 0 );
// 1973         NLME_SetResponseRate( 0 );
// 1974       }
// 1975     }
// 1976     else
// 1977     {
// 1978       if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1979       {
// 1980         ZDApp_SavedPollRate = zgPollRate;
// 1981         NLME_SetPollRate( zgRejoinPollRate );
// 1982       }
// 1983     }
// 1984   }
// 1985   return status;
// 1986 }
// 1987 #endif
// 1988 
// 1989 
// 1990  /*********************************************************************
// 1991  * @fn          bdb_setChannelAttribute
// 1992  *
// 1993  * @brief       Set the primary or seconday channel for discovery or formation procedure
// 1994  *
// 1995  * @param       isPrimaryChannel - True if channel to set is primary,  
// 1996  *                                 False if the channel to set is secondary
// 1997  *
// 1998  * @param       channel - Channel mask
// 1999  *
// 2000  * @return      none
// 2001  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2002 void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
bdb_setChannelAttribute:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function bdb_setChannelAttribute
        CODE
// 2003 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2004   if(isPrimaryChannel)
        MOV       A,R1
        JZ        ??bdb_setChannelAttribute_0
// 2005   {
// 2006     bdbAttributes.bdbPrimaryChannelSet = channel;
        MOV       DPTR,#bdbAttributes + 4
        SJMP      ??bdb_setChannelAttribute_1
// 2007   }
// 2008   else
// 2009   {
// 2010     bdbAttributes.bdbSecondaryChannelSet = channel;
??bdb_setChannelAttribute_0:
        MOV       DPTR,#bdbAttributes
??bdb_setChannelAttribute_1:
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2011   }
// 2012 }
        SJMP      ??Subroutine40_0
          CFI EndBlock cfiBlock96
// 2013 
// 2014  /*********************************************************************
// 2015  * @fn          bdb_setChannel
// 2016  *
// 2017  * @brief       Set channel and save it in Nv for joining/formation operations
// 2018  *
// 2019  * @param       channel - Channel mask
// 2020  *
// 2021  * @return      none
// 2022  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x4
          CFI EndBlock cfiBlock97
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock98
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock99

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2023 void bdb_setChannel(uint32 channel)
bdb_setChannel:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function bdb_setChannel
        CODE
// 2024 {
        FUNCALL bdb_setChannel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2025   //Assign the channel and save it into nv
// 2026   vScanChannels = channel;
        MOV       DPTR,#zgDefaultChannelList
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2027   runtimeChannel = channel;
        MOV       DPTR,#runtimeChannel
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2028     
// 2029   osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#zgDefaultChannelList & 0xff
        MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        SJMP      ?Subroutine2
// 2030 }
          CFI EndBlock cfiBlock100
// 2031 
// 2032 
// 2033  /*********************************************************************
// 2034  * @fn          bdb_nwkJoiningFormation   
// 2035  *
// 2036  * @brief       Performs Joining/Formation operation on primary or secondary channel
// 2037  *
// 2038  * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
// 2039  *
// 2040  * @return      none
// 2041  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2042 void bdb_nwkJoiningFormation(bool isJoining)
bdb_nwkJoiningFormation:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function bdb_nwkJoiningFormation
        CODE
// 2043 {
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2044   
// 2045   if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkJoiningFormation_0
        MOV       DPTR,#bdbAttributes + 4
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V0
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JZ        ??bdb_nwkJoiningFormation_0
// 2046   {
// 2047     bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        SJMP      ??bdb_nwkJoiningFormation_1
// 2048   }
// 2049   else
// 2050   {
// 2051     vDoPrimaryScan = FALSE;
??bdb_nwkJoiningFormation_0:
        MOV       DPTR,#vDoPrimaryScan
        CLR       A
        MOVX      @DPTR,A
// 2052     bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
??bdb_nwkJoiningFormation_1:
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 2053   }
// 2054 
// 2055   if(vScanChannels)
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_2
// 2056   {
// 2057     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_nwkJoiningFormation_3
// 2058     {
// 2059       if(isJoining)
        MOV       A,R6
        JNZ       ??bdb_nwkJoiningFormation_3
// 2060       {
// 2061         ZDOInitDeviceEx(100,0);
// 2062       }
// 2063       else
// 2064       {
// 2065         ZDOInitDeviceEx(100,1);
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x1
        SJMP      ??bdb_nwkJoiningFormation_4
// 2066       }
// 2067     }
// 2068     //ZED can only join, and ZC can only create
// 2069     else
// 2070     {
// 2071       ZDOInitDeviceEx(100,0);
??bdb_nwkJoiningFormation_3:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
??bdb_nwkJoiningFormation_4:
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        SJMP      ??bdb_nwkJoiningFormation_5
// 2072     }
// 2073   }
// 2074   else
// 2075   {
// 2076     if(isJoining)
??bdb_nwkJoiningFormation_2:
        MOV       A,R6
        MOV       R2,#0x0
        JZ        ??bdb_nwkJoiningFormation_6
// 2077     {
// 2078       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R1,#0x3
        SJMP      ??bdb_nwkJoiningFormation_7
// 2079     }
// 2080     else
// 2081     {
// 2082       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkJoiningFormation_6:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R1,#0x5
??bdb_nwkJoiningFormation_7:
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2083     }
// 2084   }
// 2085 }
??bdb_nwkJoiningFormation_5:
        LJMP      ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock101
// 2086 
// 2087 #if (ZG_BUILD_JOINING_TYPE)
// 2088  /*********************************************************************
// 2089  * @fn          bdb_tcLinkKeyExchangeAttempt
// 2090  *
// 2091  * @brief       Generic send msg for TC link key exchange process attempts
// 2092  *
// 2093  * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
// 2094  * @param       bdbTCExchangeState - Step in which the attemp was done
// 2095  *
// 2096  * @return      none
// 2097  */
// 2098 void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
// 2099 {
// 2100   bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
// 2101   uint8 dummy;
// 2102   bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
// 2103   if(didSuccess)
// 2104   {
// 2105     //Allow try since we are performing a new step.
// 2106     osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
// 2107     bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
// 2108   }
// 2109   else
// 2110   {
// 2111     bdbEventStatus = BDB_MSG_EVENT_FAIL;
// 2112   }
// 2113   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
// 2114 }
// 2115 
// 2116 
// 2117  /*********************************************************************
// 2118  * @fn          bdb_requestVerifyTCLinkKey
// 2119  *
// 2120  * @brief       Attempt to verify the TC link key by sending Verify Key Request
// 2121  *
// 2122  * @param       none
// 2123  *
// 2124  * @return      none
// 2125  */
// 2126 void bdb_requestVerifyTCLinkKey(void)
// 2127 {
// 2128     uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2129     APSME_VerifyKeyReq_t vKey;
// 2130     
// 2131     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
// 2132     
// 2133     vKey.tcExtAddr = TC_ExtAddr;
// 2134     vKey.keyType = KEY_TYPE_TC_LINK;
// 2135     
// 2136     APSME_VerifyKeyReq( &vKey );
// 2137     
// 2138     osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2139     osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
// 2140     
// 2141 }
// 2142 
// 2143 /*********************************************************************
// 2144  * @fn          bdb_requestTCLinkKey
// 2145  *
// 2146  * @brief       Attempt to request a TC link key
// 2147  *
// 2148  * @param       none
// 2149  *
// 2150  * @return      none
// 2151  */
// 2152 void bdb_requestTCLinkKey(void)
// 2153 {
// 2154   zAddrType_t destAddr;
// 2155   APSME_RequestKeyReq_t req;
// 2156 
// 2157   destAddr.addrMode = Addr16Bit;
// 2158   destAddr.addr.shortAddr = 0x0000;
// 2159   
// 2160   req.dstAddr = destAddr.addr.shortAddr;
// 2161   req.keyType = KEY_TYPE_TC_LINK;
// 2162   
// 2163   APSME_RequestKeyReq(&req);
// 2164   
// 2165   osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2166   
// 2167   osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
// 2168 } 
// 2169 
// 2170 
// 2171 /*********************************************************************
// 2172  * @fn          bdb_requestTCStackVersion
// 2173  *
// 2174  * @brief       Attempt to request the TC stack version using ZDP Node desc if 
// 2175  *              join a Centralized nwk
// 2176  *
// 2177  * @param       none
// 2178  *
// 2179  * @return      none
// 2180  */
// 2181 void bdb_requestTCStackVersion(void)
// 2182 {
// 2183   if(requestNewTrustCenterLinkKey)
// 2184   {
// 2185     if(!APSME_IsDistributedSecurity())
// 2186     {
// 2187       if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
// 2188       {
// 2189         zAddrType_t destAddr;
// 2190        
// 2191         destAddr.addrMode = Addr16Bit;
// 2192         destAddr.addr.shortAddr = 0x0000;
// 2193        
// 2194         ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
// 2195         
// 2196         osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
// 2197         osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
// 2198         return;
// 2199       }
// 2200       else
// 2201       {
// 2202         if(pfnCBKETCLinkKeyExchange)
// 2203         {
// 2204           pfnCBKETCLinkKeyExchange();
// 2205         }
// 2206         return;
// 2207       }
// 2208     }
// 2209     else
// 2210     {
// 2211       bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
// 2212     }
// 2213   }
// 2214   else
// 2215   {
// 2216     //Key not required, set default which is global
// 2217     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 2218   }
// 2219   //TC link key not required or join distributed nwk
// 2220   bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
// 2221 }
// 2222 #endif
// 2223 
// 2224 
// 2225 /*********************************************************************
// 2226  * @fn          bdb_nwkSteeringDeviceOnNwk
// 2227  *
// 2228  * @brief       Send ZDP mgmt permit joining
// 2229  *
// 2230  * @param       none
// 2231  *
// 2232  * @return      none
// 2233  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2234 void bdb_nwkSteeringDeviceOnNwk(void)
bdb_nwkSteeringDeviceOnNwk:
          CFI Block cfiBlock102 Using cfiCommon0
          CFI Function bdb_nwkSteeringDeviceOnNwk
        CODE
// 2235 {
        FUNCALL bdb_nwkSteeringDeviceOnNwk, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 2236   zAddrType_t dstAddr;
// 2237   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 2238   dstAddr.addrMode = AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 2239   // Trust Center significance is always true
// 2240   ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        MOV       R4,#0x1
        MOV       R1,#-0x4c
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
// 2241 }
        MOV       A,#0x9
          CFI EndBlock cfiBlock102
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock103 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 9)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        LJMP      ??Subroutine37_0 & 0xFFFF
          CFI EndBlock cfiBlock103
// 2242 
// 2243 
// 2244 /*********************************************************************
// 2245  * @fn          bdb_startResumeCommissioningProcess
// 2246  *
// 2247  * @brief       Starts or resume the commissioning operations sets in the 
// 2248  *              commissioningMode attribute
// 2249  *
// 2250  * @param       none
// 2251  *
// 2252  * @return      none
// 2253  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2254 void bdb_startResumeCommissioningProcess(void)
bdb_startResumeCommissioningProcess:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
        CODE
// 2255 {
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2256 
// 2257 #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
// 2258   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
// 2259   {
// 2260     uint16 nwkAddr;
// 2261 
// 2262     //Does the device supports this commissioning mode?
// 2263     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
// 2264     {
// 2265       //Clear previous state and substates
// 2266       osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2267       bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
// 2268       
// 2269       // Get our short address
// 2270       ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
// 2271       if ( nwkAddr == INVALID_NODE_ADDR )
// 2272       {
// 2273         initiatorSelectNwkParams();
// 2274       }
// 2275       
// 2276       touchLinkInitiator_StartDevDisc( );  
// 2277       
// 2278       bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
// 2279     }
// 2280     else
// 2281     {
// 2282       //Process the next commissioning mode
// 2283       bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
// 2284     }
// 2285     return;
// 2286   }
// 2287 #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
// 2288   
// 2289 #if ZG_BUILD_ENDDEVICE_TYPE
// 2290   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 2291   {
// 2292     if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
// 2293     {
// 2294       //No commissioning process can be performed if the ZED has lost its parent
// 2295       return;
// 2296     }
// 2297   }
// 2298 #endif
// 2299   
// 2300   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_0
// 2301   {
// 2302     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2303     
// 2304     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_1
// 2305     {
// 2306 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2307       bdb_ClearNetworkParams();
// 2308 #endif
// 2309       if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_startResumeCommissioningProcess_2
// 2310       {
// 2311         bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2312         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2313       }
// 2314 #if (ZG_BUILD_JOINING_TYPE)
// 2315       else
// 2316       {
// 2317         if(ZG_DEVICE_JOINING_TYPE)
// 2318         {
// 2319           vDoPrimaryScan = TRUE;
// 2320           
// 2321           //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
// 2322           osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
// 2323           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
// 2324           bdb_nwkJoiningFormation(TRUE);
// 2325           bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
// 2326         }
// 2327       }
// 2328 #endif
// 2329 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2330       if(ZG_DEVICE_COORDINATOR_TYPE)
// 2331       {
// 2332         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
??bdb_startResumeCommissioningProcess_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2333       }
// 2334 #endif
// 2335     }
// 2336     return;
??bdb_startResumeCommissioningProcess_1:
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2337   }
// 2338   
// 2339   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
??bdb_startResumeCommissioningProcess_0:
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_startResumeCommissioningProcess_4
// 2340   {
// 2341     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2342     
// 2343     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_5
// 2344     {
// 2345       if(!bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_startResumeCommissioningProcess_5
// 2346       {
// 2347 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2348       bdb_ClearNetworkParams();
// 2349 #endif
// 2350         vDoPrimaryScan = TRUE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2351         
// 2352         osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2353         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2354 
// 2355         bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x0
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
// 2356         bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x2
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
// 2357         return;
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2358       }
// 2359     }
// 2360     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_startResumeCommissioningProcess_5:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2361     return;
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2362   }
// 2363 
// 2364 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
// 2365   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
??bdb_startResumeCommissioningProcess_4:
        MOV       C,0xE0 /* A   */.3
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_3 & 0xFFFF
// 2366   {
// 2367     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x6
        MOVX      @DPTR,A
// 2368     
// 2369     //Is the device on a network?
// 2370     if(bdb_isDeviceNonFactoryNew())
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2371     {
// 2372       zclAttrRec_t attrRec;
// 2373 
// 2374       endPointDesc_t *bdb_CurrEpDescriptor = NULL;
// 2375 
// 2376       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 2377       
// 2378       //If not found endpoint with Identify cluster is found, then report fail
// 2379       if(bdb_CurrEpDescriptor == NULL)
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_6 & 0xFFFF
// 2380       {
// 2381         bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
// 2382         return;
// 2383       }
// 2384       
// 2385       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_11:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_7 & 0xFFFF
// 2386       {
// 2387         if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2388                   ATTRID_IDENTIFY_TIME, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_8 & 0xFFFF
// 2389         {
// 2390           //Set it to at less 180 
// 2391           if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_20:
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4b
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??bdb_startResumeCommissioningProcess_9
// 2392           {
// 2393             *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,#-0x4c
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 2394              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2395 
// 2396             if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_68:
        JZ        ??bdb_startResumeCommissioningProcess_9
// 2397             {
// 2398               if(bdbIndentifyActiveEndpoint == 0xFF)
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??bdb_startResumeCommissioningProcess_10
// 2399               {
// 2400                 pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
        ; Setup parameters for indirect call
        MOV       R1,#-0x1
        SJMP      ??bdb_startResumeCommissioningProcess_11
// 2401               }
// 2402               else
// 2403               {
// 2404                 pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
??bdb_startResumeCommissioningProcess_10:
        ; Setup parameters for indirect call
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
// 2405               }
// 2406             }
// 2407           }
??bdb_startResumeCommissioningProcess_11:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?CALL_IND
// 2408           //Attribute found and set, report success
// 2409           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_9:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_4:
        JC        ??bdb_startResumeCommissioningProcess_12
// 2410           {
// 2411             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x9
        SJMP      ??bdb_startResumeCommissioningProcess_13
// 2412           }
// 2413           else
// 2414           {
// 2415             bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2416 
// 2417             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_startResumeCommissioningProcess_12:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2418             bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x9
        LCALL     ??Subroutine34_0 & 0xFFFF
// 2419 
// 2420             bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2421           }
// 2422         }
??CrossCallReturnLabel_42:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        SJMP      ??bdb_startResumeCommissioningProcess_7
// 2423         else
// 2424         {
// 2425           //Attribute not found and no initiator process, report fail
// 2426           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_8:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_5:
        JC        ??bdb_startResumeCommissioningProcess_7
// 2427           {
// 2428             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
??bdb_startResumeCommissioningProcess_13:
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2429           }
// 2430         }
// 2431       }  //F&B Target
// 2432       
// 2433       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
??bdb_startResumeCommissioningProcess_7:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_49:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_3
// 2434       {
// 2435         bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2436         
// 2437         //If no function to add binds is available then do not process Initiator
// 2438         if(!pbindAddEntry)
        MOV       DPTR,#pbindAddEntry
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_8:
        JNZ       ??bdb_startResumeCommissioningProcess_14
// 2439         {
// 2440           //If no target process, then report fail
// 2441           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??bdb_startResumeCommissioningProcess_3
// 2442           {
// 2443             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
// 2444           }        
// 2445         }
// 2446         else
// 2447         {
// 2448           //Send identify query with the endpoint requested
// 2449           if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
// 2450           {
// 2451             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
// 2452           }
// 2453 
// 2454           //If periodic F&B is enabled
// 2455           if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2456           {
// 2457             // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
// 2458             bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
// 2459             
// 2460             osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
// 2461           }
// 2462 
// 2463           bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
// 2464           bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
// 2465 
// 2466           bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 2467         }
// 2468       } //F&B Initiator
// 2469     }
// 2470     //Not in the network
// 2471     else
// 2472     {
// 2473       bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
??bdb_startResumeCommissioningProcess_6:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2474     }
// 2475     
// 2476     return;
        SJMP      ??bdb_startResumeCommissioningProcess_3
??bdb_startResumeCommissioningProcess_14:
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_15
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
??bdb_startResumeCommissioningProcess_15:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0xc
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xa
        LCALL     ??Subroutine34_0 & 0xFFFF
// 2477   }
??CrossCallReturnLabel_43:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 2478 #endif
// 2479   
// 2480 }
??bdb_startResumeCommissioningProcess_3:
        MOV       A,#0xb
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock104

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function bdb_event_loop
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOV       DPTR,#pfnIdentifyTimeChangeCB + 1
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function bdb_event_loop
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function bdb_event_loop
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function bdb_event_loop
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_33:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function bdb_AddRespondentNode
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function bdb_zclRespondentListClean
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function bdb_CreateRespondentList
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function bdb_AddRespondentNode
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function bdb_zclRespondentListClean
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker129 Using cfiCommon1
          CFI (cfiPicker129) NoFunction
          CFI (cfiPicker129) Picker
        MOV       R7,A
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiPicker129
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond130 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function bdb_AddRespondentNode
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function bdb_CreateRespondentList
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function bdb_AddRespondentNode
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function bdb_zclRespondentListClean
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function bdb_TCAddJoiningDevice
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function bdb_TCAddJoiningDevice
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function bdb_TCAddJoiningDevice
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function bdb_TCProcessJoiningList
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function bdb_TCProcessJoiningList
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function bdb_TCProcessJoiningList
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function bdb_reportCommissioningState
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function bdb_event_loop
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function bdb_event_loop
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function bdb_TCAddJoiningDevice
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function bdb_AddRespondentNode
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function bdb_CreateRespondentList
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function bdb_AddRespondentNode
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function bdb_zclRespondentListClean
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156
// 2481 
// 2482 /*********************************************************************
// 2483  * @fn          bdb_event_loop
// 2484  *
// 2485  * @brief       Main event loop bdb tasks.
// 2486  *
// 2487  * @param       task_id - task id
// 2488  * @param       events - event bitmap
// 2489  *
// 2490  * @return      unprocessed events
// 2491  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2492 UINT16 bdb_event_loop(byte task_id, UINT16 events)
bdb_event_loop:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI Function bdb_event_loop
        CODE
// 2493 {
        FUNCALL bdb_event_loop, bdb_startResumeCommissioningProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessSimpleDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessIEEEAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_TCProcessJoiningList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2494   (void)task_id;  // Intentionally unreferenced parameter
// 2495   
// 2496 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2497   endPointDesc_t * bdb_CurrEpDescriptor;
// 2498 #endif
// 2499   
// 2500   if(events & BDB_CHANGE_COMMISSIONING_STATE)
        MOV       A,R6
        ANL       A,#0x4
        JZ        ??bdb_event_loop_0
// 2501   {
// 2502     switch(bdbCommissioningProcedureState.bdbCommissioningState)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_1
        ADD       A,#-0x4
        JZ        ??bdb_event_loop_2
        ADD       A,#-0x2
        JZ        ??bdb_event_loop_3
        SJMP      ??bdb_event_loop_4
// 2503     {
// 2504       case BDB_COMMISSIONING_STATE_START_RESUME:
// 2505         bdb_startResumeCommissioningProcess();
??bdb_event_loop_1:
        ; Setup parameters for call to function bdb_startResumeCommissioningProcess
        LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
// 2506       break;
        SJMP      ??bdb_event_loop_4
// 2507       
// 2508       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2509         if (ZG_BUILD_JOINING_TYPE)
// 2510         {
// 2511           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
// 2512         }
// 2513       break;
// 2514       
// 2515       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 2516         bdb_nwkSteeringDeviceOnNwk();
??bdb_event_loop_2:
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2517         
// 2518         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2519       break;
        SJMP      ??bdb_event_loop_4
// 2520       
// 2521       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2522         bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_3:
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 2523         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      @DPTR,A
// 2524         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2525       break;
// 2526       
// 2527     }
// 2528     return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
??bdb_event_loop_4:
        MOV       A,R6
        XRL       A,#0x4
        LJMP      ??bdb_event_loop_5 & 0xFFFF
// 2529   }
// 2530 
// 2531   if ( events & SYS_EVENT_MSG )
??bdb_event_loop_0:
        MOV       A,R7
        ANL       A,#0x80
        JNZ       ??bdb_event_loop_6
// 2532   {
// 2533     uint8 *msg_ptr;
// 2534     
// 2535     while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
// 2536     {
// 2537       //Process the Incomming ZDO messages used by BDB commissioning methods
// 2538       if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
// 2539       {
// 2540         bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
// 2541       }
// 2542       
// 2543       //Validate the is receive on the right process
// 2544       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
// 2545       {
// 2546         bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
// 2547       }
// 2548       //Notify the user
// 2549       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
// 2550       {
// 2551         ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
// 2552         if(pfnCommissioningStatusCB)
// 2553         {
// 2554           pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2555         }
// 2556 #ifdef MT_APP_CNF_FUNC
// 2557         //Notify the host processor about the event
// 2558         MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2559 #endif
// 2560       }
// 2561 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2562       else
// 2563       {
// 2564         if(ZG_DEVICE_COORDINATOR_TYPE)
// 2565         {
// 2566           //Notify the status 
// 2567           if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
// 2568           {
// 2569             pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
// 2570           }
// 2571         }
// 2572       }
// 2573 #endif
// 2574       // Release the memory
// 2575       osal_msg_deallocate( msg_ptr );
// 2576     }
// 2577 
// 2578     // Return unprocessed events
// 2579     return (events ^ SYS_EVENT_MSG);
// 2580   }
// 2581   
// 2582 
// 2583   if(events & BDB_PROCESS_TIMEOUT)
        MOV       A,R7
        ANL       A,#0x10
        JNZ       $+5
        LJMP      ??bdb_event_loop_7 & 0xFFFF
// 2584   {
// 2585     bdb_processTimeout();
// 2586     // Return unprocessed events
// 2587     return (events ^ BDB_PROCESS_TIMEOUT);
        MOV       A,R7
        XRL       A,#0x10
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2588   }
??bdb_event_loop_9:
        MOV       A,#0x9
        XRL       A,R0
        JNZ       ??bdb_event_loop_10
        ; Setup parameters for indirect call
        MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
??bdb_event_loop_11:
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?CALL_IND
??bdb_event_loop_10:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??bdb_event_loop_6:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??bdb_event_loop_12
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#-0x2d
        XRL       A,R0
        JNZ       ??bdb_event_loop_13
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for bdb_event_loop>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_14
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_event_loop_15
        CODE
??bdb_event_loop_15:
        ; Setup parameters for call to function bdb_ProcessSimpleDesc
        LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
        SJMP      ??bdb_event_loop_10
??bdb_event_loop_14:
        ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
        LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
        SJMP      ??bdb_event_loop_10
??bdb_event_loop_13:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??bdb_event_loop_10
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       A,#0xa
        XRL       A,R0
        JNZ       ??bdb_event_loop_9
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPTR,#pfnCommissioningStatusCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_69:
        JZ        ??bdb_event_loop_10
        ; Setup parameters for indirect call
        LJMP      ??bdb_event_loop_11 & 0xFFFF
??bdb_event_loop_12:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2589   
// 2590   if(events &  BDB_REPORT_TIMEOUT){
??bdb_event_loop_7:
        MOV       A,R6
        ANL       A,#0x80
        JZ        ??bdb_event_loop_16
// 2591 #ifdef BDB_REPORTING    
// 2592     bdb_RepProcessEvent();
// 2593 #endif
// 2594     // Return unprocessed events
// 2595     return (events ^ BDB_REPORT_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x80
        MOV       R2,A
        LJMP      ??bdb_event_loop_17 & 0xFFFF
// 2596   }
// 2597   
// 2598 #if (ZG_BUILD_JOINING_TYPE)
// 2599   if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
// 2600   {
// 2601     if(ZG_DEVICE_JOINING_TYPE)
// 2602     {
// 2603       NLME_LeaveReq_t leaveReq;
// 2604       // Set every field to 0
// 2605       osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
// 2606       
// 2607       bdb_setNodeIsOnANetwork(FALSE);
// 2608 
// 2609       if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
// 2610       {
// 2611         osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
// 2612       }
// 2613     }
// 2614     // Return unprocessed events
// 2615     return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
// 2616   }
// 2617 #endif
// 2618   
// 2619   if(events & BDB_TC_JOIN_TIMEOUT)
??bdb_event_loop_16:
        MOV       A,R7
        ANL       A,#0x8
        JZ        ??bdb_event_loop_18
// 2620   {     
// 2621 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2622     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2623     {
// 2624       bdb_TCProcessJoiningList();
        ; Setup parameters for call to function bdb_TCProcessJoiningList
        LCALL     `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
// 2625     }
// 2626 #endif    
// 2627     return (events ^ BDB_TC_JOIN_TIMEOUT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2628   }
// 2629 
// 2630 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2631   
// 2632   if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
??bdb_event_loop_18:
        MOV       A,R6
        ANL       A,#0x40
        JZ        ??bdb_event_loop_19
// 2633   {
// 2634     if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2635     {
// 2636       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2637       
// 2638       //If we have endpoint from which to send the identify command, then proceed, otherwise finish
// 2639       if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
        MOV       A,R2
        ORL       A,?V1
        JZ        ??bdb_event_loop_20
// 2640       {
// 2641         //Substract an attempt
// 2642         bdb_FB_InitiatorCurrentCyclesNumber--;
// 2643         
// 2644         if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
        JZ        ??bdb_event_loop_21
// 2645         {
// 2646           //Only send Identify Query if there is no pending responses from a previous identify query
// 2647           if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JNZ       ??bdb_event_loop_22
        ; Setup parameters for call to function bdb_getRespondentRetry
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       ?V3,R3
        MOV       A,R2
        ORL       A,?V3
        JNZ       ??bdb_event_loop_22
// 2648           {
// 2649             //Send identify query with the endpoint requested
// 2650             bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
// 2651           }
// 2652           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
??bdb_event_loop_22:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2653         }
// 2654       }
// 2655     }
// 2656 
// 2657     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
??bdb_event_loop_20:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_event_loop_23
// 2658     {
// 2659       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
??bdb_event_loop_21:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2660     }
// 2661     
// 2662     return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
??bdb_event_loop_23:
        MOV       A,R6
        XRL       A,#0x40
??bdb_event_loop_5:
        MOV       R2,A
        MOV       A,R7
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2663   }
// 2664   
// 2665   if(events & BDB_IDENTIFY_TIMEOUT)
??bdb_event_loop_19:
        MOV       A,R7
        ANL       A,#0x20
        JNZ       $+5
        LJMP      ??bdb_event_loop_24 & 0xFFFF
// 2666   {
// 2667     zclAttrRec_t identifyAttrRec;
// 2668     epList_t *bdb_CurrEpDescriptorNextInList = NULL;
// 2669     bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV       ?V0,R0
        MOV       ?V1,R1
// 2670     
// 2671     bool KeepIdentifyTimerRunning = FALSE;
        MOV       ?V4,#0x0
        SJMP      ??CrossCallReturnLabel_25
// 2672     
// 2673     while(bdb_CurrEpDescriptorNextInList != NULL )
// 2674     {
// 2675       endPointDesc_t *bdb_EpDescriptor = NULL;
// 2676       bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
// 2677     
// 2678       //Do not check ZDO or Zigbee reserved endpoints
// 2679       if((bdb_CurrEpDescriptorList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
// 2680       {
// 2681         bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
// 2682         continue;
// 2683       }
// 2684       
// 2685       if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2686                         ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
// 2687       {
// 2688         if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
// 2689         {
// 2690           (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
// 2691           KeepIdentifyTimerRunning = TRUE;
// 2692         }
// 2693         else
// 2694         {
// 2695           // Use bdb success main state
// 2696           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_25:
        MOV       DPTR,#bdbAttributes + 10
        CLR       A
        MOVX      @DPTR,A
// 2697           if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_70:
        JZ        ??bdb_event_loop_26
// 2698           {
// 2699             pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
        ; Setup parameters for indirect call
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine22 & 0xFFFF
// 2700           }
// 2701         }
??CrossCallReturnLabel_52:
        LCALL     ?CALL_IND
// 2702       }
// 2703       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_26:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_event_loop_27
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV       ?V2,R0
        MOV       ?V3,R1
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_26
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_event_loop_26
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        JZ        ??bdb_event_loop_26
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ        ??bdb_event_loop_25
        MOV       A,R2
        ADD       A,#-0x1
        DEC       R2
        MOV       A,R3
        ADDC      A,#-0x1
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       ?V4,#0x1
        SJMP      ??bdb_event_loop_26
// 2704     }
// 2705     
// 2706     //If any endpoint has identify running, keep the timer on
// 2707     if(KeepIdentifyTimerRunning)
??bdb_event_loop_27:
        MOV       A,?V4
        JZ        ??bdb_event_loop_28
// 2708     {
// 2709       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP      ??bdb_event_loop_29
// 2710     }
// 2711     else
// 2712     {
// 2713       osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
??bdb_event_loop_28:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2714     }
// 2715     
// 2716     // Return unprocessed events
// 2717     return (events ^ BDB_IDENTIFY_TIMEOUT);
??bdb_event_loop_29:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        SJMP      ??bdb_event_loop_8
// 2718   }
// 2719   
// 2720   if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
??bdb_event_loop_24:
        MOV       A,R7
        ANL       A,#0x40
        JZ        ??bdb_event_loop_30
// 2721   {
// 2722     // Send Simple Descriptor request to a respondent node
// 2723     bdb_ProcessRespondentList();
        ; Setup parameters for call to function bdb_ProcessRespondentList
        LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
// 2724 
// 2725     return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
??bdb_event_loop_8:
        MOV       R3,A
        SJMP      ??bdb_event_loop_17
// 2726   }
// 2727 #endif
// 2728   
// 2729   return 0;
??bdb_event_loop_30:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_event_loop_17:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 2730 }
          CFI EndBlock cfiBlock157

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function bdb_event_loop
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function bdb_ProcessNodeDescRsp
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function bdb_event_loop
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_34:
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_5
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function bdb_event_loop
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-4
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        MOV       DPTR,#bdb_CurrEpDescriptorList
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_37:
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond170 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
          CFI Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_5
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-6
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-6
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function bdb_event_loop
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-6
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_15
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-6
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-6
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_4
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-8
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_5
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-8
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-8
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function bdb_event_loop
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-8
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_4
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-6
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_5
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-6
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-6
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function bdb_event_loop
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-6
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker187 Using cfiCommon1
          CFI (cfiPicker187) NoFunction
          CFI (cfiPicker187) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_38:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiPicker187

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function bdb_TCJoiningDeviceFree
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function bdb_startResumeCommissioningProcess
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function bdb_event_loop
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function bdb_AddRespondentNode
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function bdb_zclRespondentListClean
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193
// 2731 
// 2732 /*********************************************************************
// 2733  * @fn          bdb_processZDOMgs
// 2734  *
// 2735  * @brief       Process ZDO messages used as part of BDB commissioning methods
// 2736  *
// 2737  * @param       zdoIncomingMsg_t - ZDO message
// 2738  *
// 2739  * @return      
// 2740  */
// 2741 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
// 2742 {
// 2743   switch ( pMsg->clusterID )
// 2744   {
// 2745 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
// 2746     case IEEE_addr_rsp:
// 2747        bdb_ProcessIEEEAddrRsp(pMsg);
// 2748     break;
// 2749     case Simple_Desc_rsp:
// 2750       bdb_ProcessSimpleDesc(pMsg);
// 2751     break;
// 2752 #endif
// 2753 
// 2754 #if (ZG_BUILD_JOINING_TYPE)    
// 2755     case Node_Desc_rsp:
// 2756       bdb_ProcessNodeDescRsp(pMsg);
// 2757     break;
// 2758 #endif
// 2759     
// 2760     default:
// 2761     break;
// 2762   }
// 2763 }
// 2764 
// 2765 
// 2766 /*********************************************************************
// 2767  * @fn      bdb_ProcessNodeDescRsp
// 2768  *
// 2769  * @brief   Process Node Descriptor response to validate the stack version of the
// 2770  *
// 2771  * @param   zdoIncomingMsg_t *pMsg
// 2772  *
// 2773  * @return  none
// 2774  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2775 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessNodeDescRsp:
          CFI Block cfiBlock194 Using cfiCommon0
          CFI Function bdb_ProcessNodeDescRsp
        CODE
// 2776 {
        FUNCALL bdb_ProcessNodeDescRsp, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, ZDO_ParseNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 35
        MOV       A,#-0x23
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2777   //Avoid processing unintended messages
// 2778   if(requestNewTrustCenterLinkKey && 
// 2779     (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2780   {
// 2781     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2782     {
// 2783       //Is this from the coordinator?
// 2784       if(pMsg->srcAddr.addr.shortAddr == 0x0000)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_71:
        JNZ       ??bdb_ProcessNodeDescRsp_0
// 2785       {
// 2786         ZDO_NodeDescRsp_t NDRsp;
// 2787         uint8 StackComplianceRev;
// 2788 
// 2789         //Stop timer to avoid unintended resets
// 2790         osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 2791         
// 2792         ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
        ; Setup parameters for call to function ZDO_ParseNodeDescRsp
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
// 2793         
// 2794         StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
// 2795         
// 2796         if( StackComplianceRev >= STACK_COMPL_REV_21 )
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       A,#0x9
        MOV       R0,#?V0
        LCALL     ?US_SHR
        CLR       C
        MOV       A,?V0
        SUBB      A,#0x15
        SUBB      A,0xE0 /* A   */
        CLR       C
        XRL       A,PSW
        RLC       A
        JC        ??bdb_ProcessNodeDescRsp_1
// 2797         {
// 2798           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
        SJMP      ??bdb_ProcessNodeDescRsp_0
// 2799         }
// 2800         else
// 2801         {
// 2802           APSME_TCLKDevEntry_t TCLKDevEntry;
// 2803           
// 2804           //Save the KeyAttribute for joining device that it has joined non-R21 nwk
// 2805           TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
??bdb_ProcessNodeDescRsp_1:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x3
        MOVX      @DPTR,A
// 2806           osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
// 2807           
// 2808           bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2809           bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2810         }
// 2811       }
// 2812     }
// 2813   }
// 2814 }
??bdb_ProcessNodeDescRsp_0:
        MOV       A,#0x23
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock194
// 2815 
// 2816 
// 2817 /*********************************************************************
// 2818  * @fn          bdb_touchlinkSendFNReset
// 2819  *
// 2820  * @brief       Starts the Factory New Procedure for Initiator
// 2821  *
// 2822  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2823  *
// 2824  * @return      none
// 2825  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2826 void bdb_touchlinkSendFNReset( void )
bdb_touchlinkSendFNReset:
          CFI Block cfiBlock195 Using cfiCommon0
          CFI Function bdb_touchlinkSendFNReset
        CODE
// 2827 {
        ; Saved register size: 0
        ; Auto size: 0
// 2828 #ifdef BDB_TL_INITIATOR
// 2829   touchLinkInitiator_ResetToFNProcedure( );
// 2830 #endif
// 2831 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock195
// 2832 
// 2833 
// 2834 /*********************************************************************
// 2835  * @fn          bdb_setNodeIsOnANetwork
// 2836  *
// 2837  * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
// 2838  *
// 2839  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2840  *
// 2841  * @return      none
// 2842  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2843 void bdb_setNodeIsOnANetwork(bool isOnANetwork)
bdb_setNodeIsOnANetwork:
          CFI Block cfiBlock196 Using cfiCommon0
          CFI Function bdb_setNodeIsOnANetwork
        CODE
// 2844 {
        FUNCALL bdb_setNodeIsOnANetwork, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2845   if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_0
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JNZ       ??bdb_setNodeIsOnANetwork_1
// 2846   {
// 2847     //We lose our network
// 2848     if(!isOnANetwork)
??bdb_setNodeIsOnANetwork_0:
        MOV       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_2
// 2849     {
// 2850       bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        CLR       A
        MOVX      @DPTR,A
// 2851     }
// 2852     
// 2853     bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
??bdb_setNodeIsOnANetwork_2:
        MOV       A,R6
        MOV       DPTR,#bdbAttributes + 14
        MOVX      @DPTR,A
// 2854     
// 2855     osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#(bdbAttributes + 14) & 0xff
        MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 2856   }
// 2857 }
??bdb_setNodeIsOnANetwork_1:
        LJMP      ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock196
// 2858 
// 2859 /*********************************************************************
// 2860  * @fn          bdb_setCommissioningGroupID
// 2861  *
// 2862  * @brief       Sets the commissioning groupd ID
// 2863  *
// 2864  * @param       groupID
// 2865  *
// 2866  * @return      none
// 2867  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2868 void bdb_setCommissioningGroupID(uint16 groupID)
bdb_setCommissioningGroupID:
          CFI Block cfiBlock197 Using cfiCommon0
          CFI Function bdb_setCommissioningGroupID
        CODE
// 2869 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2870   bdbAttributes.bdbCommissioningGroupID = groupID;
        MOV       DPTR,#bdbAttributes + 8
        LJMP      ?Subroutine3 & 0xFFFF
// 2871 }
          CFI EndBlock cfiBlock197
// 2872 
// 2873 /*********************************************************************
// 2874  * @fn      bdb_CreateRespondentList
// 2875  *
// 2876  * @brief   Create respondent list for finding and binding if empty
// 2877  *
// 2878  * @param   pHead - pointer to a pointer of the list head
// 2879  *
// 2880  * @return  none
// 2881  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2882 void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
bdb_CreateRespondentList:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
        CODE
// 2883 {
        FUNCALL bdb_CreateRespondentList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine13 & 0xFFFF
// 2884 
// 2885   // Create the list if empty
// 2886   if ( *pHead == NULL )
??CrossCallReturnLabel_53:
        JNZ       ??CrossCallReturnLabel_31
// 2887   {
// 2888     *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        LCALL     ?Subroutine10 & 0xFFFF
// 2889     
// 2890     if ( *pHead != NULL )
??CrossCallReturnLabel_79:
        JZ        ??CrossCallReturnLabel_31
// 2891     {
// 2892       (*pHead)->pNext = NULL;
        LCALL     ?Subroutine27 & 0xFFFF
// 2893     }
// 2894   }
// 2895   return;
??CrossCallReturnLabel_31:
        LJMP      ??Subroutine33_0 & 0xFFFF
// 2896 }
          CFI EndBlock cfiBlock198

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function bdb_AddRespondentNode
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker201 Using cfiCommon1
          CFI (cfiPicker201) NoFunction
          CFI (cfiPicker201) Picker
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiPicker201
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond202 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function bdb_CreateRespondentList
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function bdb_AddRespondentNode
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205
// 2897 
// 2898 /*********************************************************************
// 2899  * @fn      bdb_AddRespondentNode
// 2900  *
// 2901  * @brief   Add node to respondent list for finding and binding
// 2902  *
// 2903  * @param   pHead - pointer to a pointer of the list head
// 2904  *
// 2905  * @return  pointer to new node
// 2906  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2907 bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
bdb_AddRespondentNode:
          CFI Block cfiBlock206 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
        CODE
// 2908 {
        FUNCALL bdb_AddRespondentNode, bdb_CreateRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_AddRespondentNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL     ?Subroutine13 & 0xFFFF
// 2909   bdbFindingBindingRespondent_t **pCurr;
// 2910   bdbFindingBindingRespondent_t *temp;
// 2911   
// 2912     // Create respondent list if empty
// 2913   if ( *pHead == NULL )
??CrossCallReturnLabel_54:
        JNZ       ??bdb_AddRespondentNode_0
// 2914   {
// 2915     bdb_CreateRespondentList( pHead );
        ; Setup parameters for call to function bdb_CreateRespondentList
        LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
// 2916     return *pHead;
        LJMP      ??CrossCallReturnLabel_32 & 0xFFFF
// 2917   }
// 2918   else
// 2919   {
// 2920     // if pCmd is equal to NULL, don't look for duplucates
// 2921     if( pCmd != NULL )
??bdb_AddRespondentNode_0:
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_AddRespondentNode_1
// 2922     {
// 2923       //Find if any duplicate in the list
// 2924       temp = *pHead;
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
// 2925       
// 2926       while(temp != NULL)
// 2927       {
// 2928         if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
??bdb_AddRespondentNode_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_3
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_27:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_AddRespondentNode_4:
        JNZ       ??bdb_AddRespondentNode_3
// 2929         {
// 2930           //Duplicate
// 2931           if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine25 & 0xFFFF
// 2932           {
// 2933             return NULL;
// 2934           }
// 2935         }
??CrossCallReturnLabel_28:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_AddRespondentNode_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_AddRespondentNode_5:
        JZ        ??bdb_AddRespondentNode_6
// 2936         temp = temp->pNext;
??bdb_AddRespondentNode_3:
        MOV       A,R2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ?Subroutine15 & 0xFFFF
// 2937       }
// 2938     }
??CrossCallReturnLabel_7:
        JNZ       ??bdb_AddRespondentNode_2
// 2939     
// 2940     pCurr = &((*pHead)->pNext);
// 2941     
// 2942     while ( *pCurr != NULL )
// 2943     {
// 2944       pCurr = &((*pCurr)->pNext);
??bdb_AddRespondentNode_1:
        MOV       A,R0
        ADD       A,#0xf
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        LCALL     ??Subroutine42_0 & 0xFFFF
// 2945     }
??CrossCallReturnLabel_56:
        JNZ       ??bdb_AddRespondentNode_1
// 2946 
// 2947     *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        LCALL     ?Subroutine10 & 0xFFFF
// 2948     
// 2949     if(*pCurr == NULL)
??CrossCallReturnLabel_80:
        JNZ       ??bdb_AddRespondentNode_7
// 2950     {
// 2951       //No memory
// 2952       return NULL;
??bdb_AddRespondentNode_6:
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??CrossCallReturnLabel_89
// 2953     }
// 2954     
// 2955     (*pCurr)->pNext = NULL;
??bdb_AddRespondentNode_7:
        LCALL     ?Subroutine27 & 0xFFFF
// 2956   }
// 2957   
// 2958   return *pCurr;
??CrossCallReturnLabel_32:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LJMP      ??Subroutine33_0 & 0xFFFF
// 2959 }
          CFI EndBlock cfiBlock206

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond207 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function bdb_AddRespondentNode
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOV       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function bdb_AddRespondentNode
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond213 Using cfiCommon0
          CFI Function bdb_TCAddJoiningDevice
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker215 Using cfiCommon1
          CFI (cfiPicker215) NoFunction
          CFI (cfiPicker215) Picker
        MOV       DPTR,#bdb_joiningDeviceList
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiPicker215
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond216 Using cfiCommon0
          CFI Function bdb_TCjoiningDeviceComplete
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function bdb_AddRespondentNode
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_27
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function bdb_AddRespondentNode
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_28
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-4
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function bdb_TCAddJoiningDevice
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function bdb_TCjoiningDeviceComplete
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker221 Using cfiCommon1
          CFI (cfiPicker221) NoFunction
          CFI (cfiPicker221) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiPicker221

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond222 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function bdb_event_loop
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        MOV       DPTR,#pRespondentHead
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function bdb_TCJoiningDeviceFree
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function bdb_StartCommissioning
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function bdb_AddRespondentNode
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function bdb_GenerateInstallCodeCRC
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond229) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond229) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond229) CFA_SP SP+-7
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function bdb_reportCommissioningState
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function bdb_event_loop
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker232 Using cfiCommon1
          CFI (cfiPicker232) NoFunction
          CFI (cfiPicker232) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiPicker232
// 2960 
// 2961 /*********************************************************************
// 2962  * @fn      bdb_zclRespondentListClean
// 2963  *
// 2964  * @brief   This function free reserved memory for respondent list
// 2965  *
// 2966  * @param   pHead - begin of the respondent list
// 2967  *
// 2968  * @return  status
// 2969  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2970 void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
bdb_zclRespondentListClean:
          CFI Block cfiBlock233 Using cfiCommon0
          CFI Function bdb_zclRespondentListClean
        CODE
// 2971 {
        FUNCALL bdb_zclRespondentListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL     ?Subroutine13 & 0xFFFF
// 2972   bdbFindingBindingRespondent_t **pCurr;
// 2973   bdbFindingBindingRespondent_t **pNext;
// 2974   
// 2975   if ( *pHead == NULL )
??CrossCallReturnLabel_55:
        JZ        ??bdb_zclRespondentListClean_0
// 2976   {
// 2977     return;
// 2978   }
// 2979   
// 2980   pCurr = pHead;
        MOV       ?V0,R6
        MOV       ?V1,R7
        SJMP      ??bdb_zclRespondentListClean_1
// 2981   
// 2982   while( *pCurr != NULL )
// 2983   {
// 2984     pNext = &((*pCurr)->pNext);
??bdb_zclRespondentListClean_2:
        MOV       A,R2
        ADD       A,#0xf
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
// 2985     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2986     *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
        MOV       DPL,?V0
        MOV       DPH,?V1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2987     pCurr = pNext;
        MOV       ?V0,?V2
        MOV       ?V1,?V3
// 2988   }
??bdb_zclRespondentListClean_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_10:
        JNZ       ??bdb_zclRespondentListClean_2
// 2989   *pHead = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2990 }
??bdb_zclRespondentListClean_0:
        LJMP      ??Subroutine40_0 & 0xFFFF
          CFI EndBlock cfiBlock233
// 2991 
// 2992  /*********************************************************************
// 2993  * PRIVATE FUNCTIONS
// 2994  *********************************************************************/
// 2995 
// 2996 /*********************************************************************
// 2997  * @fn      bdb_ProcessOSALMsg
// 2998  *
// 2999  * @brief   Process the incoming task message.
// 3000  *
// 3001  * @param   msgPtr - message to process
// 3002  *
// 3003  * @return  none
// 3004  */
// 3005 void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
// 3006 {
// 3007   
// 3008   switch(msgPtr->hdr.event)
// 3009   {
// 3010 #if (ZG_BUILD_JOINING_TYPE)
// 3011     case BDB_COMMISSIONING_STATE_JOINING:
// 3012       if(ZG_DEVICE_JOINING_TYPE)
// 3013       {
// 3014         switch(msgPtr->buf[0])
// 3015         {
// 3016           case BDB_JOIN_EVENT_NWK_DISCOVERY:
// 3017             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 3018             {
// 3019               bdb_filterNwkDisc();
// 3020               bdb_tryNwkAssoc();
// 3021             }
// 3022             else
// 3023             {
// 3024               bdb_nwkDiscoveryAttempt(FALSE);
// 3025             }
// 3026           break;
// 3027           
// 3028           case BDB_JOIN_EVENT_ASSOCIATION:
// 3029             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
// 3030             {
// 3031               bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
// 3032               //Nwk key timeout get right timing
// 3033               osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
// 3034             }
// 3035             else
// 3036             {
// 3037               if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 3038                    (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
// 3039               {
// 3040                 uint16 addr = INVALID_NODE_ADDR;
// 3041                 // Invalidate nwk addr so end device does not use in its data reqs.
// 3042                 _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3043                 ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
// 3044               }
// 3045 
// 3046               //Clear the neighbor Table and network discovery tables.
// 3047               nwkNeighborInitTable();
// 3048               NLME_NwkDiscTerm();
// 3049               _NIB.nwkState = NWK_INIT;
// 3050               
// 3051               bdb_tryNwkAssoc();
// 3052             }
// 3053           break;
// 3054         }
// 3055       }
// 3056     break;
// 3057     
// 3058     case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3059       if(ZG_DEVICE_JOINING_TYPE)
// 3060       {
// 3061         if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
// 3062         {
// 3063           bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
// 3064           if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
// 3065           {
// 3066             //TCLK process fail due to many attempts fails
// 3067             bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
// 3068             return;
// 3069           }
// 3070         }
// 3071         switch(bdbCommissioningProcedureState.bdbTCExchangeState)
// 3072         {
// 3073           case BDB_REQ_TC_STACK_VERSION:
// 3074             bdb_requestTCStackVersion();
// 3075           break;
// 3076           case BDB_REQ_TC_LINK_KEY:
// 3077             bdb_requestTCLinkKey();
// 3078           break;
// 3079           case BDB_REQ_VERIFY_TC_LINK_KEY:
// 3080             bdb_requestVerifyTCLinkKey();
// 3081           break;
// 3082         }
// 3083       }
// 3084    break;
// 3085 #endif
// 3086    }
// 3087 }
// 3088 
// 3089 
// 3090 /*********************************************************************
// 3091  * @fn      bdb_processTimeout
// 3092  *
// 3093  * @brief   Handles timeout of the bdb process
// 3094  *
// 3095  * @param   msgPtr - message to process
// 3096  *
// 3097  * @return  none
// 3098  */
// 3099 void bdb_processTimeout(void)
// 3100 {
// 3101 #if (ZG_BUILD_JOINING_TYPE)
// 3102   if(ZG_DEVICE_JOINING_TYPE)
// 3103   {
// 3104     switch(bdbCommissioningProcedureState.bdbCommissioningState)
// 3105     {
// 3106       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3107         
// 3108         bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
// 3109       break;
// 3110       case BDB_COMMISSIONING_STATE_JOINING:
// 3111         if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
// 3112         {
// 3113           //If nwk key fails, then try association again
// 3114           bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
// 3115           bdb_nwkAssocAttemt(FALSE);
// 3116         }
// 3117       break;
// 3118     }
// 3119   }
// 3120 #endif
// 3121   
// 3122 }
// 3123 
// 3124 
// 3125 /*********************************************************************
// 3126  * @fn      bdb_SendMsg
// 3127  *
// 3128  * @brief   Send messages to bdb processing with the expected format
// 3129  *
// 3130  * @param   msgPtr - message to process
// 3131  *
// 3132  * @return  none
// 3133  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3134 void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
bdb_SendMsg:
          CFI Block cfiBlock234 Using cfiCommon0
          CFI Function bdb_SendMsg
        CODE
// 3135 {
        FUNCALL bdb_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV       A,#-0x11
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V7,R2
        MOV       ?V8,R3
        MOV       ?V3,R4
// 3136   bdbInMsg_t *msgPtr = NULL;
// 3137 
// 3138   if ( (len > 0) && (buf != NULL) )
        MOV       A,R4
        JZ        ??bdb_SendMsg_0
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_23:
        JZ        ??bdb_SendMsg_0
// 3139   {
// 3140     uint8 tmpLength;
// 3141     tmpLength = len;
// 3142     tmpLength += sizeof(osal_event_hdr_t);
// 3143     
// 3144     msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,#0x2
        ADD       A,R4
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3145     
// 3146     if ( msgPtr )
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_SendMsg_0
// 3147     {
// 3148       osal_memcpy( msgPtr->buf, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,?V3
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 3149     
// 3150       msgPtr->hdr.event = toCommissioningState;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V7
        MOVX      @DPTR,A
// 3151       msgPtr->hdr.status = status;
        INC       DPTR
        MOV       A,?V8
        MOVX      @DPTR,A
// 3152       osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 3153     }
// 3154   }
// 3155 }
??bdb_SendMsg_0:
        MOV       R7,#0x9
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock234

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond235 Using cfiCommon0
          CFI Function bdb_TCProcessJoiningList
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 57)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function bdb_SendMsg
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker237 Using cfiCommon1
          CFI (cfiPicker237) NoFunction
          CFI (cfiPicker237) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        RET
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiPicker237
// 3156 
// 3157 
// 3158 /*********************************************************************
// 3159  * @fn      bdb_RegisterCommissioningStatusCB
// 3160  *
// 3161  * @brief   Register a callback in which the status of the procedures done in
// 3162  *          BDB commissioning process will be reported
// 3163  *
// 3164  * @param   bdbGCB_CommissioningStatus - application callback
// 3165  *
// 3166  * @return  none
// 3167  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3168 void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
bdb_RegisterCommissioningStatusCB:
          CFI Block cfiBlock238 Using cfiCommon0
          CFI Function bdb_RegisterCommissioningStatusCB
        CODE
// 3169 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3170   pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
        MOV       DPTR,#pfnCommissioningStatusCB
        LJMP      ?Subroutine3 & 0xFFFF
// 3171 }
          CFI EndBlock cfiBlock238
// 3172 
// 3173 /*********************************************************************
// 3174  * @fn      bdb_ClearNetworkParams
// 3175  *
// 3176  * @brief   Restore nwk parameters to invalid if the device is not on a network
// 3177  *
// 3178  * @param   void
// 3179  *
// 3180  * @return  void
// 3181  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3182 void bdb_ClearNetworkParams(void)
bdb_ClearNetworkParams:
          CFI Block cfiBlock239 Using cfiCommon0
          CFI Function bdb_ClearNetworkParams
        CODE
// 3183 {
        ; Saved register size: 0
        ; Auto size: 0
// 3184 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 3185   if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
// 3186   {
// 3187     //Clear the event
// 3188     _NIB.nwkPanId = INVALID_NODE_ADDR;
// 3189     _NIB.nwkLogicalChannel = 0;
// 3190     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 3191     touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
// 3192   }
// 3193 #endif
// 3194 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock239
// 3195 
// 3196 /*********************************************************************
// 3197  * @fn      bdb_getZCLFrameCounter
// 3198  *
// 3199  * @brief   Get the next ZCL Frame Counter for packet sequence number
// 3200  *
// 3201  * @param   none
// 3202  *
// 3203  * @return  next ZCL frame counter
// 3204  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3205 uint8 bdb_getZCLFrameCounter(void)
bdb_getZCLFrameCounter:
          CFI Block cfiBlock240 Using cfiCommon0
          CFI Function bdb_getZCLFrameCounter
        CODE
// 3206 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3207   bdb_ZclTransactionSequenceNumber++;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 3208   return bdb_ZclTransactionSequenceNumber;
        LJMP      ??Subroutine38_0 & 0xFFFF
// 3209 
// 3210 }
          CFI EndBlock cfiBlock240
// 3211 
// 3212 
// 3213 #if (ZG_BUILD_JOINING_TYPE)
// 3214 /*********************************************************************
// 3215  * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
// 3216  *
// 3217  * @brief   Register a callback in which the TC link key exchange procedure will 
// 3218  *          be performed by application.
// 3219  *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
// 3220  *
// 3221  * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
// 3222  *
// 3223  * @return  none
// 3224  */
// 3225 void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
// 3226 {
// 3227   if(bdbGCB_CBKETCLinkKeyExchange)
// 3228   {
// 3229     pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
// 3230     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
// 3231   }
// 3232   else
// 3233   {
// 3234     pfnCBKETCLinkKeyExchange = NULL;
// 3235     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
// 3236   }
// 3237 }
// 3238 
// 3239 /*********************************************************************
// 3240  * @fn      bdb_RegisterForFilterNwkDescCB
// 3241  *
// 3242  * @brief   Register a callback in which the application gets the list of network
// 3243  *          descriptors got from active scan.
// 3244  *          Use bdb_nwkDescFree to release the network descriptors that are not 
// 3245  *          of interest and leave those which are to be attempted.
// 3246  *
// 3247  * @param   bdbGCB_FilterNwkDesc - application callback
// 3248  *
// 3249  * @return  none
// 3250  */
// 3251 void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
// 3252 {
// 3253   if(bdbGCB_FilterNwkDesc)
// 3254   {
// 3255     pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
// 3256   }
// 3257 }
// 3258 
// 3259 
// 3260 /*********************************************************************
// 3261  * @fn          bdb_CBKETCLinkKeyExchangeAttempt
// 3262  *
// 3263  * @brief       Tell BDB module the result of the TC link key exchange, to try
// 3264  *              the default process or to keep going with the joining process.
// 3265  *
// 3266  * @param       didSuccess - TRUE if the process was succes, False otherwise
// 3267  *
// 3268  * @return      unprocessed events
// 3269  */
// 3270 void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
// 3271 {
// 3272   if(didSuccess)
// 3273   {
// 3274     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
// 3275     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
// 3276   }
// 3277   else
// 3278   {
// 3279     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
// 3280     //We are going back one state to try it again
// 3281     bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
// 3282     bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
// 3283   }
// 3284 
// 3285 }
// 3286 #endif
// 3287 
// 3288 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 3289 
// 3290 /*********************************************************************
// 3291  * @fn      gp_ChangeChannelReq
// 3292  *
// 3293  * @brief   Callback function to notify the BDB about a GP commissioning 
// 3294  * request that will change the current channel for at most 
// 3295  * gpBirectionalCommissioningChangeChannelTimeout ms
// 3296  *
// 3297  * @param   channel - Channel in which the commissioning will take place
// 3298  *
// 3299  * @return  TRUE to allow change channel, FALSE to do not allow
// 3300  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3301 static uint8 gp_ChangeChannelReq(void)
gp_ChangeChannelReq:
          CFI Block cfiBlock241 Using cfiCommon0
          CFI Function gp_ChangeChannelReq
        CODE
// 3302 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3303   uint8 allowChangeChannel = TRUE;
        MOV       R1,#0x1
// 3304   
// 3305   //Do not allow changes of channel if any process is in place
// 3306   if(bdbAttributes.bdbCommissioningMode)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JZ        ??gp_ChangeChannelReq_0
// 3307   {
// 3308     allowChangeChannel = FALSE;
        MOV       R1,#0x0
// 3309   }
// 3310   
// 3311   //Check application state to decide if allow change channel or not
// 3312   
// 3313   return allowChangeChannel;
??gp_ChangeChannelReq_0:
        LJMP      ??Subroutine37_0 & 0xFFFF
// 3314 }
          CFI EndBlock cfiBlock241
// 3315 
// 3316 
// 3317 /*********************************************************************
// 3318  * @fn          gp_CBInit
// 3319  *
// 3320  * @brief       Register the callbacks for GP endpoint
// 3321  *
// 3322  * @param       none
// 3323  *
// 3324  * @return      none
// 3325  */
// 3326 void gp_CBInit(void)
// 3327 {
// 3328   GP_DataCnfGCB = GP_DataCnf;
// 3329   GP_endpointInitGCB = gp_endpointInit;  
// 3330   GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
// 3331   GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
// 3332   GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
// 3333   GP_DataIndGCB = GP_DataInd;
// 3334   GP_SecReqGCB = GP_SecReq;   
// 3335   GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
// 3336     
// 3337   GP_aliasConflictAnnce = &aliasConflictAnnce;
// 3338   
// 3339   GP_endpointInitGCB();
// 3340 }
// 3341 
// 3342 #endif
// 3343 
// 3344 /*********************************************************************
// 3345 *********************************************************************/
// 3346 
// 3347 
// 3348 /******************************************************************************
// 3349  * @fn          bdb_GenerateInstallCodeCRC
// 3350  *
// 3351  * @brief       Creates a CRC for the install code passed.
// 3352  *
// 3353  * @param       installCode - install code from which CRC will be generated
// 3354  *
// 3355  * @return      CRC
// 3356  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3357 uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
bdb_GenerateInstallCodeCRC:
          CFI Block cfiBlock242 Using cfiCommon0
          CFI Function bdb_GenerateInstallCodeCRC
        CODE
// 3358 {
        FUNCALL bdb_GenerateInstallCodeCRC, bdb_calculateCCITT_CRC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3359   uint16 CRC;
// 3360   
// 3361   bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
        ; Setup parameters for call to function bdb_calculateCCITT_CRC
        MOV       DPTR,#__Constant_10
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 6)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 3362 
// 3363   return CRC;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV       A,#0x2
        LJMP      ?Subroutine6 & 0xFFFF
// 3364 }
          CFI EndBlock cfiBlock242
// 3365 
// 3366 /******************************************************************************
// 3367  * @fn          bdb_calculateCCITT_CRC
// 3368  *
// 3369  * @brief       Creates a CRC for the install code passed.
// 3370  *
// 3371  * @param       Mb - install code from which CRC will be generated
// 3372  * @param       msglen - install code length
// 3373  * @param       crc - 
// 3374  *
// 3375  * @return      none
// 3376  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3377 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
bdb_calculateCCITT_CRC:
          CFI Block cfiBlock243 Using cfiCommon0
          CFI Function bdb_calculateCCITT_CRC
        CODE
// 3378 {
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcBitByBitFast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 3379   uint16 crcinit_direct; 
// 3380   uint16 crcinit_nondirect;
// 3381   bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcInit
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3382   *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcBitByBitFast
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3383 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock243
// 3384 
// 3385 
// 3386 /******************************************************************************
// 3387  * @fn          bdb_crcInit
// 3388  *
// 3389  * @brief       Initialize CRC calculation
// 3390  *
// 3391  * @param       crc - 
// 3392  * @param       crcinit_direct -
// 3393  * @param       crcinit_nondirect - 
// 3394  *
// 3395  * @return      none
// 3396  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3397 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
bdb_crcInit:
          CFI Block cfiBlock244 Using cfiCommon0
          CFI Function bdb_crcInit
        CODE
// 3398 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3399 
// 3400   uint16 i;
// 3401   uint16 bit;
// 3402 
// 3403   *crcinit_direct = CRC_INIT;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3404   *crc = CRC_INIT;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3405   for (i=0; i<CRC_ORDER; i++) 
        MOV       R6,#0x10
// 3406   {
// 3407     bit = *crc & 1;
??bdb_crcInit_0:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
// 3408     if (bit) *crc^= CRC_POLYNOM;
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_crcInit_1
        XRL       A,#0x21
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x10
        MOVX      @DPTR,A
// 3409     *crc >>= 1;
??bdb_crcInit_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        CLR       C
        RRC       A
        MOV       R5,A
        MOV       A,R4
        RRC       A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3410     if (bit) *crc|= CRC_HIGHBIT;
        MOV       A,R0
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_crcInit_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOVX      @DPTR,A
// 3411   }	
??bdb_crcInit_2:
        DEC       R6
        MOV       A,R6
        JNZ       ??bdb_crcInit_0
// 3412   *crcinit_nondirect = *crc;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3413 
// 3414 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock244
// 3415 
// 3416 
// 3417 /******************************************************************************
// 3418  * @fn          bdb_crcReflect
// 3419  *
// 3420  * @brief       
// 3421  *
// 3422  * @param       crc - 
// 3423  * @param       bitnum -
// 3424  *
// 3425  * @return      none
// 3426  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3427 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
bdb_crcReflect:
          CFI Block cfiBlock245 Using cfiCommon0
          CFI Function bdb_crcReflect
        CODE
// 3428 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3429 
// 3430   // reflects the lower 'bitnum' bits of 'crc'
// 3431 
// 3432   uint16 i, j=1, crcout=0;
        MOV       R6,#0x1
        MOV       R7,#0x0
        MOV       ?V0,R7
        MOV       ?V1,R7
// 3433 
// 3434   for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
        MOV       ?V2,R6
        MOV       ?V3,R7
        MOV       A,R4
        DEC       A
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOV       R0,?V2
        MOV       R1,?V3
        SJMP      ??bdb_crcReflect_0
// 3435     if (crc & i) crcout|=j;
??bdb_crcReflect_1:
        MOV       A,R2
        ANL       A,R0
        MOV       R4,A
        MOV       A,R3
        ANL       A,R1
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_crcReflect_2
        MOV       A,R6
        ORL       A,?V0
        MOV       ?V0,A
        MOV       A,R7
        ORL       A,?V1
        MOV       ?V1,A
// 3436     j<<= 1;
??bdb_crcReflect_2:
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3437   }
        MOV       A,R1
        CLR       C
        RRC       A
        MOV       R1,A
        MOV       A,R0
        RRC       A
        MOV       R0,A
??bdb_crcReflect_0:
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_crcReflect_1
// 3438   return (crcout);
        MOV       R2,?V0
        MOV       R3,?V1
        LJMP      ??Subroutine40_0 & 0xFFFF
// 3439 }
          CFI EndBlock cfiBlock245
// 3440 
// 3441 
// 3442 /******************************************************************************
// 3443  * @fn          bdb_crcBitByBitFast
// 3444  *
// 3445  * @brief       
// 3446  *
// 3447  * @param       p - 
// 3448  * @param       len -
// 3449  * @param       crcinit_direct - 
// 3450  * @param       crcinit_nondirect -
// 3451  *
// 3452  * @return      crc
// 3453  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3454 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
bdb_crcBitByBitFast:
          CFI Block cfiBlock246 Using cfiCommon0
          CFI Function bdb_crcBitByBitFast
        CODE
// 3455 {
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3456   // fast bit by bit algorithm without augmented zero bytes.
// 3457   // does not use lookup table, suited for polynom orders between 1...32.
// 3458 
// 3459   uint16 i, j, c, bit;
// 3460   uint16 crc = crcinit_direct;
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3461 
// 3462   for (i=0; i<len; i++) {
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        SJMP      ??bdb_crcBitByBitFast_0
// 3463 
// 3464     c = (uint16)*p++;
??bdb_crcBitByBitFast_1:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
// 3465     c = bdb_crcReflect(c, 8);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x8
        MOV       R5,#0x0
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
// 3466 
// 3467     for (j=0x80; j; j>>=1) {
        MOV       R0,#-0x80
// 3468 
// 3469       bit = crc & CRC_HIGHBIT;
??bdb_crcBitByBitFast_2:
        MOV       A,R7
        ANL       A,#0x80
        MOV       R5,A
// 3470       crc<<= 1;
        MOV       A,R6
        ADD       A,0xE0 /* A   */
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3471       if (c & j) bit^= CRC_HIGHBIT;
        MOV       A,R2
        ANL       A,R0
        JZ        ??bdb_crcBitByBitFast_3
        MOV       A,#-0x80
        XRL       A,R5
        MOV       R5,A
// 3472       if (bit) crc^= CRC_POLYNOM;
??bdb_crcBitByBitFast_3:
        MOV       A,R5
        JZ        ??bdb_crcBitByBitFast_4
        MOV       A,#0x21
        XRL       A,R6
        MOV       R6,A
        MOV       A,#0x10
        XRL       A,R7
        MOV       R7,A
// 3473     }
??bdb_crcBitByBitFast_4:
        CLR       C
        MOV       A,R0
        RRC       A
        MOV       R0,A
        JNZ       ??bdb_crcBitByBitFast_2
// 3474   }	
        INC       ?V0
        MOV       A,?V0
        JNZ       ??bdb_crcBitByBitFast_0
        INC       ?V1
??bdb_crcBitByBitFast_0:
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?UL_GT
        JC        ??bdb_crcBitByBitFast_1
// 3475 
// 3476   crc=bdb_crcReflect(crc, CRC_ORDER);
// 3477   crc^= CRC_XOR;
// 3478 
// 3479   return(crc);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       A,R2
        CPL       A
        MOV       R2,A
        MOV       A,R3
        CPL       A
        MOV       R3,A
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
// 3480 }
          CFI EndBlock cfiBlock246

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbAttributes>`:
        DATA32
        DD 134213632
        DD 2048
        DATA16
        DW 65535
        DATA8
        DB 0
        DB 0
        DB 7
        DB 4
        DB 0
        DB 0
        DB 15
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for vDoPrimaryScan>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBdbInstallCodeCRC>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterSimpleDescriptor::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterSimpleDescriptor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_addInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_addInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterTCLinkKeyExchangeProcessCB::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterTCLinkKeyExchangeProcessCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setTCRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setTCRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCAddJoiningDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCAddJoiningDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCProcessJoiningList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCProcessJoiningList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCjoiningDeviceComplete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCjoiningDeviceComplete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_TCJoiningDeviceFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_TCJoiningDeviceFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setJoinUsesInstallCodeKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setJoinUsesInstallCodeKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StartCommissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StartCommissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NotifyCommissioningModeStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NotifyCommissioningModeStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setFN::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setFN

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_resetLocalAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_resetLocalAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_parentLost::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_parentLost

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NetworkRestoredResumeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NetworkRestoredResumeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_reportCommissioningState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_reportCommissioningState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkFormationAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkFormationAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isDeviceNonFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isDeviceNonFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_doTrustCenterRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_doTrustCenterRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_rejoinNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_rejoinNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannelAttribute::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannelAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkJoiningFormation::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkJoiningFormation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkSteeringDeviceOnNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkSteeringDeviceOnNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_startResumeCommissioningProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_startResumeCommissioningProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessNodeDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessNodeDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_touchlinkSendFNReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_touchlinkSendFNReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeIsOnANetwork::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeIsOnANetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setCommissioningGroupID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setCommissioningGroupID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CreateRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CreateRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_AddRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_AddRespondentNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclRespondentListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclRespondentListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCommissioningStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCommissioningStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ClearNetworkParams::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ClearNetworkParams

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getZCLFrameCounter::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getZCLFrameCounter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??gp_ChangeChannelReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    gp_ChangeChannelReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GenerateInstallCodeCRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GenerateInstallCodeCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_calculateCCITT_CRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_calculateCCITT_CRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcReflect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcReflect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcBitByBitFast::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcBitByBitFast

        END
// 3481 
// 3482 
// 
// 5 921 bytes in segment BANKED_CODE
//   270 bytes in segment BANK_RELAYS
//    37 bytes in segment XDATA_I
//    37 bytes in segment XDATA_ID
//    20 bytes in segment XDATA_ROM_C
//    26 bytes in segment XDATA_Z
// 
//   307 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 20 bytes shared)
// 5 921 bytes of HUGECODE memory
//    63 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
