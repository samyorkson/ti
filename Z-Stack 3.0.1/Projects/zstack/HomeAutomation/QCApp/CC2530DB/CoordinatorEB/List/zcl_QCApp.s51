///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              19/Dec/2017  11:38:06
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\Source\zcl_QCApp.c
//    Command line       =  
//        -f C:\Users\sam\AppData\Local\Temp\EWFADA.tmp
//        ("C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\Source\zcl_QCApp.c" -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D
//        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LEGACY_LCD_DEBUG -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D ZCL_GROUPS
//        -lC "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\target\QC_CC2530\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List\zcl_QCApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_QCApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclGenericApp_BasicResetCB::?relay`,0203H
        FUNCTION `??zclGenericApp_BindNotification::?relay`,0203H
        FUNCTION `??zclGenericApp_HandleKeys::?relay`,0203H
        PUBLIC `??zclGenericApp_Init::?relay`
        FUNCTION `??zclGenericApp_Init::?relay`,0203H
        FUNCTION `??zclGenericApp_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclGenericApp_ProcessCommissioningStatus::?re`,0203H
        FUNCTION `??zclGenericApp_ProcessIdentifyTimeChange::?rel`,0203H
        PUBLIC `??zclGenericApp_event_loop::?relay`
        FUNCTION `??zclGenericApp_event_loop::?relay`,0203H
        PUBWEAK __Constant_1f4
        PUBLIC gPermitDuration
        PUBLIC giGenAppScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sSwBDBMode
        PUBLIC sSwGenericApp
        PUBLIC sSwHelp
        FUNCTION zclGenericApp_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGenericApp_BindNotification,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclGenericApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zclGenericApp_Init
        FUNCTION zclGenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGenericApp_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGenericApp_NwkState
        FUNCTION zclGenericApp_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGenericApp_ProcessIdentifyTimeChange,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclGenericApp_TaskID
        PUBLIC zclGenericApp_event_loop
        FUNCTION zclGenericApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGenericApp_ResetAttributesToDefaultValues SYMBOL "zclGenericApp_ResetAttributesToDefaultValues"
`??zclGenericApp_ResetAttributesToDefaultValues:` SYMBOL "?relay", zclGenericApp_ResetAttributesToDefaultValues
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclGenericApp_Init  SYMBOL "zclGenericApp_Init"
`??zclGenericApp_Init::?relay` SYMBOL "?relay", zclGenericApp_Init
zclGenericApp_event_loop SYMBOL "zclGenericApp_event_loop"
`??zclGenericApp_event_loop::?relay` SYMBOL "?relay", zclGenericApp_event_loop

        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclGenericApp_ResetAttributesToDefaultValues:`
        FUNCTION `??zclGenericApp_ResetAttributesToDefaultValues:`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGenericApp_Attrs
        EXTERN zclGenericApp_IdentifyTime
        EXTERN zclGenericApp_NumAttributes
        EXTERN zclGenericApp_ResetAttributesToDefaultValues
        FUNCTION zclGenericApp_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGenericApp_SimpleDesc
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\sam\Documents\GitHub\ti\Z-Stack 3.0.1\Projects\zstack\HomeAutomation\QCApp\Source\zcl_QCApp.c
//    1 /**************************************************************************************************
//    2 Filename:       zcl_genericapp.c
//    3 Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4 Revision:       $Revision: 40796 $
//    5 
//    6 
//    7 Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10 Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12 IMPORTANT: Your use of this Software is limited to those specific rights
//   13 granted under the terms of a software license agreement between the user
//   14 who downloaded the software, his/her employer (which must be your employer)
//   15 and Texas Instruments Incorporated (the "License").  You may not use this
//   16 Software unless you agree to abide by the terms of the License. The License
//   17 limits your use, and you acknowledge, that the Software may not be modified,
//   18 copied or distributed unless embedded on a Texas Instruments microcontroller
//   19 or used solely and exclusively in conjunction with a Texas Instruments radio
//   20 frequency transceiver, which is integrated into your product.  Other than for
//   21 the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22 works of, modify, distribute, perform, display or sell this Software and/or
//   23 its documentation for any purpose.
//   24 
//   25 YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26 PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27 INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28 NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29 TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30 NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31 LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32 INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33 OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34 OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35 (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37 Should you have any questions regarding your right to use this Software,
//   38 contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42 This application is a template to get started writing an application
//   43 from scratch.
//   44 
//   45 Look for the sections marked with "GENERICAPP_TODO" to add application
//   46 specific code.
//   47 
//   48 Note: if you would like your application to support automatic attribute
//   49 reporting, include the BDB_REPORTING compile flag.
//   50 *********************************************************************/
//   51 
//   52 /*********************************************************************
//   53 * INCLUDES
//   54 */
//   55 #include "ZComDef.h"
//   56 #include "OSAL.h"
//   57 #include "AF.h"
//   58 #include "ZDApp.h"
//   59 #include "ZDObject.h"
//   60 #include "MT_SYS.h"
//   61 
//   62 #include "nwk_util.h"
//   63 
//   64 #include "zcl.h"
//   65 #include "zcl_general.h"
//   66 #include "zcl_ha.h"
//   67 #include "zcl_diagnostic.h"
//   68 #include "zcl_QCApp.h"
//   69 
//   70 #include "bdb.h"
//   71 #include "bdb_interface.h"
//   72 #include "gp_interface.h"
//   73 
//   74 #if defined ( INTER_PAN )
//   75 #if defined ( BDB_TL_INITIATOR )
//   76 #include "bdb_touchlink_initiator.h"
//   77 #endif // BDB_TL_INITIATOR
//   78 #if defined ( BDB_TL_TARGET )
//   79 #include "bdb_touchlink_target.h"
//   80 #endif // BDB_TL_TARGET
//   81 #endif // INTER_PAN
//   82 
//   83 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//   84 #include "bdb_touchlink.h"
//   85 #endif
//   86 
//   87 #include "onboard.h"
//   88 
//   89 /* HAL */
//   90 #include "hal_lcd.h"
//   91 #include "hal_led.h"
//   92 #include "hal_key.h"
//   93 
//   94 /*********************************************************************
//   95 * MACROS
//   96 */
//   97 
//   98 
//   99 /*********************************************************************
//  100 * CONSTANTS
//  101 */
//  102 
//  103 
//  104 /*********************************************************************
//  105 * TYPEDEFS
//  106 */
//  107 
//  108 /*********************************************************************
//  109 * GLOBAL VARIABLES
//  110 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte zclGenericApp_TaskID;
zclGenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  112 
//  113 
//  114 /*********************************************************************
//  115 * GLOBAL FUNCTIONS
//  116 */
//  117 
//  118 /*********************************************************************
//  119 * LOCAL VARIABLES
//  120 */
//  121 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 uint8 giGenAppScreenMode = GENERIC_MAINMODE;   // display the main screen mode first
giGenAppScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  123 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  124 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  125 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 devStates_t zclGenericApp_NwkState = DEV_INIT;
zclGenericApp_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclGenericApp_NwkState>`
        REQUIRE __INIT_XDATA_I
//  127 
//  128 
//  129 /*********************************************************************
//  130 * LOCAL FUNCTIONS
//  131 */
//  132 static void zclGenericApp_HandleKeys( byte shift, byte keys );
//  133 static void zclGenericApp_BasicResetCB( void );
//  134 static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint );
//  135 static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data );
//  136 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  137 static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable );
//  138 #endif
//  139 
//  140 static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  141 
//  142 // app display functions
//  143 static void zclGenericApp_LcdDisplayUpdate( void );
//  144 #ifdef LCD_SUPPORTED
//  145 static void zclGenericApp_LcdDisplayMainMode( void );
//  146 static void zclGenericApp_LcdDisplayHelpMode( void );
//  147 #endif
//  148 
//  149 // Functions to process ZCL Foundation incoming Command/Response messages
//  150 static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  151 #ifdef ZCL_READ
//  152 static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  153 #endif
//  154 #ifdef ZCL_WRITE
//  155 static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  156 #endif
//  157 static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  158 #ifdef ZCL_DISCOVER
//  159 static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  160 static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  161 static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  162 #endif
//  163 
//  164 /*********************************************************************
//  165 * STATUS STRINGS
//  166 */
//  167 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  168 const char sDeviceName[]   = "  Generic App";
sDeviceName:
        DB "  Generic App"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  169 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  170 const char sSwGenericApp[]      = "SW1:GENAPP_TODO";  // GENERICAPP_TODO
sSwGenericApp:
        DB "SW1:GENAPP_TODO"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  171 const char sSwBDBMode[]     = "SW2: Start BDB";
sSwBDBMode:
        DB "SW2: Start BDB"

        RSEG XDATA_I:XDATA:NOROOT(0)
//  172 char sSwHelp[]             = "SW4: Help       ";  // last character is * if NWK open
sSwHelp:
        DATA8
        DS 17
        REQUIRE `?<Initializer for sSwHelp>`
        REQUIRE __INIT_XDATA_I
//  173 #endif
//  174 
//  175 /*********************************************************************
//  176 * ZCL General Profile Callback table
//  177 */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  178 static zclGeneral_AppCallbacks_t zclGenericApp_CmdCallbacks =
zclGenericApp_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclGenericApp_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  179 {
//  180     zclGenericApp_BasicResetCB,             // Basic Cluster Reset command
//  181     NULL,                                   // Identify Trigger Effect command
//  182     NULL,                                   // On/Off cluster commands
//  183     NULL,                                   // On/Off cluster enhanced command Off with Effect
//  184     NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  185     NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  186 #ifdef ZCL_LEVEL_CTRL
//  187     NULL,                                   // Level Control Move to Level command
//  188     NULL,                                   // Level Control Move command
//  189     NULL,                                   // Level Control Step command
//  190     NULL,                                   // Level Control Stop command
//  191 #endif
//  192 #ifdef ZCL_GROUPS
//  193     NULL,                                   // Group Response commands
//  194 #endif
//  195 #ifdef ZCL_SCENES
//  196     NULL,                                  // Scene Store Request command
//  197     NULL,                                  // Scene Recall Request command
//  198     NULL,                                  // Scene Response command
//  199 #endif
//  200 #ifdef ZCL_ALARMS
//  201     NULL,                                  // Alarm (Response) commands
//  202 #endif
//  203 #ifdef SE_UK_EXT
//  204     NULL,                                  // Get Event Log command
//  205     NULL,                                  // Publish Event Log command
//  206 #endif
//  207     NULL,                                  // RSSI Location command
//  208     NULL                                   // RSSI Location Response command
//  209 };
//  210 
//  211 /*********************************************************************
//  212 * GENERICAPP_TODO: Add other callback structures for any additional application specific 
//  213 *       Clusters being used, see available callback structures below.
//  214 *
//  215 *       bdbTL_AppCallbacks_t 
//  216 *       zclApplianceControl_AppCallbacks_t 
//  217 *       zclApplianceEventsAlerts_AppCallbacks_t 
//  218 *       zclApplianceStatistics_AppCallbacks_t 
//  219 *       zclElectricalMeasurement_AppCallbacks_t 
//  220 *       zclGeneral_AppCallbacks_t 
//  221 *       zclGp_AppCallbacks_t 
//  222 *       zclHVAC_AppCallbacks_t 
//  223 *       zclLighting_AppCallbacks_t 
//  224 *       zclMS_AppCallbacks_t 
//  225 *       zclPollControl_AppCallbacks_t 
//  226 *       zclPowerProfile_AppCallbacks_t 
//  227 *       zclSS_AppCallbacks_t  
//  228 *
//  229 */
//  230 
//  231 /*********************************************************************
//  232 * @fn          zclGenericApp_Init
//  233 *
//  234 * @brief       Initialization function for the zclGeneral layer.
//  235 *
//  236 * @param       none
//  237 *
//  238 * @return      none
//  239 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  240 void zclGenericApp_Init( byte task_id )
zclGenericApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGenericApp_Init
        CODE
//  241 {
        FUNCALL zclGenericApp_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterIdentifyTimeChangeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, bdb_RegisterBindNotificationCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  242     zclGenericApp_TaskID = task_id;
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      @DPTR,A
//  243     
//  244     // This app is part of the Home Automation Profile
//  245     bdb_RegisterSimpleDescriptor( &zclGenericApp_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclGenericApp_SimpleDesc & 0xff
        MOV       R3,#(zclGenericApp_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  246     
//  247     // Register the ZCL General Cluster Library callback functions
//  248     zclGeneral_RegisterCmdCallbacks( GENERICAPP_ENDPOINT, &zclGenericApp_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclGenericApp_CmdCallbacks & 0xff
        MOV       R3,#(zclGenericApp_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  249     
//  250     // GENERICAPP_TODO: Register other cluster command callbacks here
//  251     
//  252     // Register the application's attribute list
//  253     zcl_registerAttrList( GENERICAPP_ENDPOINT, zclGenericApp_NumAttributes, zclGenericApp_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclGenericApp_Attrs & 0xff
        MOV       R5,#(zclGenericApp_Attrs >> 8) & 0xff
        MOV       DPTR,#zclGenericApp_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  254     
//  255     // Register the Application to receive the unprocessed Foundation command/response messages
//  256     zcl_registerForMsg( zclGenericApp_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  257     
//  258 #ifdef ZCL_DISCOVER
//  259     // Register the application's command list
//  260     zcl_registerCmdList( GENERICAPP_ENDPOINT, zclCmdsArraySize, zclGenericApp_Cmds );
//  261 #endif
//  262     
//  263     // Register for all key events - This app will handle all key events
//  264     RegisterForKeys( zclGenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  265     
//  266     bdb_RegisterCommissioningStatusCB( zclGenericApp_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclGenericApp_ProcessCommissioningStatus::?re` & 0xff
        MOV       R3,#(`??zclGenericApp_ProcessCommissioningStatus::?re` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  267     bdb_RegisterIdentifyTimeChangeCB( zclGenericApp_ProcessIdentifyTimeChange );
        ; Setup parameters for call to function bdb_RegisterIdentifyTimeChangeCB
        MOV       R2,#`??zclGenericApp_ProcessIdentifyTimeChange::?rel` & 0xff
        MOV       R3,#(`??zclGenericApp_ProcessIdentifyTimeChange::?rel` >> 8) & 0xff
        LCALL     `??bdb_RegisterIdentifyTimeChangeCB::?relay`; Banked call to: bdb_RegisterIdentifyTimeChangeCB
//  268     bdb_RegisterBindNotificationCB( zclGenericApp_BindNotification );
        ; Setup parameters for call to function bdb_RegisterBindNotificationCB
        MOV       R2,#`??zclGenericApp_BindNotification::?relay` & 0xff
        MOV       R3,#(`??zclGenericApp_BindNotification::?relay` >> 8) & 0xff
        LCALL     `??bdb_RegisterBindNotificationCB::?relay`; Banked call to: bdb_RegisterBindNotificationCB
//  269     
//  270 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  271     bdb_RegisterTouchlinkTargetEnableCB( zclGenericApp_ProcessTouchlinkTargetEnable );
//  272 #endif
//  273     
//  274 #ifdef ZCL_DIAGNOSTIC
//  275     // Register the application's callback function to read/write attribute data.
//  276     // This is only required when the attribute data format is unknown to ZCL.
//  277     zcl_registerReadWriteCB( GENERICAPP_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  278     
//  279     if ( zclDiagnostic_InitStats() == ZSuccess )
//  280     {
//  281         // Here the user could start the timer to save Diagnostics to NV
//  282     }
//  283 #endif
//  284     
//  285     
//  286 #ifdef LCD_SUPPORTED
//  287     HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sDeviceName & 0xff
        MOV       R3,#(sDeviceName >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  288 #endif  // LCD_SUPPORTED
//  289     
//  290     
//  291 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  292 
//  293 /*********************************************************************
//  294 * @fn          zclSample_event_loop
//  295 *
//  296 * @brief       Event Loop Processor for zclGeneral.
//  297 *
//  298 * @param       none
//  299 *
//  300 * @return      none
//  301 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  302 uint16 zclGenericApp_event_loop( uint8 task_id, uint16 events )
zclGenericApp_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
        CODE
//  303 {
        FUNCALL zclGenericApp_event_loop, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, zclGenericApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  304     afIncomingMSGPacket_t *MSGpkt;
//  305     
//  306     (void)task_id;  // Intentionally unreferenced parameter
//  307     
//  308     if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclGenericApp_event_loop_0
//  309     {
//  310         while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclGenericApp_TaskID )) )
//  311         {
//  312             switch ( MSGpkt->hdr.event )
//  313             {
//  314                 case ZCL_INCOMING_MSG:
//  315                 // Incoming ZCL Foundation command/response messages
//  316                 zclGenericApp_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  317                 break;
//  318                 
//  319                 case KEY_CHANGE:
//  320                 zclGenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  321                 break;
//  322                 
//  323                 case ZDO_STATE_CHANGE:
//  324                 zclGenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  325                 
//  326                 // now on the network
//  327                 if ( (zclGenericApp_NwkState == DEV_ZB_COORD) ||
//  328                     (zclGenericApp_NwkState == DEV_ROUTER)   ||
//  329                         (zclGenericApp_NwkState == DEV_END_DEVICE) )
//  330                 {
//  331                     giGenAppScreenMode = GENERIC_MAINMODE;
//  332                     zclGenericApp_LcdDisplayUpdate();
//  333                 }
//  334                 break;
//  335                 
//  336                 default:
//  337                 break;
//  338             }
//  339             
//  340             // Release the memory
//  341             osal_msg_deallocate( (uint8 *)MSGpkt );
//  342         }
//  343         
//  344         // return unprocessed events
//  345         return (events ^ SYS_EVENT_MSG);
//  346     }
//  347     
//  348     if ( events & GENERICAPP_MAIN_SCREEN_EVT )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??zclGenericApp_event_loop_1 & 0xFFFF
//  349     {
//  350         giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  351         zclGenericApp_LcdDisplayUpdate();
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
//  352         
//  353         return ( events ^ GENERICAPP_MAIN_SCREEN_EVT );
        MOV       A,R6
        XRL       A,#0x1
        LJMP      ??zclGenericApp_event_loop_2 & 0xFFFF
//  354     }
??zclGenericApp_event_loop_3:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclGenericApp_NwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??zclGenericApp_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclGenericApp_event_loop_4
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_4:
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
??zclGenericApp_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclGenericApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??zclGenericApp_event_loop_6
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclGenericApp_event_loop_7
        ADD       A,#0x74
        JZ        ??zclGenericApp_event_loop_8
        ADD       A,#-0x11
        JZ        ??zclGenericApp_event_loop_3
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_7:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclGenericApp_event_loop_9
        ADD       A,#-0x3
        JNZ       ??zclGenericApp_event_loop_10
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclGenericApp_event_loop_10
        INC       R0
        SJMP      ??CrossCallReturnLabel_0
??zclGenericApp_event_loop_9:
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP      ??zclGenericApp_event_loop_11
??zclGenericApp_event_loop_12:
        INC       R0
??zclGenericApp_event_loop_11:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclGenericApp_event_loop_12
??zclGenericApp_event_loop_10:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclGenericApp_event_loop_5
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGenericApp_event_loop_5
??zclGenericApp_event_loop_8:
        ; Setup parameters for call to function zclGenericApp_HandleKeys
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGenericApp_HandleKeys::?relay`; Banked call to: zclGenericApp_HandleKeys
        LJMP      ??zclGenericApp_event_loop_5 & 0xFFFF
??zclGenericApp_event_loop_6:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??zclGenericApp_event_loop_13
//  355     
//  356 #if ZG_BUILD_ENDDEVICE_TYPE    
//  357     if ( events & GENERICAPP_END_DEVICE_REJOIN_EVT )
//  358     {
//  359         bdb_ZedAttemptRecoverNwk();
//  360         return ( events ^ GENERICAPP_END_DEVICE_REJOIN_EVT );
//  361     }
//  362 #endif
//  363     
//  364     /* GENERICAPP_TODO: handle app events here */
//  365     
//  366     
//  367     if ( events & GENERICAPP_EVT_1 )
??zclGenericApp_event_loop_1:
        ANL       A,#0x8
        JZ        ??zclGenericApp_event_loop_14
//  368     {
//  369         // toggle LED 2 state, start another timer for 500ms
//  370         HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  371         osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  372         
//  373         return ( events ^ GENERICAPP_EVT_1 );
        MOV       A,R6
        XRL       A,#0x8
??zclGenericApp_event_loop_2:
        MOV       R2,A
        MOV       A,R7
??zclGenericApp_event_loop_13:
        MOV       R3,A
        SJMP      ??zclGenericApp_event_loop_15
//  374     }
//  375     
//  376     /*
//  377     if ( events & GENERICAPP_EVT_2 )
//  378     {
//  379     
//  380     return ( events ^ GENERICAPP_EVT_2 );
//  381 }
//  382     
//  383     if ( events & GENERICAPP_EVT_3 )
//  384     {
//  385     
//  386     return ( events ^ GENERICAPP_EVT_3 );
//  387 }
//  388     */
//  389     
//  390     // Discard unknown events
//  391     return 0;
??zclGenericApp_event_loop_14:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclGenericApp_event_loop_15:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  392 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function zclGenericApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function zclGenericApp_event_loop
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  393 
//  394 
//  395 /*********************************************************************
//  396 * @fn      zclGenericApp_HandleKeys
//  397 *
//  398 * @brief   Handles all key events for this device.
//  399 *
//  400 * @param   shift - true if in shift/alt.
//  401 * @param   keys - bit field for key events. Valid entries:
//  402 *                 HAL_KEY_SW_5
//  403 *                 HAL_KEY_SW_4
//  404 *                 HAL_KEY_SW_2
//  405 *                 HAL_KEY_SW_1
//  406 *
//  407 * @return  none
//  408 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  409 static void zclGenericApp_HandleKeys( byte shift, byte keys )
zclGenericApp_HandleKeys:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclGenericApp_HandleKeys
        CODE
//  410 {
        FUNCALL zclGenericApp_HandleKeys, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, bdb_resetLocalAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_HandleKeys, zclGenericApp_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
//  411     if ( keys & HAL_KEY_SW_1 )
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclGenericApp_HandleKeys_0
//  412     {
//  413         static bool LED_OnOff = FALSE;
//  414         
//  415         giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  416         
//  417         /* GENERICAPP_TODO: add app functionality to hardware keys here */
//  418         
//  419         // for example, start/stop LED 2 toggling with 500ms period
//  420         if (LED_OnOff)
        MOV       DPTR,#??LED_OnOff
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_HandleKeys_1
//  421         { 
//  422             // if the LED is blinking, stop the osal timer and turn the LED off
//  423             osal_stop_timerEx(zclGenericApp_TaskID, GENERICAPP_EVT_1);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  424             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  425             LED_OnOff = FALSE;
        MOV       DPTR,#??LED_OnOff
        CLR       A
        SJMP      ??zclGenericApp_HandleKeys_2
//  426         }
//  427         else
//  428         {
//  429             // turn on LED 2 and start an osal timer to toggle it after 500ms, search
//  430             // for GENERICAPP_EVT_1 to see event handling after expired timer
//  431             osal_start_timerEx( zclGenericApp_TaskID, GENERICAPP_EVT_1, 500 );
??zclGenericApp_HandleKeys_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1f4
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x8
        MOV       R3,#0x0
        MOV       DPTR,#zclGenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  432             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  433             LED_OnOff = TRUE;
        MOV       DPTR,#??LED_OnOff
        MOV       A,#0x1
??zclGenericApp_HandleKeys_2:
        MOVX      @DPTR,A
//  434         }
//  435     }
//  436     // Start the BDB commissioning method
//  437     if ( keys & HAL_KEY_SW_2 )
??zclGenericApp_HandleKeys_0:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclGenericApp_HandleKeys_3
//  438     {
//  439         giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  440         
//  441         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_NWK_STEERING | BDB_COMMISSIONING_MODE_FINDING_BINDING | BDB_COMMISSIONING_MODE_INITIATOR_TL);
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xf
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  442     }
//  443     if ( keys & HAL_KEY_SW_3 )
??zclGenericApp_HandleKeys_3:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclGenericApp_HandleKeys_4
//  444     {
//  445         giGenAppScreenMode = GENERIC_MAINMODE;
        MOV       DPTR,#giGenAppScreenMode
        CLR       A
        MOVX      @DPTR,A
//  446         
//  447         // touchlink target commissioning, if enabled  
//  448 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  449         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_FINDING_BINDING);
//  450         touchLinkTarget_EnableCommissioning( 30000 );
//  451 #endif
//  452         
//  453     }
//  454     if ( keys & HAL_KEY_SW_4 )
??zclGenericApp_HandleKeys_4:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.3
        JNC       ??zclGenericApp_HandleKeys_5
//  455     {
//  456         
//  457         giGenAppScreenMode = giGenAppScreenMode ? GENERIC_MAINMODE : GENERIC_HELPMODE;
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        JZ        ??zclGenericApp_HandleKeys_6
        CLR       A
        SJMP      ??zclGenericApp_HandleKeys_7
??zclGenericApp_HandleKeys_6:
        MOV       A,#0x1
??zclGenericApp_HandleKeys_7:
        MOVX      @DPTR,A
//  458 #ifdef LCD_SUPPORTED
//  459         HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sClearLine & 0xff
        MOV       R3,#(sClearLine >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  460 #endif
//  461         
//  462     }
//  463     if ( keys & HAL_KEY_SW_5 )
??zclGenericApp_HandleKeys_5:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclGenericApp_HandleKeys_8
//  464     {
//  465         bdb_resetLocalAction();
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
//  466     }
//  467     
//  468     zclGenericApp_LcdDisplayUpdate();
??zclGenericApp_HandleKeys_8:
        ; Setup parameters for call to function zclGenericApp_LcdDisplayUpdate
        LCALL     `??zclGenericApp_LcdDisplayUpdate::?relay`; Banked call to: zclGenericApp_LcdDisplayUpdate
//  469 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock6

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??LED_OnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  470 
//  471 /*********************************************************************
//  472 * @fn      zclGenericApp_LcdDisplayUpdate
//  473 *
//  474 * @brief   Called to update the LCD display.
//  475 *
//  476 * @param   none
//  477 *
//  478 * @return  none
//  479 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  480 void zclGenericApp_LcdDisplayUpdate( void )
zclGenericApp_LcdDisplayUpdate:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclGenericApp_LcdDisplayUpdate
        CODE
//  481 {
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_LcdDisplayUpdate, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  482 #ifdef LCD_SUPPORTED
//  483     if ( giGenAppScreenMode == GENERIC_HELPMODE )
        MOV       DPTR,#giGenAppScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclGenericApp_LcdDisplayUpdate_0
//  484     {
//  485         zclGenericApp_LcdDisplayHelpMode();
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#sSwGenericApp & 0xff
        MOV       R3,#(sSwGenericApp >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sSwBDBMode & 0xff
        MOV       R3,#(sSwBDBMode >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        ; Setup parameters for call to function HalLcdWriteString
        SJMP      ??zclGenericApp_LcdDisplayUpdate_1
//  486     }
//  487     else
//  488     {
//  489         zclGenericApp_LcdDisplayMainMode();
??zclGenericApp_LcdDisplayUpdate_0:
        MOV       DPTR,#zclGenericApp_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JNZ       ??zclGenericApp_LcdDisplayUpdate_2
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x0
        SJMP      ??zclGenericApp_LcdDisplayUpdate_3
??zclGenericApp_LcdDisplayUpdate_2:
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??zclGenericApp_LcdDisplayUpdate_4
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x1
        SJMP      ??zclGenericApp_LcdDisplayUpdate_3
??zclGenericApp_LcdDisplayUpdate_4:
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclGenericApp_LcdDisplayUpdate_5
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x2
??zclGenericApp_LcdDisplayUpdate_3:
        LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
??zclGenericApp_LcdDisplayUpdate_5:
        MOV       DPTR,#gPermitDuration
        MOVX      A,@DPTR
        MOV       DPTR,#sSwHelp + 15
        JZ        ??zclGenericApp_LcdDisplayUpdate_6
        MOV       A,#0x2a
        SJMP      ??zclGenericApp_LcdDisplayUpdate_7
??zclGenericApp_LcdDisplayUpdate_6:
        MOV       A,#0x20
??zclGenericApp_LcdDisplayUpdate_7:
        MOVX      @DPTR,A
??zclGenericApp_LcdDisplayUpdate_1:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sSwHelp & 0xff
        MOV       R3,#(sSwHelp >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  490     }
//  491 #endif
//  492 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock7
//  493 
//  494 #ifdef LCD_SUPPORTED
//  495 /*********************************************************************
//  496 * @fn      zclGenericApp_LcdDisplayMainMode
//  497 *
//  498 * @brief   Called to display the main screen on the LCD.
//  499 *
//  500 * @param   none
//  501 *
//  502 * @return  none
//  503 */
//  504 static void zclGenericApp_LcdDisplayMainMode( void )
//  505 {
//  506     // display line 1 to indicate NWK status
//  507     if ( zclGenericApp_NwkState == DEV_ZB_COORD )
//  508     {
//  509         zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  510     }
//  511     else if ( zclGenericApp_NwkState == DEV_ROUTER )
//  512     {
//  513         zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  514     }
//  515     else if ( zclGenericApp_NwkState == DEV_END_DEVICE )
//  516     {
//  517         zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  518     }
//  519     
//  520     // end of line 3 displays permit join status (*)
//  521     if ( gPermitDuration )
//  522     {
//  523         sSwHelp[15] = '*';
//  524     }
//  525     else
//  526     {
//  527         sSwHelp[15] = ' ';
//  528     }
//  529     HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  530 }
//  531 
//  532 /*********************************************************************
//  533 * @fn      zclGenericApp_LcdDisplayHelpMode
//  534 *
//  535 * @brief   Called to display the SW options on the LCD.
//  536 *
//  537 * @param   none
//  538 *
//  539 * @return  none
//  540 */
//  541 static void zclGenericApp_LcdDisplayHelpMode( void )
//  542 {
//  543     HalLcdWriteString( (char *)sSwGenericApp, HAL_LCD_LINE_1 );
//  544     HalLcdWriteString( (char *)sSwBDBMode, HAL_LCD_LINE_2 );
//  545     HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  546 }
//  547 #endif  // LCD_SUPPORTED
//  548 
//  549 /*********************************************************************
//  550 * @fn      zclGenericApp_ProcessCommissioningStatus
//  551 *
//  552 * @brief   Callback in which the status of the commissioning process are reported
//  553 *
//  554 * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  555 *
//  556 * @return  none
//  557 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  558 static void zclGenericApp_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclGenericApp_ProcessCommissioningStatus:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclGenericApp_ProcessCommissioningStatus
        CODE
//  559 {
        FUNCALL zclGenericApp_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  560     switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
//  561     {
//  562         case BDB_COMMISSIONING_FORMATION:
//  563         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclGenericApp_ProcessCommissioningStatus_0
//  564         {
//  565             //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
//  566             bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  567         }
//  568         else
//  569         {
//  570             //Want to try other channels?
//  571             //try with bdb_setChannelAttribute
//  572         }
//  573         break;
//  574         case BDB_COMMISSIONING_NWK_STEERING:
//  575         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  576         {
//  577             //YOUR JOB:
//  578             //We are on the nwk, what now?
//  579         }
//  580         else
//  581         {
//  582             //See the possible errors for nwk steering procedure
//  583             //No suitable networks found
//  584             //Want to try other channels?
//  585             //try with bdb_setChannelAttribute
//  586         }
//  587         break;
//  588         case BDB_COMMISSIONING_FINDING_BINDING:
//  589         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  590         {
//  591             //YOUR JOB:
//  592         }
//  593         else
//  594         {
//  595             //YOUR JOB:
//  596             //retry?, wait for user interaction?
//  597         }
//  598         break;
//  599         case BDB_COMMISSIONING_INITIALIZATION:
//  600         //Initialization notification can only be successful. Failure on initialization
//  601         //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  602         
//  603         //YOUR JOB:
//  604         //We are on a network, what now?
//  605         
//  606         break;
//  607 #if ZG_BUILD_ENDDEVICE_TYPE    
//  608         case BDB_COMMISSIONING_PARENT_LOST:
//  609         if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  610         {
//  611             //We did recover from losing parent
//  612         }
//  613         else
//  614         {
//  615             //Parent not found, attempt to rejoin again after a fixed delay
//  616             osal_start_timerEx(zclGenericApp_TaskID, GENERICAPP_END_DEVICE_REJOIN_EVT, GENERICAPP_END_DEVICE_REJOIN_DELAY);
//  617         }
//  618         break;
//  619 #endif 
//  620     }
//  621 }
??zclGenericApp_ProcessCommissioningStatus_0:
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock8
//  622 
//  623 /*********************************************************************
//  624 * @fn      zclGenericApp_ProcessIdentifyTimeChange
//  625 *
//  626 * @brief   Called to process any change to the IdentifyTime attribute.
//  627 *
//  628 * @param   endpoint - in which the identify has change
//  629 *
//  630 * @return  none
//  631 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  632 static void zclGenericApp_ProcessIdentifyTimeChange( uint8 endpoint )
zclGenericApp_ProcessIdentifyTimeChange:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclGenericApp_ProcessIdentifyTimeChange
        CODE
//  633 {
        FUNCALL zclGenericApp_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGenericApp_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  634     (void) endpoint;
//  635     
//  636     if ( zclGenericApp_IdentifyTime > 0 )
        MOV       DPTR,#zclGenericApp_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclGenericApp_ProcessIdentifyTimeChange_0
//  637     {
//  638         HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x5
        MOV       R2,#-0x1
        MOV       R1,#0x2
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??zclGenericApp_ProcessIdentifyTimeChange_1
//  639     }
//  640     else
//  641     {
//  642         HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
??zclGenericApp_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  643     }
//  644 }
??zclGenericApp_ProcessIdentifyTimeChange_1:
          CFI EndBlock cfiBlock9
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
//  645 
//  646 /*********************************************************************
//  647 * @fn      zclGenericApp_BindNotification
//  648 *
//  649 * @brief   Called when a new bind is added.
//  650 *
//  651 * @param   data - pointer to new bind data
//  652 *
//  653 * @return  none
//  654 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  655 static void zclGenericApp_BindNotification( bdbBindNotificationData_t *data )
zclGenericApp_BindNotification:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclGenericApp_BindNotification
        CODE
//  656 {
        ; Saved register size: 0
        ; Auto size: 0
//  657     // GENERICAPP_TODO: process the new bind information
//  658 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock11
//  659 
//  660 
//  661 /*********************************************************************
//  662 * @fn      zclGenericApp_ProcessTouchlinkTargetEnable
//  663 *
//  664 * @brief   Called to process when the touchlink target functionality
//  665 *          is enabled or disabled
//  666 *
//  667 * @param   none
//  668 *
//  669 * @return  none
//  670 */
//  671 #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
//  672 static void zclGenericApp_ProcessTouchlinkTargetEnable( uint8 enable )
//  673 {
//  674     if ( enable )
//  675     {
//  676         HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  677     }
//  678     else
//  679     {
//  680         HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  681     }
//  682 }
//  683 #endif
//  684 
//  685 /*********************************************************************
//  686 * @fn      zclGenericApp_BasicResetCB
//  687 *
//  688 * @brief   Callback from the ZCL General Cluster Library
//  689 *          to set all the Basic Cluster attributes to default values.
//  690 *
//  691 * @param   none
//  692 *
//  693 * @return  none
//  694 */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  695 static void zclGenericApp_BasicResetCB( void )
zclGenericApp_BasicResetCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function zclGenericApp_BasicResetCB
        CODE
//  696 {
        FUNCALL zclGenericApp_BasicResetCB, zclGenericApp_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  697     
//  698     /* GENERICAPP_TODO: remember to update this function with any
//  699     application-specific cluster attribute variables */
//  700     
//  701     zclGenericApp_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclGenericApp_ResetAttributesToDefaultValues
        LCALL     `??zclGenericApp_ResetAttributesToDefaultValues:`; Banked call to: zclGenericApp_ResetAttributesToDefaultValues
//  702     
//  703 }
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock12

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGenericApp_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sSwHelp>`:
        DB "SW4: Help       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclGenericApp_CmdCallbacks>`:
        DATA16
        DW `??zclGenericApp_BasicResetCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1f4:
        DD 500

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessCommissioningStatus::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_ProcessIdentifyTimeChange::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_BindNotification::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_BindNotification

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGenericApp_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGenericApp_BasicResetCB

        END
//  704 /******************************************************************************
//  705 *
//  706 *  Functions for processing ZCL Foundation incoming Command/Response messages
//  707 *
//  708 *****************************************************************************/
//  709 
//  710 /*********************************************************************
//  711 * @fn      zclGenericApp_ProcessIncomingMsg
//  712 *
//  713 * @brief   Process ZCL Foundation incoming message
//  714 *
//  715 * @param   pInMsg - pointer to the received message
//  716 *
//  717 * @return  none
//  718 */
//  719 static void zclGenericApp_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
//  720 {
//  721     switch ( pInMsg->zclHdr.commandID )
//  722     {
//  723 #ifdef ZCL_READ
//  724         case ZCL_CMD_READ_RSP:
//  725         zclGenericApp_ProcessInReadRspCmd( pInMsg );
//  726         break;
//  727 #endif
//  728 #ifdef ZCL_WRITE
//  729         case ZCL_CMD_WRITE_RSP:
//  730         zclGenericApp_ProcessInWriteRspCmd( pInMsg );
//  731         break;
//  732 #endif
//  733         case ZCL_CMD_CONFIG_REPORT:
//  734         case ZCL_CMD_CONFIG_REPORT_RSP:
//  735         case ZCL_CMD_READ_REPORT_CFG:
//  736         case ZCL_CMD_READ_REPORT_CFG_RSP:
//  737         case ZCL_CMD_REPORT:
//  738         //bdb_ProcessIncomingReportingMsg( pInMsg );
//  739         break;
//  740         
//  741         case ZCL_CMD_DEFAULT_RSP:
//  742         zclGenericApp_ProcessInDefaultRspCmd( pInMsg );
//  743         break;
//  744 #ifdef ZCL_DISCOVER
//  745         case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  746         zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
//  747         break;
//  748         
//  749         case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  750         zclGenericApp_ProcessInDiscCmdsRspCmd( pInMsg );
//  751         break;
//  752         
//  753         case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  754         zclGenericApp_ProcessInDiscAttrsRspCmd( pInMsg );
//  755         break;
//  756         
//  757         case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  758         zclGenericApp_ProcessInDiscAttrsExtRspCmd( pInMsg );
//  759         break;
//  760 #endif
//  761         default:
//  762         break;
//  763     }
//  764     
//  765     if ( pInMsg->attrCmd )
//  766         osal_mem_free( pInMsg->attrCmd );
//  767 }
//  768 
//  769 #ifdef ZCL_READ
//  770 /*********************************************************************
//  771 * @fn      zclGenericApp_ProcessInReadRspCmd
//  772 *
//  773 * @brief   Process the "Profile" Read Response Command
//  774 *
//  775 * @param   pInMsg - incoming message to process
//  776 *
//  777 * @return  none
//  778 */
//  779 static uint8 zclGenericApp_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  780 {
//  781     zclReadRspCmd_t *readRspCmd;
//  782     uint8 i;
//  783     
//  784     readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  785     for (i = 0; i < readRspCmd->numAttr; i++)
//  786     {
//  787         // Notify the originator of the results of the original read attributes
//  788         // attempt and, for each successfull request, the value of the requested
//  789         // attribute
//  790     }
//  791     
//  792     return ( TRUE );
//  793 }
//  794 #endif // ZCL_READ
//  795 
//  796 #ifdef ZCL_WRITE
//  797 /*********************************************************************
//  798 * @fn      zclGenericApp_ProcessInWriteRspCmd
//  799 *
//  800 * @brief   Process the "Profile" Write Response Command
//  801 *
//  802 * @param   pInMsg - incoming message to process
//  803 *
//  804 * @return  none
//  805 */
//  806 static uint8 zclGenericApp_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  807 {
//  808     zclWriteRspCmd_t *writeRspCmd;
//  809     uint8 i;
//  810     
//  811     writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  812     for ( i = 0; i < writeRspCmd->numAttr; i++ )
//  813     {
//  814         // Notify the device of the results of the its original write attributes
//  815         // command.
//  816     }
//  817     
//  818     return ( TRUE );
//  819 }
//  820 #endif // ZCL_WRITE
//  821 
//  822 /*********************************************************************
//  823 * @fn      zclGenericApp_ProcessInDefaultRspCmd
//  824 *
//  825 * @brief   Process the "Profile" Default Response Command
//  826 *
//  827 * @param   pInMsg - incoming message to process
//  828 *
//  829 * @return  none
//  830 */
//  831 static uint8 zclGenericApp_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  832 {
//  833     // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  834     
//  835     // Device is notified of the Default Response command.
//  836     (void)pInMsg;
//  837     
//  838     return ( TRUE );
//  839 }
//  840 
//  841 #ifdef ZCL_DISCOVER
//  842 /*********************************************************************
//  843 * @fn      zclGenericApp_ProcessInDiscCmdsRspCmd
//  844 *
//  845 * @brief   Process the Discover Commands Response Command
//  846 *
//  847 * @param   pInMsg - incoming message to process
//  848 *
//  849 * @return  none
//  850 */
//  851 static uint8 zclGenericApp_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
//  852 {
//  853     zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
//  854     uint8 i;
//  855     
//  856     discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
//  857     for ( i = 0; i < discoverRspCmd->numCmd; i++ )
//  858     {
//  859         // Device is notified of the result of its attribute discovery command.
//  860     }
//  861     
//  862     return ( TRUE );
//  863 }
//  864 
//  865 /*********************************************************************
//  866 * @fn      zclGenericApp_ProcessInDiscAttrsRspCmd
//  867 *
//  868 * @brief   Process the "Profile" Discover Attributes Response Command
//  869 *
//  870 * @param   pInMsg - incoming message to process
//  871 *
//  872 * @return  none
//  873 */
//  874 static uint8 zclGenericApp_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
//  875 {
//  876     zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  877     uint8 i;
//  878     
//  879     discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
//  880     for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  881     {
//  882         // Device is notified of the result of its attribute discovery command.
//  883     }
//  884     
//  885     return ( TRUE );
//  886 }
//  887 
//  888 /*********************************************************************
//  889 * @fn      zclGenericApp_ProcessInDiscAttrsExtRspCmd
//  890 *
//  891 * @brief   Process the "Profile" Discover Attributes Extended Response Command
//  892 *
//  893 * @param   pInMsg - incoming message to process
//  894 *
//  895 * @return  none
//  896 */
//  897 static uint8 zclGenericApp_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
//  898 {
//  899     zclDiscoverAttrsExtRsp_t *discoverRspCmd;
//  900     uint8 i;
//  901     
//  902     discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
//  903     for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  904     {
//  905         // Device is notified of the result of its attribute discovery command.
//  906     }
//  907     
//  908     return ( TRUE );
//  909 }
//  910 #endif // ZCL_DISCOVER
//  911 
//  912 /****************************************************************************
//  913 ****************************************************************************/
//  914 
//  915 
// 
// 690 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//  42 bytes in segment XDATA_I
//  42 bytes in segment XDATA_ID
//  51 bytes in segment XDATA_ROM_C
//   4 bytes in segment XDATA_Z
// 
//  90 bytes of CODE     memory
//  47 bytes of CONST    memory (+ 4 bytes shared)
// 690 bytes of HUGECODE memory
//  46 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
