///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              19/Dec/2017  10:07:58
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Components\stack\zcl\zcl.c
//    Command line       =  
//        -f C:\Users\sam\AppData\Local\Temp\EW7422.tmp
//        ("C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Components\stack\zcl\zcl.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LEGACY_LCD_DEBUG -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES -D
//        ZCL_GROUPS -lC "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\Source\" -I
//        "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\hal\target\QC_CC2530\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        C:\Users\sam\Documents\GitHub\ti\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\QCApp\CC2530DB\CoordinatorEB\List\zcl.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_CODE
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_SHR
        EXTERN ?VB
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclAuthorizeWrite::?relay`,0203H
        FUNCTION `??zclBuildHdr::?relay`,0203H
        PUBLIC `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,0203H
        PUBLIC `??zclFindAttrRecsList::?relay`
        FUNCTION `??zclFindAttrRecsList::?relay`,0203H
        FUNCTION `??zclFindClusterOption::?relay`,0203H
        PUBLIC `??zclGetAttrDataLength::?relay`
        FUNCTION `??zclGetAttrDataLength::?relay`,0203H
        FUNCTION `??zclGetAttrDataLengthUsingCB::?relay`,0203H
        FUNCTION `??zclGetAuthorizeCB::?relay`,0203H
        FUNCTION `??zclGetClusterOption::?relay`,0203H
        PUBLIC `??zclGetDataTypeLength::?relay`
        FUNCTION `??zclGetDataTypeLength::?relay`,0203H
        FUNCTION `??zclGetReadWriteCB::?relay`,0203H
        PUBLIC `??zclParseHdr::?relay`
        FUNCTION `??zclParseHdr::?relay`,0203H
        FUNCTION `??zclParseInDefaultRspCmd::?relay`,0203H
        PUBLIC `??zclParseInReadCmd::?relay`
        FUNCTION `??zclParseInReadCmd::?relay`,0203H
        FUNCTION `??zclParseInReadRspCmd::?relay`,0203H
        PUBLIC `??zclParseInWriteCmd::?relay`
        FUNCTION `??zclParseInWriteCmd::?relay`,0203H
        FUNCTION `??zclParseInWriteRspCmd::?relay`,0203H
        FUNCTION `??zclProcessInReadCmd::?relay`,0203H
        FUNCTION `??zclProcessInWriteCmd::?relay`,0203H
        FUNCTION `??zclProcessInWriteUndividedCmd::?relay`,0203H
        PUBLIC `??zclReadAttrData::?relay`
        FUNCTION `??zclReadAttrData::?relay`,0203H
        FUNCTION `??zclReadAttrDataUsingCB::?relay`,0203H
        FUNCTION `??zclRevertWriteUndividedCmd::?relay`,0203H
        PUBLIC `??zclSerializeData::?relay`
        FUNCTION `??zclSerializeData::?relay`,0203H
        FUNCTION `??zclSetSecurityOption::?relay`,0203H
        FUNCTION `??zclWriteAttrData::?relay`,0203H
        FUNCTION `??zclWriteAttrDataUsingCB::?relay`,0203H
        FUNCTION `??zcl_DeviceOperational::?relay`,0203H
        PUBLIC `??zcl_HandleExternal::?relay`
        FUNCTION `??zcl_HandleExternal::?relay`,0203H
        PUBLIC `??zcl_Init::?relay`
        FUNCTION `??zcl_Init::?relay`,0203H
        PUBLIC `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,0203H
        PUBLIC `??zcl_ReadAttrData::?relay`
        FUNCTION `??zcl_ReadAttrData::?relay`,0203H
        PUBLIC `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,0203H
        PUBLIC `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,0203H
        PUBLIC `??zcl_SendRead::?relay`
        FUNCTION `??zcl_SendRead::?relay`,0203H
        PUBLIC `??zcl_SendReadRsp::?relay`
        FUNCTION `??zcl_SendReadRsp::?relay`,0203H
        PUBLIC `??zcl_SendWriteRequest::?relay`
        FUNCTION `??zcl_SendWriteRequest::?relay`,0203H
        PUBLIC `??zcl_SendWriteRsp::?relay`
        FUNCTION `??zcl_SendWriteRsp::?relay`,0203H
        FUNCTION `??zcl_addExternalFoundationHandler::?relay`,0203H
        PUBLIC `??zcl_event_loop::?relay`
        FUNCTION `??zcl_event_loop::?relay`,0203H
        FUNCTION `??zcl_getExternalFoundationHandler::?relay`,0203H
        PUBLIC `??zcl_getParsedTransSeqNum::?relay`
        FUNCTION `??zcl_getParsedTransSeqNum::?relay`,0203H
        PUBLIC `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,0203H
        PUBLIC `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,0203H
        PUBLIC `??zcl_registerClusterOptionList::?relay`
        FUNCTION `??zcl_registerClusterOptionList::?relay`,0203H
        PUBLIC `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,0203H
        PUBLIC `??zcl_registerForMsgExt::?relay`
        FUNCTION `??zcl_registerForMsgExt::?relay`,0203H
        PUBLIC `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,0203H
        PUBLIC `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,0203H
        PUBLIC `??zcl_registerValidateAttrData::?relay`
        FUNCTION `??zcl_registerValidateAttrData::?relay`,0203H
        PUBWEAK __Constant_32
        FUNCTION zclAuthorizeWrite,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclBuildHdr,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclFindAttrRec
        FUNCTION zclFindAttrRec,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclFindAttrRecsList
        FUNCTION zclFindAttrRecsList,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclFindClusterOption,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,021203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGetAttrDataLengthUsingCB,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION zclGetAuthorizeCB,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclGetClusterOption,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGetDataTypeLength
        FUNCTION zclGetDataTypeLength,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION zclGetReadWriteCB,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclParseHdr
        FUNCTION zclParseHdr,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInDefaultRspCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclParseInReadCmd
        FUNCTION zclParseInReadCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInReadRspCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclParseInWriteCmd
        FUNCTION zclParseInWriteCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        FUNCTION zclParseInWriteRspCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclProcessInReadCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        FUNCTION zclProcessInWriteCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        FUNCTION zclProcessInWriteUndividedCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC zclReadAttrData
        FUNCTION zclReadAttrData,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclReadAttrDataUsingCB,0a1203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclRevertWriteUndividedCmd,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zclSerializeData
        FUNCTION zclSerializeData,0a1203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION zclSetSecurityOption,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclWriteAttrData,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclWriteAttrDataUsingCB,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zcl_DeviceOperational,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zcl_HandleExternal
        FUNCTION zcl_HandleExternal,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_InSeqNum
        PUBLIC zcl_Init
        FUNCTION zcl_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC zcl_ReadAttrData
        FUNCTION zcl_ReadAttrData,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC zcl_SendCommand
        FUNCTION zcl_SendCommand,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0a1203H
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zcl_SendRead
        FUNCTION zcl_SendRead,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zcl_SendReadRsp
        FUNCTION zcl_SendReadRsp,0a1203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC zcl_SendWriteRequest
        FUNCTION zcl_SendWriteRequest,0a1203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC zcl_SendWriteRsp
        FUNCTION zcl_SendWriteRsp,0a1203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zcl_TaskID
        PUBLIC zcl_TransID
        PUBLIC zcl_ValidateAttrDataCB
        FUNCTION zcl_addExternalFoundationHandler,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zcl_event_loop
        FUNCTION zcl_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION zcl_getExternalFoundationHandler,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getParsedTransSeqNum
        FUNCTION zcl_getParsedTransSeqNum,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerForMsg
        FUNCTION zcl_registerForMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_registerForMsgExt
        FUNCTION zcl_registerForMsgExt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_registerValidateAttrData
        FUNCTION zcl_registerValidateAttrData,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
gp_GetHeadNotificationMsg SYMBOL "gp_GetHeadNotificationMsg"
`??gp_GetHeadNotificationMsg::?relay` SYMBOL "?relay", gp_GetHeadNotificationMsg
gp_GetPHeadNotification SYMBOL "gp_GetPHeadNotification"
`??gp_GetPHeadNotification::?relay` SYMBOL "?relay", gp_GetPHeadNotification
gp_NotificationMsgClean SYMBOL "gp_NotificationMsgClean"
`??gp_NotificationMsgClean::?relay` SYMBOL "?relay", gp_NotificationMsgClean
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_revmemcpy      SYMBOL "osal_revmemcpy"
`??osal_revmemcpy::?relay` SYMBOL "?relay", osal_revmemcpy
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zclFindAttrRecsList SYMBOL "zclFindAttrRecsList"
`??zclFindAttrRecsList::?relay` SYMBOL "?relay", zclFindAttrRecsList
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
`??zclGetAttrDataLength::?relay` SYMBOL "?relay", zclGetAttrDataLength
zclGetDataTypeLength SYMBOL "zclGetDataTypeLength"
`??zclGetDataTypeLength::?relay` SYMBOL "?relay", zclGetDataTypeLength
zclParseHdr         SYMBOL "zclParseHdr"
`??zclParseHdr::?relay` SYMBOL "?relay", zclParseHdr
zclParseInReadCmd   SYMBOL "zclParseInReadCmd"
`??zclParseInReadCmd::?relay` SYMBOL "?relay", zclParseInReadCmd
zclParseInWriteCmd  SYMBOL "zclParseInWriteCmd"
`??zclParseInWriteCmd::?relay` SYMBOL "?relay", zclParseInWriteCmd
zclReadAttrData     SYMBOL "zclReadAttrData"
`??zclReadAttrData::?relay` SYMBOL "?relay", zclReadAttrData
zclSerializeData    SYMBOL "zclSerializeData"
`??zclSerializeData::?relay` SYMBOL "?relay", zclSerializeData
zcl_HandleExternal  SYMBOL "zcl_HandleExternal"
`??zcl_HandleExternal::?relay` SYMBOL "?relay", zcl_HandleExternal
zcl_Init            SYMBOL "zcl_Init"
`??zcl_Init::?relay` SYMBOL "?relay", zcl_Init
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_ReadAttrData    SYMBOL "zcl_ReadAttrData"
`??zcl_ReadAttrData::?relay` SYMBOL "?relay", zcl_ReadAttrData
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_SendRead        SYMBOL "zcl_SendRead"
`??zcl_SendRead::?relay` SYMBOL "?relay", zcl_SendRead
zcl_SendReadRsp     SYMBOL "zcl_SendReadRsp"
`??zcl_SendReadRsp::?relay` SYMBOL "?relay", zcl_SendReadRsp
zcl_SendWriteRequest SYMBOL "zcl_SendWriteRequest"
`??zcl_SendWriteRequest::?relay` SYMBOL "?relay", zcl_SendWriteRequest
zcl_SendWriteRsp    SYMBOL "zcl_SendWriteRsp"
`??zcl_SendWriteRsp::?relay` SYMBOL "?relay", zcl_SendWriteRsp
zcl_event_loop      SYMBOL "zcl_event_loop"
`??zcl_event_loop::?relay` SYMBOL "?relay", zcl_event_loop
zcl_getParsedTransSeqNum SYMBOL "zcl_getParsedTransSeqNum"
`??zcl_getParsedTransSeqNum::?relay` SYMBOL "?relay", zcl_getParsedTransSeqNum
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
`??zcl_registerClusterOptionList::?relay` SYMBOL "?relay", zcl_registerClusterOptionList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerForMsgExt SYMBOL "zcl_registerForMsgExt"
`??zcl_registerForMsgExt::?relay` SYMBOL "?relay", zcl_registerForMsgExt
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zcl_registerValidateAttrData SYMBOL "zcl_registerValidateAttrData"
`??zcl_registerValidateAttrData::?relay` SYMBOL "?relay", zcl_registerValidateAttrData

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,00H
        EXTERN `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,00H
        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??gp_GetHeadNotificationMsg::?relay`
        FUNCTION `??gp_GetHeadNotificationMsg::?relay`,00H
        EXTERN `??gp_GetPHeadNotification::?relay`
        FUNCTION `??gp_GetPHeadNotification::?relay`,00H
        EXTERN `??gp_NotificationMsgClean::?relay`
        FUNCTION `??gp_NotificationMsgClean::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_revmemcpy::?relay`
        FUNCTION `??osal_revmemcpy::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_GetHeadNotificationMsg
        FUNCTION gp_GetHeadNotificationMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_GetPHeadNotification
        FUNCTION gp_GetPHeadNotification,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN gp_NotificationMsgClean
        FUNCTION gp_NotificationMsgClean,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_revmemcpy
        FUNCTION osal_revmemcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\sam\Documents\GitHub\ti\Z-Stack 3.0.1\Components\stack\zcl\zcl.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl.c
//    3   Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
//    4   Revision:       $Revision: 44489 $
//    5 
//    6   Description:    This file contains the Zigbee Cluster Library Foundation functions.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "AF.h"
//   45 
//   46 #include "zcl.h"
//   47 #include "zcl_general.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52    
//   53 #ifdef BDB_REPORTING
//   54   #include "bdb_Reporting.h"
//   55 #endif
//   56 #include "bdb_interface.h"
//   57 
//   58 #include "zcl_green_power.h"
//   59 
//   60    
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 /*** Frame Control ***/
//   65 #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
//   66 #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
//   67 #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
//   68 #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
//   69 
//   70 /*** Attribute Access Control ***/
//   71 #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
//   72 #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
//   73 #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
//   74 #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
//   75 #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
//   76 #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
//   77 
//   78 #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
//   79 #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
//   80 
//   81 #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \ 
//   82                                         (zclHdr).fc.manuSpecific == 0          && \ 
//   83                                         (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
//   84 
//   85 // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
//   86 #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \ 
//   87                                         (cmd) == ZCL_CMD_WRITE                  || \ 
//   88                                         (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \ 
//   89                                         (cmd) == ZCL_CMD_WRITE_NO_RSP           || \ 
//   90                                         (cmd) == ZCL_CMD_CONFIG_REPORT          || \ 
//   91                                         (cmd) == ZCL_CMD_READ_REPORT_CFG        || \ 
//   92                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \ 
//   93                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \ 
//   94                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \ 
//   95                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \ 
//   96                                         (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
//   97 #define  ZCL_VALID_MIN_HEADER_LEN  3
//   98 
//   99 /*********************************************************************
//  100  * CONSTANTS
//  101  */
//  102 
//  103 /*********************************************************************
//  104  * TYPEDEFS
//  105  */
//  106 typedef struct zclLibPlugin
//  107 {
//  108   struct zclLibPlugin *next;
//  109   uint16              startClusterID;    // starting cluster ID
//  110   uint16              endClusterID;      // ending cluster ID
//  111   zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
//  112 } zclLibPlugin_t;
//  113 
//  114 // Command record list
//  115 typedef struct zclCmdRecsList
//  116 {
//  117   struct zclCmdRecsList *pNext;
//  118   uint8                 endpoint;
//  119   uint8                 numCommands;
//  120   CONST zclCommandRec_t *pCmdRecs;
//  121 } zclCmdRecsList_t;
//  122 
//  123 
//  124 // Cluster option list item
//  125 typedef struct zclClusterOptionList
//  126 {
//  127   struct zclClusterOptionList *next;
//  128   uint8                       endpoint;   // Used to link it into the endpoint descriptor
//  129   uint8                       numOptions; // Number of the following records
//  130   zclOptionRec_t              *options;   // option records
//  131 } zclClusterOptionList;
//  132 
//  133 typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
//  134 typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
//  135 
//  136 typedef struct
//  137 {
//  138   zclParseInProfileCmd_t   pfnParseInProfile;
//  139   zclProcessInProfileCmd_t pfnProcessInProfile;
//  140 } zclCmdItems_t;
//  141 
//  142 
//  143 // List record for external handler for unhandled ZCL Foundation commands/rsps
//  144 typedef struct zclExternalFoundationHandlerList
//  145 {
//  146     struct zclExternalFoundationHandlerList *next;
//  147     uint8 zcl_ExternalTaskID;
//  148     uint8 zcl_ExternalEndPoint;
//  149 } zclExternalFoundationHandlerList;
//  150 
//  151 
//  152 /*********************************************************************
//  153  * GLOBAL VARIABLES
//  154  */
//  155 
//  156 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157   uint8 zcl_TaskID;
zcl_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  158 #endif
//  159 
//  160 // The Application should register its attribute data validation function

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  161 zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
zcl_ValidateAttrDataCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  162 
//  163 // ZCL Sequence number
//  164 //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 uint8 zcl_InSeqNum = 0x00;
zcl_InSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  166 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
zcl_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 static uint8 savedZCLTransSeqNum = 0;
savedZCLTransSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 
//  171 /*********************************************************************
//  172  * EXTERNAL VARIABLES
//  173  */
//  174 
//  175 /*********************************************************************
//  176  * EXTERNAL FUNCTIONS
//  177  */
//  178 
//  179 /*********************************************************************
//  180  * LOCAL VARIABLES
//  181  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  182 static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
plugins:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  183 
//  184 #if defined ( ZCL_DISCOVER )
//  185   static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
//  186 #endif
//  187 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  188 static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
attrList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  189 static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
clusterOptionList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  190 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  191 static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
rawAFMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  192 
//  193 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  194 static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
externalEndPointHandlerList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  195 #endif
//  196 
//  197 /*********************************************************************
//  198  * LOCAL FUNCTIONS
//  199  */
//  200 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
//  201 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
//  202 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
//  203 
//  204 #if !defined ( ZCL_STANDALONE )
//  205 static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
//  206 static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
//  207 #endif // !defined ( ZCL_STANDALONE )
//  208 
//  209 #if defined ( ZCL_DISCOVER )
//  210   static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
//  211 #endif
//  212 
//  213 zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
//  214 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
//  215 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
//  216 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
//  217 
//  218 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
//  219 
//  220 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
//  221 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
//  222 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
//  223 #endif // ZCL_READ || ZCL_WRITE
//  224 
//  225 #ifdef ZCL_READ
//  226 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
//  227 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
//  228 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
//  229                                          uint8 *pAttrData, uint16 *pDataLen );
//  230 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  231 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
//  232 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
//  233 #endif // ZCL_READ
//  234 
//  235 #ifdef ZCL_WRITE
//  236 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
//  237                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
//  238 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
//  239                                           zclAttrRec_t *pAttr, uint8 *pAttrData );
//  240 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  241 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
//  242 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
//  243 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
//  244 #endif // ZCL_WRITE
//  245 
//  246 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  247 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
//  248 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
//  249 #endif
//  250 
//  251 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
//  252 
//  253 #ifdef ZCL_DISCOVER
//  254 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
//  255 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
//  256 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
//  257 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
//  258 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
//  259 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
//  260 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
//  261 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  262 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  263 #endif // ZCL_DISCOVER
//  264 
//  265 /*********************************************************************
//  266  * Parse Profile Command Function Table
//  267  */
//  268 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  269 static CONST zclCmdItems_t zclCmdTable[] =
zclCmdTable:
        DATA16
        DW `??zclParseInReadCmd::?relay`
        DW `??zclProcessInReadCmd::?relay`
        DW `??zclParseInReadRspCmd::?relay`
        DW `??zcl_HandleExternal::?relay`
        DW `??zclParseInWriteCmd::?relay`
        DW `??zclProcessInWriteCmd::?relay`
        DW `??zclParseInWriteCmd::?relay`
        DW `??zclProcessInWriteUndividedCmd::?relay`
        DW `??zclParseInWriteRspCmd::?relay`
        DW `??zcl_HandleExternal::?relay`
        DW `??zclParseInWriteCmd::?relay`
        DW `??zclProcessInWriteCmd::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW `??zclParseInDefaultRspCmd::?relay`
        DW `??zcl_HandleExternal::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
//  270 {
//  271 #ifdef ZCL_READ
//  272   /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
//  273   /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
//  274 #else
//  275   /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  276   /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  277 #endif // ZCL_READ
//  278 
//  279 #ifdef ZCL_WRITE
//  280   /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  281   /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
//  282   /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
//  283   /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  284 #else
//  285   /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  286   /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  287   /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  288   /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  289 #endif // ZCL_WRITE
//  290 
//  291 #ifdef ZCL_REPORTING_DEVICE
//  292     /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
//  293 #else
//  294     /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  295 #endif
//  296 
//  297 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  298     /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
//  299 #else
//  300     /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  301 #endif
//  302 
//  303 #ifdef ZCL_REPORTING_DEVICE
//  304     /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
//  305 #else
//  306     /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  307 #endif
//  308 
//  309 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  310     /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
//  311 #else
//  312     /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  313 #endif
//  314 
//  315 #ifdef ZCL_REPORT_DESTINATION_DEVICE
//  316     /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
//  317 #else
//  318     /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  319 #endif
//  320 
//  321   /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
//  322 
//  323 #ifdef ZCL_DISCOVER
//  324   /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  325   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
//  326   /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  327   /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  328   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  329   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  330   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  331   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  332   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  333   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  334   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
//  335 #else
//  336   /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
//  337   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  338   /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  339   /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  340   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  341   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  342   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  343   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  344   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  345   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  346   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  347 #endif // ZCL_DISCOVER
//  348 };
//  349 
//  350 /*********************************************************************
//  351  * PUBLIC FUNCTIONS
//  352  *********************************************************************/
//  353 
//  354 #if !defined ( ZCL_STANDALONE )
//  355 /*********************************************************************
//  356  * @fn          zcl_Init
//  357  *
//  358  * @brief       Initialization function for the zcl layer.
//  359  *
//  360  * @param       task_id - ZCL task id
//  361  *
//  362  * @return      none
//  363  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  364 void zcl_Init( uint8 task_id )
zcl_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zcl_Init
        CODE
//  365 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  366   zcl_TaskID = task_id;
        MOV       A,R1
        MOV       DPTR,#zcl_TaskID
        MOVX      @DPTR,A
//  367 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  368 #endif
//  369 
//  370 #if !defined ( ZCL_STANDALONE )
//  371 /*********************************************************************
//  372  * @fn          zcl_event_loop
//  373  *
//  374  * @brief       Event Loop Processor for zcl.
//  375  *
//  376  * @param       task_id - task id
//  377  * @param       events - event bitmap
//  378  *
//  379  * @return      unprocessed events
//  380  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  381 uint16 zcl_event_loop( uint8 task_id, uint16 events )
zcl_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zcl_event_loop
        CODE
//  382 {
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_getExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, gp_GetHeadNotificationMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_revmemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, gp_GetPHeadNotification
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, gp_NotificationMsgClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, gp_GetHeadNotificationMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  383   uint8 *msgPtr;
//  384 
//  385   (void)task_id;  // Intentionally unreferenced parameter
//  386 
//  387   if ( events & SYS_EVENT_MSG )
        MOV       A,R3
        ANL       A,#0x80
        JZ        ??zcl_event_loop_0
//  388   {
//  389     msgPtr = osal_msg_receive( zcl_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??zcl_event_loop_1
//  390     while ( msgPtr != NULL )
//  391     {
//  392       uint8 dealloc = TRUE;
//  393 
//  394       if ( *msgPtr == AF_INCOMING_MSG_CMD )
//  395       {
//  396         zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
??zcl_event_loop_2:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
//  397       }
//  398       else
//  399       {
//  400         uint8 taskID;
//  401         taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
//  402 
//  403         if ( taskID != TASK_NO_TASK )
//  404         {
//  405           // send it to another task to process.
//  406           osal_msg_send( taskID, msgPtr );
//  407           dealloc = FALSE;
//  408         }
//  409       }
//  410 
//  411       // Release the memory
//  412       if ( dealloc )
//  413       {
//  414         osal_msg_deallocate( msgPtr );
??zcl_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  415       }
//  416 
//  417       // Next
//  418       msgPtr = osal_msg_receive( zcl_TaskID );
??zcl_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zcl_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        MOV       A,R6
        ORL       A,R7
        JZ        ??zcl_event_loop_4
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0x1a
        JZ        ??zcl_event_loop_2
        ; Setup parameters for call to function zcl_getExternalFoundationHandler
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
        MOV       A,R1
        MOV       R1,A
        MOV       A,#-0x1
        XRL       A,R1
        JZ        ??zcl_event_loop_3
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        SJMP      ??zcl_event_loop_1
//  419     }
//  420 
//  421     // return unprocessed events
//  422     return (events ^ SYS_EVENT_MSG);
??zcl_event_loop_4:
        MOV       R2,?V0
        MOV       A,?V1
        XRL       A,#0x80
        MOV       R3,A
        LJMP      ??zcl_event_loop_5 & 0xFFFF
//  423   }
//  424 
//  425 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  426   if ( events & ZCL_DATABUF_SEND )
??zcl_event_loop_0:
        MOV       A,R2
        ANL       A,#0x20
        JNZ       $+5
        LJMP      ??zcl_event_loop_6 & 0xFFFF
//  427   {
//  428     gpNotificationMsg_t *gpNotification = NULL;
//  429     gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
//  430     uint8 appId;
//  431     uint8 nwkSeqNum;
//  432     uint16 nwkAddr;
//  433     
//  434     gpNotification = gp_GetHeadNotificationMsg( );
        ; Setup parameters for call to function gp_GetHeadNotificationMsg
        LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
        MOV       ?V2,R2
        MOV       ?V3,R3
//  435     
//  436     if ( gpNotification == NULL )
        MOV       A,R2
        ORL       A,?V3
        JNZ       $+5
        LJMP      ??zcl_event_loop_6 & 0xFFFF
//  437     {
//  438       return 0;
//  439     }
//  440     
//  441     pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
        MOV       A,R2
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        LCALL     ??Subroutine133_0 & 0xFFFF
//  442     appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
??CrossCallReturnLabel_280:
        MOV       A,R6
        ADD       A,#0x2
        LCALL     ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL     ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_120:
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
//  443     
//  444     // To save the NIB nwk sequense number and use the GP alias nwk sequence number
//  445     // for the GP notification
//  446     nwkSeqNum = _NIB.SequenceNum;
        MOV       DPTR,#_NIB
        MOVX      A,@DPTR
        MOV       ?V7,A
//  447     _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB
        MOVX      @DPTR,A
//  448     
//  449     // To save the NIB nwk address and use the GP alias nwk address for the GP notification
//  450     nwkAddr = _NIB.nwkDevAddress;
        MOV       DPTR,#_NIB + 20
        LCALL     ?Subroutine76 & 0xFFFF
//  451     
//  452     if( appId == GP_OPT_APP_ID_GPD )
??CrossCallReturnLabel_122:
        JNZ       ??zcl_event_loop_7
//  453     {
//  454       osal_memcpy( &_NIB.nwkDevAddress,( pCmdPayloadMsgCurr->pMsg + sizeof( uint16 ) ), sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#0x2
        LCALL     ?Subroutine60 & 0xFFFF
//  455     }
??CrossCallReturnLabel_89:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#(_NIB + 20) & 0xff
        MOV       R3,#((_NIB + 20) >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        SJMP      ??zcl_event_loop_8
          CFI CFA_XSP16 add(XSP16, 18)
//  456     else if( appId == GP_OPT_APP_ID_IEEE )
??zcl_event_loop_7:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zcl_event_loop_9
//  457     {
//  458       osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
        ; Setup parameters for call to function osal_revmemcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#0x8
        LCALL     ?Subroutine60 & 0xFFFF
//  459     }
??CrossCallReturnLabel_90:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#(_NIB + 20) & 0xff
        MOV       R3,#((_NIB + 20) >> 8) & 0xff
        LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
??zcl_event_loop_8:
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  460     
//  461     zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
//  462                           COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  463                           TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
??zcl_event_loop_9:
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        MOV       R1,A
        ; Setup parameters for call to function zcl_SendCommand
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x21
        MOV       R5,#0x0
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       R1,#-0xe
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  464     
//  465     // Restore the NIB nwk sequence number
//  466     _NIB.SequenceNum = nwkSeqNum;
        MOV       A,?V7
        MOV       DPTR,#_NIB
        MOVX      @DPTR,A
//  467     
//  468     // Restore the NIB nwk address
//  469     _NIB.nwkDevAddress = nwkAddr;
        MOV       DPTR,#_NIB + 20
        MOV       A,?V8
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V9
        MOVX      @DPTR,A
//  470     
//  471     gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
        ; Setup parameters for call to function gp_GetPHeadNotification
        LCALL     `??gp_GetPHeadNotification::?relay`; Banked call to: gp_GetPHeadNotification
        ; Setup parameters for call to function gp_NotificationMsgClean
        LCALL     `??gp_NotificationMsgClean::?relay`; Banked call to: gp_NotificationMsgClean
//  472     
//  473     if ( gp_GetHeadNotificationMsg ( ) != NULL )
        ; Setup parameters for call to function gp_GetHeadNotificationMsg
        LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??zcl_event_loop_6
//  474     {
//  475       osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R2,#0x20
        MOV       R3,#0x0
        MOV       DPTR,#zcl_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  476     }
//  477   }
//  478 #endif
//  479 
//  480   // Discard unknown events
//  481   return 0;
??zcl_event_loop_6:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zcl_event_loop_5:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//  482 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine60:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zcl_event_loop
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zcl_event_loop
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
//  483 #endif
//  484 
//  485 #if !defined ( ZCL_STANDALONE )
//  486 /*********************************************************************
//  487  * @fn      zcl_registerForMsg
//  488  *
//  489  * @brief   The ZCL is setup to send all incoming Foundation Command/Response
//  490  *          messages that aren't processed to one task (if a task is
//  491  *          registered).
//  492  *
//  493  * @param   taskId - task Id of the Application where commands will be sent to
//  494  *
//  495  * @return  TRUE if task registeration successful, FALSE otherwise
//  496  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  497 uint8 zcl_registerForMsg( uint8 taskId )
zcl_registerForMsg:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zcl_registerForMsg
        CODE
//  498 {
        FUNCALL zcl_registerForMsg, zcl_addExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  499   return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
        ; Setup parameters for call to function zcl_addExternalFoundationHandler
        MOV       R2,#-0x1
        LJMP      ?Subroutine1 & 0xFFFF
//  500 }
          CFI EndBlock cfiBlock5
//  501 
//  502 /*********************************************************************
//  503  * @fn      zcl_registerForMsgExt
//  504  *
//  505  * @brief   This function enables a Task to register to recieve all
//  506  *          incoming Foundation Command/Response messages, for a particular
//  507  *          End Point, that aren't processed by ZCL.
//  508  *
//  509  *          NOTE: Any Task registered for a unique end point will take
//  510  *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
//  511  *          value.  ie. If task A registers for End Point 1, task B registers
//  512  *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
//  513  *          sent to Task A and NOT Task B.
//  514  *
//  515  * @param   taskId - task Id of the Application where commands will be sent to
//  516  * @param   endPointId - end point Id of interest
//  517  *
//  518  * @return  TRUE if task registeration successful, FALSE otherwise
//  519  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  520 uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
zcl_registerForMsgExt:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zcl_registerForMsgExt
        CODE
//  521 {
        FUNCALL zcl_registerForMsgExt, zcl_addExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  522   return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
        ; Setup parameters for call to function zcl_addExternalFoundationHandler
        LJMP      ?Subroutine1 & 0xFFFF
//  523 }
          CFI EndBlock cfiBlock6
//  524 
//  525 /*********************************************************************
//  526  * @fn      zcl_addExternalFoundationHandler
//  527  *
//  528  * @brief   This function adds a record to the internal list of external
//  529  *          handlers of unhandled incoming Foundation Command/Response messages.
//  530  *
//  531  * @param   taskId - task Id of the Application where commands will be sent to
//  532  * @param   endPointId - end point Id of interest
//  533  *
//  534  * @return  TRUE if task registeration successful, FALSE otherwise
//  535  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  536 uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
zcl_addExternalFoundationHandler:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
        CODE
//  537 {
        FUNCALL zcl_addExternalFoundationHandler, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_addExternalFoundationHandler, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
//  538   zclExternalFoundationHandlerList *pNewItem;
//  539   zclExternalFoundationHandlerList *pLoop;
//  540   zclExternalFoundationHandlerList *pLoopPrev;
//  541 
//  542   // Fill in the new endpoint registrant list
//  543   pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  544   if ( pNewItem == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zcl_addExternalFoundationHandler_0
//  545   {
//  546     return ( false );
//  547   }
//  548 
//  549   pNewItem->zcl_ExternalEndPoint = endPointId;
        MOV       A,R7
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  550   pNewItem->zcl_ExternalTaskID = taskId;
        MOV       A,R6
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine91 & 0xFFFF
//  551   pNewItem->next = NULL;
??CrossCallReturnLabel_213:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  552 
//  553   // Add to the list
//  554   if ( externalEndPointHandlerList == NULL )
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_223:
        JNZ       ??zcl_addExternalFoundationHandler_1
//  555   {
//  556     externalEndPointHandlerList = pNewItem;
        MOV       DPTR,#externalEndPointHandlerList
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??zcl_addExternalFoundationHandler_2
//  557   }
//  558   else
//  559   {
//  560     // make sure no one else tried to register for this endpoint
//  561     pLoop = externalEndPointHandlerList;
??zcl_addExternalFoundationHandler_1:
        MOVX      A,@DPTR
        MOV       R1,A
//  562     pLoopPrev = externalEndPointHandlerList;
//  563 
//  564     while ( pLoop != NULL )
//  565     {
//  566       if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
??zcl_addExternalFoundationHandler_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??zcl_addExternalFoundationHandler_4
//  567       {
//  568         zcl_mem_free(pNewItem);
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  569         return ( false );
??zcl_addExternalFoundationHandler_0:
        MOV       R1,#0x0
        SJMP      ??zcl_addExternalFoundationHandler_5
//  570       }
//  571       pLoopPrev = pLoop;
??zcl_addExternalFoundationHandler_4:
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
//  572       pLoop = pLoop->next;
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine124_0 & 0xFFFF
//  573     }
??CrossCallReturnLabel_218:
        JNZ       ??zcl_addExternalFoundationHandler_3
//  574 
//  575     if ( endPointId == AF_BROADCAST_ENDPOINT )
        MOV       A,#-0x1
        XRL       A,R7
        JNZ       ??zcl_addExternalFoundationHandler_6
//  576     {
//  577       // put new registration at the end of the list
//  578       pLoopPrev->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine25 & 0xFFFF
//  579       pNewItem->next = NULL;
//  580     }
??CrossCallReturnLabel_23:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??zcl_addExternalFoundationHandler_2
//  581     else
//  582     {
//  583       // put new registration at the front of the list
//  584       zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
??zcl_addExternalFoundationHandler_6:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ??Subroutine135_0 & 0xFFFF
//  585       externalEndPointHandlerList = pNewItem;
??CrossCallReturnLabel_293:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ?Subroutine25 & 0xFFFF
//  586       pNewItem->next = temp;
//  587     }
//  588   }
??CrossCallReturnLabel_24:
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
??zcl_addExternalFoundationHandler_2:
        MOVX      @DPTR,A
//  589 
//  590   return ( true );
        MOV       R1,#0x1
??zcl_addExternalFoundationHandler_5:
        LJMP      ?Subroutine2 & 0xFFFF
//  591 
//  592 }
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zcl_addExternalFoundationHandler
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_214:
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine91:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_213
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zcl_addExternalFoundationHandler
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_23
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zcl_addExternalFoundationHandler
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_24
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-4
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zcl_SendRead
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_6
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zcl_SendWriteRsp
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_7
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclBuildHdr
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_216
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclBuildHdr
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_210
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-4
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclBuildHdr
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_211
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-4
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclBuildHdr
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_212
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//  593 
//  594 /*********************************************************************
//  595  * @fn      zcl_getExternalFoundationHandler
//  596  *
//  597  * @brief   This function retrieves the Task ID of the task registered
//  598  *          to received unhandled incoming Foundation Command/Response messages
//  599  *          for a particular End Point ID.
//  600  *
//  601  * @param   pInMsg - recevied ZCL command
//  602  *
//  603  * @return  TASK ID of registered task.  If no task is reigistered, it returns
//  604  *          TASK_NO_TASK.
//  605  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  606 static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
zcl_getExternalFoundationHandler:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function zcl_getExternalFoundationHandler
        CODE
//  607 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  608   zclExternalFoundationHandlerList *pLoop;
//  609   uint8 addressedEndPointId = pInMsg->endPoint;
        MOV       A,R2
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_140:
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
//  610 
//  611   // make sure no one else tried to register for this endpoint
//  612   pLoop = externalEndPointHandlerList;
        MOV       DPTR,#externalEndPointHandlerList
        SJMP      ??zcl_getExternalFoundationHandler_0
//  613 
//  614   while ( pLoop != NULL )
//  615   {
//  616     if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
//  617          ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
//  618     {
//  619       return ( pLoop->zcl_ExternalTaskID );
//  620     }
//  621     pLoop = pLoop->next;
??zcl_getExternalFoundationHandler_1:
        MOV       DPL,R0
        MOV       DPH,R1
??zcl_getExternalFoundationHandler_0:
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_219:
        JZ        ??zcl_getExternalFoundationHandler_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        XRL       A,R3
        JZ        ??zcl_getExternalFoundationHandler_3
        MOV       A,#-0x1
        XRL       A,R3
        JNZ       ??zcl_getExternalFoundationHandler_1
??zcl_getExternalFoundationHandler_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??zcl_getExternalFoundationHandler_4
//  622   }
//  623 
//  624   return ( TASK_NO_TASK );
??zcl_getExternalFoundationHandler_2:
        MOV       R1,#-0x1
??zcl_getExternalFoundationHandler_4:
        LJMP      ?Subroutine0 & 0xFFFF
//  625 }
          CFI EndBlock cfiBlock21
//  626 #endif
//  627 
//  628 #if !defined ( ZCL_STANDALONE )
//  629 /*********************************************************************
//  630  * @fn      zcl_HandleExternal
//  631  *
//  632  * @brief
//  633  *
//  634  * @param   pInMsg - incoming message to process
//  635  *
//  636  * @return  TRUE
//  637  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  638 uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
zcl_HandleExternal:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zcl_HandleExternal
        CODE
//  639 {
        FUNCALL zcl_HandleExternal, zcl_getExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  640   zclIncomingMsg_t *pCmd;
//  641   uint8 taskID;
//  642 
//  643   taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
        ; Setup parameters for call to function zcl_getExternalFoundationHandler
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_261:
        LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
        MOV       A,R1
        MOV       ?V0,A
//  644 
//  645   if ( taskID == TASK_NO_TASK )
        MOV       A,#-0x1
        XRL       A,?V0
        JNZ       $+5
        LJMP      ??zcl_HandleExternal_0 & 0xFFFF
//  646   {
//  647     return ( TRUE );
//  648   }
//  649 
//  650   pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x19
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  651   if ( pCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zcl_HandleExternal_0 & 0xFFFF
//  652   {
//  653     // fill in the message
//  654     pCmd->hdr.event = ZCL_INCOMING_MSG;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#0x34
        LCALL     ?Subroutine93 & 0xFFFF
//  655     pCmd->zclHdr    = pInMsg->hdr;
??CrossCallReturnLabel_244:
        INC       DPTR
        MOV       A,R2
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  656     pCmd->clusterId = pInMsg->msg->clusterId;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_318:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        LCALL     ?Subroutine18 & 0xFFFF
//  657     pCmd->srcAddr   = pInMsg->msg->srcAddr;
??CrossCallReturnLabel_10:
        INC       DPTR
        MOV       A,R2
        ADD       A,#0xa
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  658     pCmd->endPoint  = pInMsg->msg->endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_305:
        XCH       A,R0
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_141:
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  659     pCmd->attrCmd   = pInMsg->attrCmd;
        MOV       A,R6
        ADD       A,#0xc
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_311:
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  660     
//  661 #ifdef BDB_REPORTING
//  662     if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
//  663     {
//  664       bdb_ProcessInConfigReportCmd(pCmd);
//  665       return TRUE;          
//  666     }
//  667     if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
//  668     {
//  669       bdb_ProcessInReadReportCfgCmd(pCmd);
//  670       return TRUE;
//  671     }
//  672 #endif
//  673     // Application will free the attrCmd buffer
//  674     pInMsg->attrCmd = NULL;
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  675 
//  676     /* send message through task message */
//  677     osal_msg_send( taskID, (uint8 *)pCmd );
        ; Setup parameters for call to function osal_msg_send
        MOV       R1,?V0
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  678   }
//  679 
//  680   return ( TRUE );
??zcl_HandleExternal_0:
        MOV       R1,#0x1
        LJMP      ?Subroutine3 & 0xFFFF
//  681 }
          CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine85:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function zcl_getExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_140
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zcl_HandleExternal
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclRevertWriteUndividedCmd
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclRevertWriteUndividedCmd
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        LCALL     ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_177:
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine108:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zcl_getExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_140
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zcl_HandleExternal
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_141
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclRevertWriteUndividedCmd
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_142
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclRevertWriteUndividedCmd
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_143
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclProcessInReadCmd
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_138
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zclProcessInReadCmd
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_139
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zcl_ProcessMessageMSG
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_32
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-4
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zcl_ProcessMessageMSG
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_33
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclProcessInWriteCmd
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_34
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-4
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclProcessInReadCmd
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_135
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_136
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_137
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclProcessInWriteCmd
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_30
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_31
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42
//  682 #endif
//  683 
//  684 
//  685 /*********************************************************************
//  686  * @fn          zcl_getRawAFMsg
//  687  *
//  688  * @brief       Call to get original unprocessed AF message
//  689  *              (not parsed by ZCL).
//  690  *
//  691  *   NOTE:  This function can only be called during a ZCL callback function
//  692  *          and the calling function must NOT change any data in the message.
//  693  *
//  694  * @param       none
//  695  *
//  696  * @return      pointer to original AF message, NULL if not processing
//  697  *              AF message.
//  698  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  699 afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
zcl_getRawAFMsg:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
        CODE
//  700 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  701   return ( rawAFMsg );
        MOV       DPTR,#rawAFMsg
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_262:
        SJMP      ?Subroutine0
//  702 }
          CFI EndBlock cfiBlock43
//  703 
//  704 /*********************************************************************
//  705  * @fn          zcl_getParsedTransSeqNum
//  706  *
//  707  * @brief       Call to the get the transaction sequence number from
//  708  *              the incoming message.
//  709  *
//  710  *   NOTE:  This function can only be called during a ZCL callback function
//  711  *          and the calling function must NOT change any data in the message.
//  712  *
//  713  * @param       none
//  714  *
//  715  * @return      transaction sequence number.
//  716  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  717 uint8 zcl_getParsedTransSeqNum( void )
zcl_getParsedTransSeqNum:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function zcl_getParsedTransSeqNum
        CODE
//  718 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  719   return ( savedZCLTransSeqNum );
        MOV       DPTR,#savedZCLTransSeqNum
        MOVX      A,@DPTR
        MOV       R1,A
          CFI EndBlock cfiBlock44
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  720 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock45
//  721 
//  722 /*********************************************************************
//  723  * @fn          zcl_registerPlugin
//  724  *
//  725  * @brief       Add a Cluster Library handler
//  726  *
//  727  * @param       startClusterID - starting cluster ID
//  728  * @param       endClusterID - ending cluster ID
//  729  * @param       pfnHdlr - function pointer to incoming message handler
//  730  *
//  731  * @return      ZSuccess if OK
//  732  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  733 ZStatus_t zcl_registerPlugin( uint16 startClusterID,
zcl_registerPlugin:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function zcl_registerPlugin
        CODE
//  734           uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
//  735 {
        FUNCALL zcl_registerPlugin, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  736   zclLibPlugin_t *pNewItem;
//  737   zclLibPlugin_t *pLoop;
//  738 
//  739   // Fill in the new profile list
//  740   pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x8
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  741   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zcl_registerPlugin_0
//  742   {
//  743     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_14
//  744   }
//  745 
//  746   // Fill in the plugin record.
//  747   pNewItem->next = (zclLibPlugin_t *)NULL;
??zcl_registerPlugin_0:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine24 & 0xFFFF
//  748   pNewItem->startClusterID = startClusterID;
??CrossCallReturnLabel_20:
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine13 & 0xFFFF
//  749   pNewItem->endClusterID = endClusterID;
//  750   pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
??CrossCallReturnLabel_4:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_78:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine26 & 0xFFFF
//  751 
//  752   // Find spot in list
//  753   if (  plugins == NULL )
??CrossCallReturnLabel_350:
        MOV       DPTR,#plugins
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_187:
        MOV       DPTR,#plugins
        JZ        ??zcl_registerPlugin_1
//  754   {
//  755     plugins = pNewItem;
//  756   }
//  757   else
//  758   {
//  759     // Look for end of list
//  760     pLoop = plugins;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zcl_registerPlugin_2
//  761     while ( pLoop->next != NULL )
//  762     {
//  763       pLoop = pLoop->next;
??zcl_registerPlugin_3:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
//  764     }
??zcl_registerPlugin_2:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_183:
        JNZ       ??zcl_registerPlugin_3
//  765 
//  766     // Put new item at end of list
//  767     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  768   }
??zcl_registerPlugin_1:
        LCALL     ?Subroutine20 & 0xFFFF
//  769 
//  770   return ( ZSuccess );
??CrossCallReturnLabel_14:
        LJMP      ?Subroutine3 & 0xFFFF
//  771 }
          CFI EndBlock cfiBlock46
//  772 
//  773 #ifdef ZCL_DISCOVER
//  774 /*********************************************************************
//  775  * @fn          zcl_registerCmdList
//  776  *
//  777  * @brief       Register a Command List with ZCL Foundation
//  778  *
//  779  * @param       endpoint - endpoint the attribute list belongs to
//  780  * @param       newCmdList - array of command records
//  781  *
//  782  * @return      ZSuccess if OK
//  783  */
//  784 ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
//  785 {
//  786   zclCmdRecsList_t *pNewItem;
//  787   zclCmdRecsList_t *pLoop;
//  788 
//  789   // Fill in the new profile list
//  790   pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
//  791   if ( pNewItem == NULL )
//  792   {
//  793     return (ZMemError);
//  794   }
//  795 
//  796   pNewItem->pNext = (zclCmdRecsList_t *)NULL;
//  797   pNewItem->endpoint = endpoint;
//  798   pNewItem->numCommands = cmdListSize;
//  799   pNewItem->pCmdRecs = newCmdList;
//  800 
//  801   // Find spot in list
//  802   if ( gpCmdList == NULL )
//  803   {
//  804     gpCmdList = pNewItem;
//  805   }
//  806   else
//  807   {
//  808     // Look for end of list
//  809     pLoop = gpCmdList;
//  810     while ( pLoop->pNext != NULL )
//  811     {
//  812       pLoop = pLoop->pNext;
//  813     }
//  814 
//  815     // Put new item at end of list
//  816     pLoop->pNext = pNewItem;
//  817   }
//  818 
//  819   return ( ZSuccess );
//  820 }
//  821 #endif  // ZCL_DISCOVER
//  822 
//  823 /*********************************************************************
//  824  * @fn          zcl_registerAttrList
//  825  *
//  826  * @brief       Register an Attribute List with ZCL Foundation
//  827  *
//  828  * @param       endpoint - endpoint the attribute list belongs to
//  829  * @param       numAttr - number of attributes in list
//  830  * @param       newAttrList - array of Attribute records.
//  831  *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
//  832  *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
//  833  *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
//  834  *
//  835  * @return      ZSuccess if OK
//  836  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  837 ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
zcl_registerAttrList:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function zcl_registerAttrList
        CODE
//  838 {
        FUNCALL zcl_registerAttrList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  839   zclAttrRecsList *pNewItem;
//  840   zclAttrRecsList *pLoop;
//  841 
//  842   // Fill in the new profile list
//  843   pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xa
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  844   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zcl_registerAttrList_0
//  845   {
//  846     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_15
//  847   }
//  848 
//  849   pNewItem->next = (zclAttrRecsList *)NULL;
??zcl_registerAttrList_0:
        LCALL     ?Subroutine11 & 0xFFFF
//  850   pNewItem->endpoint = endpoint;
//  851   pNewItem->pfnReadWriteCB = NULL;
??CrossCallReturnLabel_2:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine15 & 0xFFFF
//  852   pNewItem->numAttributes = numAttr;
??CrossCallReturnLabel_8:
        MOV       A,?V1
        LCALL     ?Subroutine15 & 0xFFFF
//  853   pNewItem->attrs = newAttrList;
??CrossCallReturnLabel_9:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  854 
//  855   // Find spot in list
//  856   if ( attrList == NULL )
        MOV       DPTR,#attrList
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_188:
        MOV       DPTR,#attrList
        JZ        ??zcl_registerAttrList_1
//  857   {
//  858     attrList = pNewItem;
//  859   }
//  860   else
//  861   {
//  862     // Look for end of list
//  863     pLoop = attrList;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zcl_registerAttrList_2
//  864     while ( pLoop->next != NULL )
//  865     {
//  866       pLoop = pLoop->next;
??zcl_registerAttrList_3:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
//  867     }
??zcl_registerAttrList_2:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_184:
        JNZ       ??zcl_registerAttrList_3
//  868 
//  869     // Put new item at end of list
//  870     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  871   }
??zcl_registerAttrList_1:
        LCALL     ?Subroutine20 & 0xFFFF
//  872 
//  873   return ( ZSuccess );
??CrossCallReturnLabel_15:
        SJMP      ?Subroutine3
//  874 }
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zcl_registerAttrList
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zcl_registerClusterOptionList
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zcl_registerAttrList
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        LCALL     ?Subroutine92 & 0xFFFF
??CrossCallReturnLabel_154:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
//  875 
//  876 /*********************************************************************
//  877  * @fn          zcl_registerClusterOptionList
//  878  *
//  879  * @brief       Register a Cluster Option List with ZCL Foundation
//  880  *
//  881  * @param       endpoint - endpoint the option list belongs to
//  882  * @param       numOption - number of options in list
//  883  * @param       optionList - array of cluster option records.
//  884  *
//  885  *              NOTE: This API should be called to enable 'Application
//  886  *                    Link Key' security and/or 'APS ACK' for a specific
//  887  *                    Cluster. The 'Application Link Key' is discarded
//  888  *                    if security isn't enabled on the device.
//  889  *                    The default behavior is 'Network Key' when security
//  890  *                    is enabled and no 'APS ACK' for the ZCL messages.
//  891  *
//  892  * @return      ZSuccess if OK
//  893  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  894 ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
zcl_registerClusterOptionList:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function zcl_registerClusterOptionList
        CODE
//  895 {
        FUNCALL zcl_registerClusterOptionList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  896   zclClusterOptionList *pNewItem;
//  897   zclClusterOptionList *pLoop;
//  898 
//  899   // Fill in the new profile list
//  900   pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  901   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zcl_registerClusterOptionList_0
//  902   {
//  903     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_16
//  904   }
//  905 
//  906   pNewItem->next = (zclClusterOptionList *)NULL;
??zcl_registerClusterOptionList_0:
        LCALL     ?Subroutine11 & 0xFFFF
//  907   pNewItem->endpoint = endpoint;
//  908   pNewItem->numOptions = numOption;
??CrossCallReturnLabel_3:
        LCALL     ?Subroutine13 & 0xFFFF
//  909   pNewItem->options = optionList;
//  910 
//  911   // Find spot in list
//  912   if ( clusterOptionList == NULL )
??CrossCallReturnLabel_5:
        MOV       DPTR,#clusterOptionList
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_189:
        MOV       DPTR,#clusterOptionList
        JZ        ??zcl_registerClusterOptionList_1
//  913   {
//  914     clusterOptionList = pNewItem;
//  915   }
//  916   else
//  917   {
//  918     // Look for end of list
//  919     pLoop = clusterOptionList;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zcl_registerClusterOptionList_2
//  920     while ( pLoop->next != NULL )
//  921     {
//  922       pLoop = pLoop->next;
??zcl_registerClusterOptionList_3:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
//  923     }
??zcl_registerClusterOptionList_2:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_185:
        JNZ       ??zcl_registerClusterOptionList_3
//  924 
//  925     // Put new item at end of list
//  926     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  927   }
??zcl_registerClusterOptionList_1:
        LCALL     ?Subroutine20 & 0xFFFF
//  928 
//  929   return ( ZSuccess );
??CrossCallReturnLabel_16:
          CFI EndBlock cfiBlock55
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  930 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zcl_registerClusterOptionList
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV       A,?V1
        LCALL     ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_156:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zcl_registerClusterOptionList
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine112 & 0xFFFF
??CrossCallReturnLabel_180:
        INC       DPTR
        MOV       A,?V0
        LCALL     ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_157:
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine94:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zcl_registerClusterOptionList
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_5
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zcl_registerAttrList
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_2
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zcl_registerClusterOptionList
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_3
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        LCALL     ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_178:
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine110:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zcl_registerClusterOptionList
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_5
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-6
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zcl_registerAttrList
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_2
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-6
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zcl_registerClusterOptionList
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_3
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-6
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zcl_registerAttrList
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_8
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-6
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zcl_registerAttrList
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_9
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-6
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zcl_HandleExternal
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_10
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-6
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zcl_registerReadWriteCB
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_11
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-6
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        LCALL     ?Subroutine112 & 0xFFFF
??CrossCallReturnLabel_181:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
//  931 
//  932 /*********************************************************************
//  933  * @fn          zcl_registerValidateAttrData
//  934  *
//  935  * @brief       Add a validation function for attribute data
//  936  *
//  937  * @param       pfnValidateAttrData - function pointer to validate routine
//  938  *
//  939  * @return      ZSuccess if OK
//  940  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  941 ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
zcl_registerValidateAttrData:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function zcl_registerValidateAttrData
        CODE
//  942 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  943   zcl_ValidateAttrDataCB = pfnValidateAttrData;
        MOV       DPTR,#zcl_ValidateAttrDataCB
        LCALL     ??Subroutine142_0 & 0xFFFF
//  944 
//  945   return ( ZSuccess );
??CrossCallReturnLabel_346:
        MOV       R1,#0x0
        LJMP      ?Subroutine0 & 0xFFFF
//  946 }
          CFI EndBlock cfiBlock77
//  947 
//  948 /*********************************************************************
//  949  * @fn          zcl_registerReadWriteCB
//  950  *
//  951  * @brief       Register the application's callback function to read/write
//  952  *              attribute data, and authorize read/write operation.
//  953  *
//  954  *              Note: The pfnReadWriteCB callback function is only required
//  955  *                    when the attribute data format is unknown to ZCL. The
//  956  *                    callback function gets called when the pointer 'dataPtr'
//  957  *                    to the attribute value is NULL in the attribute database
//  958  *                    registered with the ZCL.
//  959  *
//  960  *              Note: The pfnAuthorizeCB callback function is only required
//  961  *                    when the Read/Write operation on an attribute requires
//  962  *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
//  963  *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
//  964  *
//  965  * @param       endpoint - application's endpoint
//  966  * @param       pfnReadWriteCB - function pointer to read/write routine
//  967  * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
//  968  *
//  969  * @return      ZSuccess if successful. ZFailure, otherwise.
//  970  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  971 ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
zcl_registerReadWriteCB:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function zcl_registerReadWriteCB
        CODE
//  972                                    zclAuthorizeCB_t pfnAuthorizeCB )
//  973 {
        FUNCALL zcl_registerReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  974   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
//  975 
//  976   if ( pRec != NULL )
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_registerReadWriteCB_0
//  977   {
//  978     pRec->pfnReadWriteCB = pfnReadWriteCB;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine18 & 0xFFFF
//  979     pRec->pfnAuthorizeCB = pfnAuthorizeCB;
??CrossCallReturnLabel_11:
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  980 
//  981     return ( ZSuccess );
        MOV       R1,#0x0
        SJMP      ??zcl_registerReadWriteCB_1
//  982   }
//  983 
//  984   return ( ZFailure );
??zcl_registerReadWriteCB_0:
        MOV       R1,#0x1
??zcl_registerReadWriteCB_1:
          CFI EndBlock cfiBlock78
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  985 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zcl_registerReadWriteCB
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        LCALL     ?Subroutine92 & 0xFFFF
??CrossCallReturnLabel_155:
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine92:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zcl_registerAttrList
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_9
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zcl_HandleExternal
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_10
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zcl_registerReadWriteCB
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_11
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        LCALL     ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_179:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
//  986 
//  987 /*********************************************************************
//  988  * @fn      zcl_DeviceOperational
//  989  *
//  990  * @brief   Used to see whether or not the device can send or respond
//  991  *          to application level commands.
//  992  *
//  993  * @param   srcEP - source endpoint
//  994  * @param   clusterID - cluster ID
//  995  * @param   frameType - command type
//  996  * @param   cmd - command ID
//  997  *
//  998  * @return  TRUE if device is operational, FALSE otherwise
//  999  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1000 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
zcl_DeviceOperational:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function zcl_DeviceOperational
        CODE
// 1001                                     uint8 frameType, uint8 cmd, uint16 profileID )
// 1002 {
        FUNCALL zcl_DeviceOperational, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_DeviceOperational, zclReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
        MOV       R7,A
// 1003   zclAttrRec_t attrRec;
// 1004   uint8 deviceEnabled = DEVICE_ENABLED; // default value
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1005 
// 1006   (void)profileID;  // Intentionally unreferenced parameter
// 1007 
// 1008   // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
// 1009   // cannot send or respond to application level commands, other than commands
// 1010   // to read or write attributes. Note that the Identify cluster cannot be
// 1011   // disabled, and remains functional regardless of this setting.
// 1012   if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
        MOV       A,R7
        JNZ       ??zcl_DeviceOperational_0
        MOV       A,R5
        CLR       C
        SUBB      A,#0x6
        JC        ??zcl_DeviceOperational_1
// 1013   {
// 1014     return ( TRUE );
// 1015   }
// 1016 
// 1017   if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
??zcl_DeviceOperational_0:
        MOV       A,#0x3
        XRL       A,R2
        ORL       A,R3
        JZ        ??zcl_DeviceOperational_1
// 1018   {
// 1019     return ( TRUE );
// 1020   }
// 1021 
// 1022   // Is device enabled?
// 1023   if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
// 1024                        ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x12
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        JZ        ??zcl_DeviceOperational_2
// 1025   {
// 1026 #ifdef ZCL_READ
// 1027     zclReadAttrData( &deviceEnabled, &attrRec, NULL );
        ; Setup parameters for call to function zclReadAttrData
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 1028 #endif
// 1029   }
// 1030 
// 1031   return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
??zcl_DeviceOperational_2:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zcl_DeviceOperational_3
??zcl_DeviceOperational_1:
        MOV       R1,#0x1
        SJMP      ??zcl_DeviceOperational_4
??zcl_DeviceOperational_3:
        MOV       R1,#0x0
??zcl_DeviceOperational_4:
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP      ?Subroutine3 & 0xFFFF
// 1032 }
          CFI EndBlock cfiBlock88
// 1033 
// 1034 /*********************************************************************
// 1035  * @fn      zcl_SendCommand
// 1036  *
// 1037  * @brief   Used to send Profile and Cluster Specific Command messages.
// 1038  *
// 1039  *          NOTE: The calling application is responsible for incrementing
// 1040  *                the Sequence Number.
// 1041  *
// 1042  * @param   srcEp - source endpoint
// 1043  * @param   destAddr - destination address
// 1044  * @param   clusterID - cluster ID
// 1045  * @param   cmd - command ID
// 1046  * @param   specific - whether the command is Cluster Specific
// 1047  * @param   direction - client/server direction of the command
// 1048  * @param   disableDefaultRsp - disable Default Response command
// 1049  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1050  * @param   seqNumber - identification number for the transaction
// 1051  * @param   cmdFormatLen - length of the command to be sent
// 1052  * @param   cmdFormat - command to be sent
// 1053  *
// 1054  * @return  ZSuccess if OK
// 1055  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1056 ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
zcl_SendCommand:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function zcl_SendCommand
        CODE
// 1057                            uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
// 1058                            uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
// 1059                            uint16 cmdFormatLen, uint8 *cmdFormat )
// 1060 {
        FUNCALL zcl_SendCommand, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclBuildHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V10,R1
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
// 1061   endPointDesc_t *epDesc;
// 1062   zclFrameHdr_t hdr;
// 1063   uint8 *msgBuf;
// 1064   uint16 msgLen;
// 1065   uint8 *pBuf;
// 1066   uint8 options;
// 1067   ZStatus_t status;
// 1068 
// 1069   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V12,R2
        MOV       ?V13,R3
// 1070   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,?V13
        JNZ       ??zcl_SendCommand_0
// 1071   {
// 1072     return ( ZInvalidParameter ); // EMBEDDED RETURN
        MOV       R1,#0x2
        LJMP      ??zcl_SendCommand_1 & 0xFFFF
// 1073   }
// 1074 
// 1075 #if defined ( INTER_PAN )
// 1076   if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
// 1077   {
// 1078     options = AF_TX_OPTIONS_NONE;
// 1079   }
// 1080   else
// 1081 #endif
// 1082   {
// 1083     options = zclGetClusterOption( srcEP, clusterID );
??zcl_SendCommand_0:
        ; Setup parameters for call to function zclGetClusterOption
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V10
        LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV       A,R1
        MOV       ?V7,A
// 1084 
// 1085     // The cluster might not have been defined to use security but if this message
// 1086     // is in response to another message that was using APS security this message
// 1087     // will be sent with APS security
// 1088     if ( !( options & AF_EN_SECURITY ) )
        MOV       C,0xE0 /* A   */.6
        JC        ??zcl_SendCommand_2
// 1089     {
// 1090       afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
        MOV       DPTR,#rawAFMsg
        LCALL     ??Subroutine124_0 & 0xFFFF
// 1091 
// 1092       if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
??CrossCallReturnLabel_220:
        JZ        ??zcl_SendCommand_2
        MOV       A,R0
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zcl_SendCommand_2
// 1093       {
// 1094         options |= AF_EN_SECURITY;
        MOV       A,?V7
        SETB      0xE0 /* A   */.6
        MOV       ?V7,A
// 1095       }
// 1096     }
// 1097   }
// 1098 
// 1099   zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
??zcl_SendCommand_2:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1100 
// 1101   // Not Profile wide command (like READ, WRITE)
// 1102   if ( specific )
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_93:
        JZ        ??zcl_SendCommand_3
// 1103   {
// 1104     hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
        MOVX      A,@DPTR
        ANL       A,#0xfc
        MOVX      @DPTR,A
        MOVX      A,@DPTR
        ORL       A,#0x1
        SJMP      ??zcl_SendCommand_4
// 1105   }
// 1106   else
// 1107   {
// 1108     hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
??zcl_SendCommand_3:
        MOVX      A,@DPTR
        ANL       A,#0xfc
// 1109   }
??zcl_SendCommand_4:
        LCALL     ?Subroutine19 & 0xFFFF
// 1110 
// 1111   if ( ( epDesc->simpleDesc == NULL ) ||
// 1112        ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
// 1113                                 cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
??CrossCallReturnLabel_12:
        LCALL     ??Subroutine123_0 & 0xFFFF
??CrossCallReturnLabel_231:
        JZ        ??zcl_SendCommand_5
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R6
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R4,A
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V10
        LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JNZ       ??zcl_SendCommand_6
// 1114   {
// 1115     return ( ZFailure ); // EMBEDDED RETURN
??zcl_SendCommand_5:
        MOV       R1,#0x1
        LJMP      ??zcl_SendCommand_1 & 0xFFFF
// 1116   }
??zcl_SendCommand_6:
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine124_0 & 0xFFFF
// 1117 
// 1118   // Fill in the Maufacturer Code
// 1119   if ( manuCode != 0 )
??CrossCallReturnLabel_221:
        JZ        ??CrossCallReturnLabel_200
// 1120   {
// 1121     hdr.fc.manuSpecific = 1;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ORL       A,#0x4
        MOVX      @DPTR,A
// 1122     hdr.manuCode = manuCode;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine117_0 & 0xFFFF
// 1123   }
// 1124 
// 1125   // Set the Command Direction
// 1126   if ( direction )
??CrossCallReturnLabel_200:
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_94:
        JZ        ??zcl_SendCommand_7
// 1127   {
// 1128     hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        MOVX      A,@DPTR
        ORL       A,#0x8
        SJMP      ??zcl_SendCommand_8
// 1129   }
// 1130   else
// 1131   {
// 1132     hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zcl_SendCommand_7:
        MOVX      A,@DPTR
        ANL       A,#0xf7
??zcl_SendCommand_8:
        MOVX      @DPTR,A
// 1133   }
// 1134 
// 1135   // Set the Disable Default Response field
// 1136   if ( disableDefaultRsp )
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_95:
        JZ        ??zcl_SendCommand_9
// 1137   {
// 1138     hdr.fc.disableDefaultRsp = 1;
        MOVX      A,@DPTR
        ORL       A,#0x10
        SJMP      ??zcl_SendCommand_10
// 1139   }
// 1140   else
// 1141   {
// 1142     hdr.fc.disableDefaultRsp = 0;
??zcl_SendCommand_9:
        MOVX      A,@DPTR
        ANL       A,#0xef
??zcl_SendCommand_10:
        MOVX      @DPTR,A
// 1143   }
// 1144 
// 1145   // Fill in the Transaction Sequence Number
// 1146   hdr.transSeqNum = seqNum;
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1147 
// 1148   // Fill in the command
// 1149   hdr.commandID = cmd;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
// 1150 
// 1151   // calculate the needed buffer size
// 1152   msgLen = zclCalcHdrSize( &hdr );
        MOV       R0,#0x3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_SendCommand_11
        MOV       R0,#0x5
??zcl_SendCommand_11:
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine76 & 0xFFFF
// 1153   msgLen += cmdFormatLen;
??CrossCallReturnLabel_123:
        ADD       A,?V8
        MOV       R6,A
        CLR       A
        ADDC      A,?V9
        MOV       R7,A
// 1154 
// 1155   // Allocate the buffer needed
// 1156   msgBuf = zcl_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1157   if ( msgBuf != NULL )
        MOV       A,R2
        ORL       A,?V3
        JZ        ??zcl_SendCommand_12
// 1158   {
// 1159     // Fill in the ZCL Header
// 1160     pBuf = zclBuildHdr( &hdr, msgBuf );
        ; Setup parameters for call to function zclBuildHdr
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
// 1161 
// 1162     // Fill in the command frame
// 1163     zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,?V8
        MOV       R5,?V9
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1164 
// 1165     status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
// 1166                              &zcl_TransID, options, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V4,#0x1e
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V4,#zcl_TransID & 0xff
        MOV       ?V5,#(zcl_TransID >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R1,?V7
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,?V14
        MOV       R3,?V15
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       R6,A
// 1167     zcl_mem_free ( msgBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendCommand_13
// 1168   }
// 1169   else
// 1170   {
// 1171     status = ZMemError;
??zcl_SendCommand_12:
        MOV       R6,#0x10
// 1172   }
// 1173 
// 1174   return ( status );
??zcl_SendCommand_13:
        MOV       A,R6
        MOV       R1,A
??zcl_SendCommand_1:
        MOV       A,#0x6
          CFI EndBlock cfiBlock89
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 1175 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Valid
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine76:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function zcl_event_loop
          CFI Conditional ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zcl_SendCommand
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       A,R0
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
// 1176 
// 1177 #ifdef ZCL_READ
// 1178 /*********************************************************************
// 1179  * @fn      zcl_SendRead
// 1180  *
// 1181  * @brief   Send a Read command
// 1182  *
// 1183  * @param   srcEP - Application's endpoint
// 1184  * @param   dstAddr - destination address
// 1185  * @param   clusterID - cluster ID
// 1186  * @param   readCmd - read command to be sent
// 1187  * @param   direction - direction of the command
// 1188  * @param   seqNum - transaction sequence number
// 1189  *
// 1190  * @return  ZSuccess if OK
// 1191  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1192 ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
zcl_SendRead:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function zcl_SendRead
        CODE
// 1193                         uint16 clusterID, zclReadCmd_t *readCmd,
// 1194                         uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
// 1195 {
        FUNCALL zcl_SendRead, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendRead, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendRead, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
// 1196   uint16 dataLen;
// 1197   uint8 *buf;
// 1198   uint8 *pBuf;
// 1199   ZStatus_t status;
// 1200 
// 1201   dataLen = readCmd->numAttr * 2; // Attribute ID
??CrossCallReturnLabel_61:
        ADD       A,0xE0 /* A   */
        MOV       ?V6,A
        CLR       A
        RLC       A
        MOV       ?V7,A
// 1202 
// 1203   buf = zcl_mem_alloc( dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V6
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1204   if ( buf != NULL )
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zcl_SendRead_0 & 0xFFFF
// 1205   {
// 1206     uint8 i;
// 1207 
// 1208     // Load the buffer - serially
// 1209     pBuf = buf;
        MOV       R0,?V0
        MOV       R1,?V1
// 1210     for (i = 0; i < readCmd->numAttr; i++)
        MOV       R4,#0x0
        SJMP      ??zcl_SendRead_1
// 1211     {
// 1212       *pBuf++ = LO_UINT16( readCmd->attrID[i] );
??zcl_SendRead_2:
        MOV       A,R4
        ADD       A,0xE0 /* A   */
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        LCALL     ?Subroutine87 & 0xFFFF
// 1213       *pBuf++ = HI_UINT16( readCmd->attrID[i] );
// 1214     }
??CrossCallReturnLabel_146:
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX      @DPTR,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??zcl_SendRead_3
        INC       R1
??zcl_SendRead_3:
        INC       R4
??zcl_SendRead_1:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,R2
        JC        ??zcl_SendRead_2
// 1215 
// 1216     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
// 1217                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V3,#0x0
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,?V2
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       R6,A
// 1218     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendRead_4
// 1219   }
// 1220   else
// 1221   {
// 1222     status = ZMemError;
??zcl_SendRead_0:
        MOV       R6,#0x10
// 1223   }
// 1224 
// 1225   return ( status );
??zcl_SendRead_4:
          CFI EndBlock cfiBlock94
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1226 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,R6
        MOV       R1,A
          CFI EndBlock cfiBlock95
        REQUIRE ??Subroutine113_0
        ; // Fall through to label ??Subroutine113_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine113_0:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock96
// 1227 
// 1228 /*********************************************************************
// 1229  * @fn      zcl_SendReadRsp
// 1230  *
// 1231  * @brief   Send a Read Response command.
// 1232  *
// 1233  * @param   srcEP - Application's endpoint
// 1234  * @param   dstAddr - destination address
// 1235  * @param   clusterID - cluster ID
// 1236  * @param   readRspCmd - read response command to be sent
// 1237  * @param   direction - direction of the command
// 1238  * @param   seqNum - transaction sequence number
// 1239  *
// 1240  * @return  ZSuccess if OK
// 1241  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1242 ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
zcl_SendReadRsp:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function zcl_SendReadRsp
        CODE
// 1243                            uint16 clusterID, zclReadRspCmd_t *readRspCmd,
// 1244                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1245 {
        FUNCALL zcl_SendReadRsp, zclGetAttrDataLengthUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zclReadAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zclSerializeData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V3,R1
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
// 1246   uint8 *buf;
// 1247   uint16 len = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 1248   ZStatus_t status;
// 1249   uint8 i;
// 1250 
// 1251   // calculate the size of the command
// 1252   for ( i = 0; i < readRspCmd->numAttr; i++ )
        MOV       ?V2,#0x0
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine134_0 & 0xFFFF
??CrossCallReturnLabel_288:
        SJMP      ??zcl_SendReadRsp_0
// 1253   {
// 1254     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1255 
// 1256     len += 2 + 1; // Attribute ID + Status
// 1257 
// 1258     if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1259     {
// 1260       len++; // Attribute Data Type length
// 1261 
// 1262       // Attribute Data length
// 1263       if ( statusRec->data != NULL )
// 1264       {
// 1265         len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
// 1266       }
// 1267       else
// 1268       {
// 1269         len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
??zcl_SendReadRsp_1:
        ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
        LCALL     ?Subroutine55 & 0xFFFF
// 1270       }
??CrossCallReturnLabel_80:
        LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
??zcl_SendReadRsp_2:
        MOV       ?V1,R3
        MOV       A,R6
        ADD       A,R2
        MOV       R6,A
        MOV       A,R7
        ADDC      A,?V1
        MOV       R7,A
??zcl_SendReadRsp_3:
        INC       ?V2
??zcl_SendReadRsp_0:
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_253:
        JNC       ??zcl_SendReadRsp_4
        MOV       A,?V2
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V8
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V9
        LCALL     ?Subroutine88 & 0xFFFF
??CrossCallReturnLabel_148:
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        CLR       A
        ADDC      A,R7
        MOV       R7,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??zcl_SendReadRsp_3
        INC       R6
        MOV       A,R6
        JNZ       ??zcl_SendReadRsp_5
        INC       R7
??zcl_SendReadRsp_5:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_190:
        MOV       DPL,R0
        MOV       DPH,R1
        JZ        ??zcl_SendReadRsp_1
        ; Setup parameters for call to function zclGetAttrDataLength
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        SJMP      ??zcl_SendReadRsp_2
// 1271     }
// 1272   }
// 1273 
// 1274   buf = zcl_mem_alloc( len );
??zcl_SendReadRsp_4:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V4,R2
        MOV       ?V5,R3
// 1275   if ( buf != NULL )
        MOV       A,R2
        ORL       A,?V5
        JNZ       $+5
        LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
// 1276   {
// 1277     // Load the buffer - serially
// 1278     uint8 *pBuf = buf;
// 1279 
// 1280     for ( i = 0; i < readRspCmd->numAttr; i++ )
        MOV       ?V2,#0x0
        SJMP      ??zcl_SendReadRsp_7
// 1281     {
// 1282       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1283 
// 1284       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1285       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1286       *pBuf++ = statusRec->status;
// 1287 
// 1288       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1289       {
// 1290         *pBuf++ = statusRec->dataType;
// 1291 
// 1292         if ( statusRec->data != NULL )
// 1293         {
// 1294           // Copy attribute data to the buffer to be sent out
// 1295           pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
// 1296         }
// 1297         else
// 1298         {
// 1299           uint16 dataLen;
// 1300 
// 1301           // Read attribute data directly into the buffer to be sent out
// 1302           zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
??zcl_SendReadRsp_8:
        ; Setup parameters for call to function zclReadAttrDataUsingCB
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 1303           pBuf += dataLen;
        LCALL     ?Subroutine68 & 0xFFFF
// 1304         }
??CrossCallReturnLabel_298:
        MOV       A,?V0
        ADD       A,R0
        MOV       ?V0,A
        MOV       A,?V1
        ADDC      A,R1
        MOV       ?V1,A
??zcl_SendReadRsp_9:
        INC       ?V2
??zcl_SendReadRsp_7:
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_254:
        JNC       ??zcl_SendReadRsp_10
        MOV       A,?V2
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V8
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V9
        LCALL     ?Subroutine89 & 0xFFFF
??CrossCallReturnLabel_150:
        LCALL     ?Subroutine79 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine105 & 0xFFFF
??CrossCallReturnLabel_169:
        MOVX      @DPTR,A
        LCALL     ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL     ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_114:
        MOVX      @DPTR,A
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??zcl_SendReadRsp_11
        INC       ?V1
??zcl_SendReadRsp_11:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        JNZ       ??zcl_SendReadRsp_9
        MOV       A,R2
        ADD       A,#0x3
        INC       R0
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine79 & 0xFFFF
??CrossCallReturnLabel_127:
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_319:
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,DPL
        ORL       A,DPH
        JNZ       $+5
        LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
        ; Setup parameters for call to function zclSerializeData
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,DPL
        MOV       R3,DPH
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
        MOV       ?V0,R2
        MOV       ?V1,R3
        SJMP      ??zcl_SendReadRsp_9
// 1305       }
// 1306     } // for loop
// 1307 
// 1308     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
// 1309                               direction, disableDefaultRsp, 0, seqNum, len, buf );
??zcl_SendReadRsp_10:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,?V12
        MOV       R3,?V13
        MOV       R1,?V3
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       R6,A
// 1310     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendReadRsp_12
// 1311   }
// 1312   else
// 1313   {
// 1314     status = ZMemError;
??zcl_SendReadRsp_6:
        MOV       R6,#0x10
// 1315   }
// 1316 
// 1317   return ( status );
??zcl_SendReadRsp_12:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        SJMP      ??Subroutine115_0
// 1318 }
          CFI EndBlock cfiBlock97

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine79:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zcl_SendReadRsp
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zcl_SendReadRsp
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        LCALL     ??Subroutine141_0 & 0xFFFF
??CrossCallReturnLabel_341:
        MOV       R2,?V6
        MOV       R3,?V7
        MOV       R1,?V3
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond104 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_183
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zcl_registerAttrList
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_184
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zcl_registerClusterOptionList
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
        REQUIRE ??Subroutine114_0
        ; // Fall through to label ??Subroutine114_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine114_0:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_187
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zcl_registerAttrList
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zcl_registerClusterOptionList
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_189
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zcl_SendReadRsp
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_190
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclFindAttrRecsList
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_186
          CFI (cfiCond112) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond112) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond112) CFA_SP SP+-7
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zclReadAttrData
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_191
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_192
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zcl_registerPlugin
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_183
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zcl_registerAttrList
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_184
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zcl_registerClusterOptionList
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        LCALL     ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_336:
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R2,?V10
        MOV       R3,?V11
          CFI EndBlock cfiBlock119
        REQUIRE ??Subroutine115_0
        ; // Fall through to label ??Subroutine115_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine115_0:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock120
// 1319 #endif // ZCL_READ
// 1320 
// 1321 #ifdef ZCL_WRITE
// 1322 /*********************************************************************
// 1323  * @fn      sendWriteRequest
// 1324  *
// 1325  * @brief   Send a Write command
// 1326  *
// 1327  * @param   dstAddr - destination address
// 1328  * @param   clusterID - cluster ID
// 1329  * @param   writeCmd - write command to be sent
// 1330  * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
// 1331  * @param   direction - direction of the command
// 1332  * @param   seqNum - transaction sequence number
// 1333  *
// 1334  * @return  ZSuccess if OK
// 1335  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1336 ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendWriteRequest:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
        CODE
// 1337                                 zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
// 1338                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1339 {
        FUNCALL zcl_SendWriteRequest, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, zclSerializeData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V3,R1
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
// 1340   uint8 *buf;
// 1341   uint16 dataLen = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 1342   ZStatus_t status;
// 1343   uint8 i;
// 1344 
// 1345   for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV       ?V2,#0x0
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_82:
        SJMP      ??zcl_SendWriteRequest_0
// 1346   {
// 1347     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
??zcl_SendWriteRequest_1:
        MOV       A,?V2
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V4
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V5
        LCALL     ?Subroutine88 & 0xFFFF
// 1348 
// 1349     dataLen += 2 + 1; // Attribute ID + Attribute Type
// 1350 
// 1351     // Attribute Data
// 1352     dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
??CrossCallReturnLabel_149:
        ; Setup parameters for call to function zclGetAttrDataLength
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine53 & 0xFFFF
// 1353   }
??CrossCallReturnLabel_79:
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V1,R3
        MOV       A,R2
        ADD       A,#0x3
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R6
        ADD       A,R0
        MOV       R6,A
        MOV       A,R7
        ADDC      A,R1
        MOV       R7,A
        INC       ?V2
??zcl_SendWriteRequest_0:
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine128_0 & 0xFFFF
??CrossCallReturnLabel_251:
        JC        ??zcl_SendWriteRequest_1
// 1354 
// 1355   buf = zcl_mem_alloc( dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1356   if ( buf != NULL )
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
// 1357   {
// 1358     // Load the buffer - serially
// 1359     uint8 *pBuf = buf;
        MOV       R0,?V0
        MOV       R1,?V1
// 1360     for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV       ?V2,#0x0
        SJMP      ??zcl_SendWriteRequest_3
// 1361     {
// 1362       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
??zcl_SendWriteRequest_4:
        MOV       A,?V2
        MOV       B,#0x5
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        LCALL     ?Subroutine87 & 0xFFFF
??CrossCallReturnLabel_147:
        MOV       ?V12,DPL
        MOV       ?V13,DPH
// 1363 
// 1364       *pBuf++ = LO_UINT16( statusRec->attrID );
        LCALL     ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL     ?Subroutine95 & 0xFFFF
// 1365       *pBuf++ = HI_UINT16( statusRec->attrID );
??CrossCallReturnLabel_158:
        LCALL     ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_107:
        MOVX      @DPTR,A
// 1366       *pBuf++ = statusRec->dataType;
        MOV       A,?V12
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V13
        MOV       R3,A
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_108:
        INC       DPTR
        MOVX      @DPTR,A
// 1367 
// 1368       pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
        ; Setup parameters for call to function zclSerializeData
        MOV       A,R0
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        LCALL     ??Subroutine131_0 & 0xFFFF
// 1369     }
??CrossCallReturnLabel_273:
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       R0,?V10
        MOV       R1,?V11
        INC       ?V2
??zcl_SendWriteRequest_3:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R2
        JC        ??zcl_SendWriteRequest_4
// 1370 
// 1371     status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
// 1372                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_255:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_256:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_257:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_258:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,?V3
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
// 1373     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendWriteRequest_5
// 1374   }
// 1375   else
// 1376   {
// 1377     status = ZMemError;
??zcl_SendWriteRequest_2:
        MOV       R6,#0x10
// 1378   }
// 1379 
// 1380   return ( status);
??zcl_SendWriteRequest_5:
        MOV       A,R6
        MOV       R1,A
        LJMP      ??Subroutine115_0 & 0xFFFF
// 1381 }
          CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine88:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_148
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zcl_SendWriteRequest
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        RET
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine87:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_146
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zcl_SendWriteRequest
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV       A,?V4
        ADD       A,R2
        MOV       DPL,A
        MOV       A,?V5
        ADDC      A,R3
        MOV       DPH,A
        INC       DPTR
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zcl_SendWriteRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        LCALL     ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_335:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130
// 1382 
// 1383 /*********************************************************************
// 1384  * @fn      zcl_SendWriteRsp
// 1385  *
// 1386  * @brief   Send a Write Response command
// 1387  *
// 1388  * @param   dstAddr - destination address
// 1389  * @param   clusterID - cluster ID
// 1390  * @param   wrtieRspCmd - write response command to be sent
// 1391  * @param   direction - direction of the command
// 1392  * @param   seqNum - transaction sequence number
// 1393  *
// 1394  * @return  ZSuccess if OK
// 1395  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1396 ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
zcl_SendWriteRsp:
          CFI Block cfiBlock131 Using cfiCommon0
          CFI Function zcl_SendWriteRsp
        CODE
// 1397                             uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
// 1398                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1399 {
        FUNCALL zcl_SendWriteRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRsp, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
// 1400   uint16 dataLen;
// 1401   uint8 *buf;
// 1402   ZStatus_t status;
// 1403 
// 1404   dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
??CrossCallReturnLabel_62:
        MOV       B,#0x3
        MUL       AB
        MOV       ?V6,A
        MOV       A,B
        MOV       ?V7,A
// 1405 
// 1406   buf = zcl_mem_alloc( dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V6
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1407   if ( buf != NULL )
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
// 1408   {
// 1409     // Load the buffer - serially
// 1410     uint8 i;
// 1411     uint8 *pBuf = buf;
        MOV       R0,?V0
        MOV       R1,?V1
// 1412     for ( i = 0; i < writeRspCmd->numAttr; i++ )
        MOV       R4,#0x0
        SJMP      ??zcl_SendWriteRsp_1
// 1413     {
// 1414       *pBuf++ = writeRspCmd->attrList[i].status;
??zcl_SendWriteRsp_2:
        MOV       A,R4
        MOV       B,#0x3
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        MOV       A,?V4
        ADD       A,R2
        MOV       R2,A
        MOV       A,?V5
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_112:
        MOVX      @DPTR,A
// 1415       *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        JNC       ??zcl_SendWriteRsp_3
        INC       R3
??zcl_SendWriteRsp_3:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine69 & 0xFFFF
// 1416       *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
// 1417     }
??CrossCallReturnLabel_109:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_7:
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R0
        ADD       A,#0x3
        MOV       R0,A
        JNC       ??zcl_SendWriteRsp_4
        INC       R1
??zcl_SendWriteRsp_4:
        INC       R4
??zcl_SendWriteRsp_1:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,R2
        JC        ??zcl_SendWriteRsp_2
// 1418 
// 1419     // If there's only a single status record and its status field is set to
// 1420     // SUCCESS then omit the attribute ID field.
// 1421     if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
        MOV       A,#0x1
        XRL       A,R2
        JNZ       ??zcl_SendWriteRsp_5
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??zcl_SendWriteRsp_5
// 1422     {
// 1423       dataLen = 1;
        MOV       ?V6,#0x1
        MOV       ?V7,#0x0
// 1424     }
// 1425 
// 1426     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
// 1427                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
??zcl_SendWriteRsp_5:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V3,#0x0
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V3,#0x4
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,?V2
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       R6,A
// 1428     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendWriteRsp_6
// 1429   }
// 1430   else
// 1431   {
// 1432     status = ZMemError;
??zcl_SendWriteRsp_0:
        MOV       R6,#0x10
// 1433   }
// 1434 
// 1435   return ( status );
??zcl_SendWriteRsp_6:
        LJMP      ?Subroutine6 & 0xFFFF
// 1436 }
          CFI EndBlock cfiBlock131

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine70:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_110
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zcl_SendWriteRequest
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zcl_SendWriteRsp
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zclParseInWriteRspCmd
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine69:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zcl_SendWriteRequest
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zcl_SendWriteRsp
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zcl_SendRead
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function zcl_SendRead
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zcl_SendWriteRsp
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zcl_SendWriteRsp
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zcl_SendWriteRsp
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zcl_SendWriteRsp
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        LCALL     ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_165:
        MOV       DPL,?V4
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond151 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zcl_SendWriteRsp
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker153 Using cfiCommon1
          CFI (cfiPicker153) NoFunction
          CFI (cfiPicker153) Picker
        LCALL     ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_215:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        RET
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiPicker153
// 1437 #endif // ZCL_WRITE
// 1438 
// 1439 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 1440 /*********************************************************************
// 1441  * @fn      zcl_SendConfigReportCmd
// 1442  *
// 1443  * @brief   Send a Configure Reporting command
// 1444  *
// 1445  * @param   dstAddr - destination address
// 1446  * @param   clusterID - cluster ID
// 1447  * @param   cfgReportCmd - configure reporting command to be sent
// 1448  * @param   direction - direction of the command
// 1449  * @param   seqNum - transaction sequence number
// 1450  *
// 1451  * @return  ZSuccess if OK
// 1452  */
// 1453 ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1454                           uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
// 1455                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1456 {
// 1457   uint8 *buf;
// 1458   uint16 dataLen = 0;
// 1459   ZStatus_t status;
// 1460   uint8 i;
// 1461 
// 1462   // Find out the data length
// 1463   for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1464   {
// 1465     zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1466 
// 1467     dataLen += 1 + 2; // Direction + Attribute ID
// 1468 
// 1469     if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1470     {
// 1471       dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1472 
// 1473       // Find out the size of the Reportable Change field (for Analog data types)
// 1474       if ( zclAnalogDataType( reportRec->dataType ) )
// 1475       {
// 1476         dataLen += zclGetDataTypeLength( reportRec->dataType );
// 1477       }
// 1478     }
// 1479     else
// 1480     {
// 1481       dataLen += 2; // Timeout Period
// 1482     }
// 1483   }
// 1484 
// 1485   buf = zcl_mem_alloc( dataLen );
// 1486   if ( buf != NULL )
// 1487   {
// 1488     // Load the buffer - serially
// 1489     uint8 *pBuf = buf;
// 1490 
// 1491     for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1492     {
// 1493       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1494 
// 1495       *pBuf++ = reportRec->direction;
// 1496       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1497       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1498 
// 1499       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1500       {
// 1501         *pBuf++ = reportRec->dataType;
// 1502         *pBuf++ = LO_UINT16( reportRec->minReportInt );
// 1503         *pBuf++ = HI_UINT16( reportRec->minReportInt );
// 1504         *pBuf++ = LO_UINT16( reportRec->maxReportInt );
// 1505         *pBuf++ = HI_UINT16( reportRec->maxReportInt );
// 1506 
// 1507         if ( zclAnalogDataType( reportRec->dataType ) )
// 1508         {
// 1509           pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
// 1510         }
// 1511       }
// 1512       else
// 1513       {
// 1514         *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
// 1515         *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
// 1516       }
// 1517     } // for loop
// 1518 
// 1519     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
// 1520                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1521     zcl_mem_free( buf );
// 1522   }
// 1523   else
// 1524   {
// 1525     status = ZMemError;
// 1526   }
// 1527 
// 1528   return ( status );
// 1529 }
// 1530 #endif
// 1531 
// 1532 #ifdef ZCL_REPORTING_DEVICE
// 1533 /*********************************************************************
// 1534  * @fn      zcl_SendConfigReportRspCmd
// 1535  *
// 1536  * @brief   Send a Configure Reporting Response command
// 1537  *
// 1538  * @param   dstAddr - destination address
// 1539  * @param   clusterID - cluster ID
// 1540  * @param   cfgReportRspCmd - configure reporting response command to be sent
// 1541  * @param   direction - direction of the command
// 1542  * @param   seqNum - transaction sequence number
// 1543  *
// 1544  * @return  ZSuccess if OK
// 1545  */
// 1546 ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1547                     uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
// 1548                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1549 {
// 1550   uint16 dataLen;
// 1551   uint8 *buf;
// 1552   ZStatus_t status;
// 1553 
// 1554   // Atrribute list (Status, Direction and Attribute ID)
// 1555   dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
// 1556 
// 1557   buf = zcl_mem_alloc( dataLen );
// 1558   if ( buf != NULL )
// 1559   {
// 1560     // Load the buffer - serially
// 1561     uint8 *pBuf = buf;
// 1562     uint8 i;
// 1563 
// 1564     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 1565     {
// 1566       *pBuf++ = cfgReportRspCmd->attrList[i].status;
// 1567       *pBuf++ = cfgReportRspCmd->attrList[i].direction;
// 1568       *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1569       *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1570     }
// 1571 
// 1572     // If there's only a single status record and its status field is set to
// 1573     // SUCCESS then omit the attribute ID field.
// 1574     if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1575     {
// 1576       dataLen = 1;
// 1577     }
// 1578 
// 1579     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1580                               ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
// 1581                               disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1582     zcl_mem_free( buf );
// 1583   }
// 1584   else
// 1585   {
// 1586     status = ZMemError;
// 1587   }
// 1588 
// 1589   return ( status );
// 1590 }
// 1591 #endif
// 1592 
// 1593 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 1594 /*********************************************************************
// 1595  * @fn      zcl_SendReadReportCfgCmd
// 1596  *
// 1597  * @brief   Send a Read Reporting Configuration command
// 1598  *
// 1599  * @param   dstAddr - destination address
// 1600  * @param   clusterID - cluster ID
// 1601  * @param   readReportCfgCmd - read reporting configuration command to be sent
// 1602  * @param   direction - direction of the command
// 1603  * @param   seqNum - transaction sequence number
// 1604  *
// 1605  * @return  ZSuccess if OK
// 1606  */
// 1607 ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1608                   uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
// 1609                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1610 {
// 1611   uint16 dataLen;
// 1612   uint8 *buf;
// 1613   ZStatus_t status;
// 1614 
// 1615   dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
// 1616 
// 1617   buf = zcl_mem_alloc( dataLen );
// 1618   if ( buf != NULL )
// 1619   {
// 1620     // Load the buffer - serially
// 1621     uint8 *pBuf = buf;
// 1622     uint8 i;
// 1623 
// 1624     for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
// 1625     {
// 1626       *pBuf++ = readReportCfgCmd->attrList[i].direction;
// 1627       *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1628       *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1629     }
// 1630 
// 1631     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
// 1632                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1633     zcl_mem_free( buf );
// 1634   }
// 1635   else
// 1636   {
// 1637     status = ZMemError;
// 1638   }
// 1639 
// 1640   return ( status );
// 1641 }
// 1642 #endif
// 1643 
// 1644 #ifdef ZCL_REPORTING_DEVICE
// 1645 /*********************************************************************
// 1646  * @fn      zcl_SendReadReportCfgRspCmd
// 1647  *
// 1648  * @brief   Send a Read Reporting Configuration Response command
// 1649  *
// 1650  * @param   dstAddr - destination address
// 1651  * @param   clusterID - cluster ID
// 1652  * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
// 1653  * @param   direction - direction of the command
// 1654  * @param   seqNum - transaction sequence number
// 1655  *
// 1656  * @return  ZSuccess if OK
// 1657  */
// 1658 ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1659              uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
// 1660              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1661 {
// 1662   uint8 *buf;
// 1663   uint16 dataLen = 0;
// 1664   ZStatus_t status;
// 1665   uint8 i;
// 1666 
// 1667   // Find out the data length
// 1668   for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1669   {
// 1670     zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1671 
// 1672     dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
// 1673 
// 1674     if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1675     {
// 1676       if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1677       {
// 1678         dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1679 
// 1680         // Find out the size of the Reportable Change field (for Analog data types)
// 1681         if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1682         {
// 1683           dataLen += zclGetDataTypeLength( reportRspRec->dataType );
// 1684         }
// 1685       }
// 1686       else
// 1687       {
// 1688         dataLen += 2; // Timeout Period
// 1689       }
// 1690     }
// 1691   }
// 1692 
// 1693   buf = zcl_mem_alloc( dataLen );
// 1694   if ( buf != NULL )
// 1695   {
// 1696     // Load the buffer - serially
// 1697     uint8 *pBuf = buf;
// 1698 
// 1699     for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1700     {
// 1701       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1702 
// 1703       *pBuf++ = reportRspRec->status;
// 1704       *pBuf++ = reportRspRec->direction;
// 1705       *pBuf++ = LO_UINT16( reportRspRec->attrID );
// 1706       *pBuf++ = HI_UINT16( reportRspRec->attrID );
// 1707 
// 1708       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1709       {
// 1710         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1711         {
// 1712           *pBuf++ = reportRspRec->dataType;
// 1713           *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
// 1714           *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
// 1715           *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
// 1716           *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
// 1717 
// 1718           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1719           {
// 1720             pBuf = zclSerializeData( reportRspRec->dataType,
// 1721                                      reportRspRec->reportableChange, pBuf );
// 1722           }
// 1723         }
// 1724         else
// 1725         {
// 1726           *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
// 1727           *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
// 1728         }
// 1729       }
// 1730     }
// 1731 
// 1732     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1733                               ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
// 1734                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1735     zcl_mem_free( buf );
// 1736   }
// 1737   else
// 1738   {
// 1739     status = ZMemError;
// 1740   }
// 1741 
// 1742   return ( status );
// 1743 }
// 1744 
// 1745 /*********************************************************************
// 1746  * @fn      zcl_SendReportCmd
// 1747  *
// 1748  * @brief   Send a Report command
// 1749  *
// 1750  * @param   dstAddr - destination address
// 1751  * @param   clusterID - cluster ID
// 1752  * @param   reportCmd - report command to be sent
// 1753  * @param   direction - direction of the command
// 1754  * @param   seqNum - transaction sequence number
// 1755  *
// 1756  * @return  ZSuccess if OK
// 1757  */
// 1758 ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1759                              uint16 clusterID, zclReportCmd_t *reportCmd,
// 1760                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1761 {
// 1762   uint16 dataLen = 0;
// 1763   uint8 *buf;
// 1764   ZStatus_t status;
// 1765   uint8 i;
// 1766 
// 1767   // calculate the size of the command
// 1768   for ( i = 0; i < reportCmd->numAttr; i++ )
// 1769   {
// 1770     zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1771 
// 1772     dataLen += 2 + 1; // Attribute ID + data type
// 1773 
// 1774     // Attribute Data
// 1775     dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
// 1776   }
// 1777 
// 1778   buf = zcl_mem_alloc( dataLen );
// 1779   if ( buf != NULL )
// 1780   {
// 1781     // Load the buffer - serially
// 1782     uint8 *pBuf = buf;
// 1783 
// 1784     for ( i = 0; i < reportCmd->numAttr; i++ )
// 1785     {
// 1786       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1787 
// 1788       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1789       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1790       *pBuf++ = reportRec->dataType;
// 1791 
// 1792       pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
// 1793     }
// 1794 
// 1795     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
// 1796                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1797     zcl_mem_free( buf );
// 1798   }
// 1799   else
// 1800   {
// 1801     status = ZMemError;
// 1802   }
// 1803 
// 1804   return ( status );
// 1805 }
// 1806 #endif
// 1807 
// 1808 /*********************************************************************
// 1809  * @fn      zcl_SendDefaultRspCmd
// 1810  *
// 1811  * @brief   Send a Default Response command
// 1812  *
// 1813  *          Note: The manufacturer code field should be set if this
// 1814  *          command is being sent in response to a manufacturer specific
// 1815  *          command.
// 1816  *
// 1817  * @param   dstAddr - destination address
// 1818  * @param   clusterID - cluster ID
// 1819  * @param   defaultRspCmd - default response command to be sent
// 1820  * @param   direction - direction of the command
// 1821  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1822  * @param   seqNum - transaction sequence number
// 1823  *
// 1824  * @return  ZSuccess if OK
// 1825  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1826 ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendDefaultRspCmd:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
        CODE
// 1827                                  zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
// 1828                                  uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
// 1829 {
        FUNCALL zcl_SendDefaultRspCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine66 & 0xFFFF
// 1830   uint8 buf[2]; // Command ID and Status;
// 1831 
// 1832   // Load the buffer - serially
// 1833   buf[0] = defaultRspCmd->commandID;
??CrossCallReturnLabel_103:
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL     ?Subroutine24 & 0xFFFF
// 1834   buf[1] = defaultRspCmd->statusCode;
??CrossCallReturnLabel_21:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1835 
// 1836   return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
// 1837                             direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0xb
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ?Subroutine2 & 0xFFFF
// 1838 }
          CFI EndBlock cfiBlock154

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine66:
          CFI Block cfiCond155 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zcl_SendDefaultRspCmd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        LCALL     ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_196:
        RET
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine102:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function zcl_SendDefaultRspCmd
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_103
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zcl_ProcessMessageMSG
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_194
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zcl_ProcessMessageMSG
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_195
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclReadAttrData
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_193
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker163 Using cfiCommon1
          CFI (cfiPicker163) NoFunction
          CFI (cfiPicker163) Picker
        LCALL     ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_309:
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiPicker163

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine62:
          CFI Block cfiCond164 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zcl_SendCommand
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zcl_SendCommand
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zcl_SendDefaultRspCmd
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function zcl_SendDefaultRspCmd
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zclBuildHdr
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker172 Using cfiCommon1
          CFI (cfiPicker172) NoFunction
          CFI (cfiPicker172) Picker
        LCALL     ?Subroutine112 & 0xFFFF
??CrossCallReturnLabel_182:
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiPicker172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine112:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zcl_registerClusterOptionList
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_3
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-4
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zcl_registerPlugin
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-8
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zcl_registerClusterOptionList
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_5
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-8
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zcl_registerAttrList
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_2
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-8
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zcl_registerClusterOptionList
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_3
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-8
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zcl_registerAttrList
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_8
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-8
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zcl_registerAttrList
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_9
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-8
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zcl_HandleExternal
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_10
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-8
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zcl_registerReadWriteCB
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_179, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_11
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-8
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zcl_registerPlugin
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_20
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function zcl_SendDefaultRspCmd
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_21
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-4
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function zclBuildHdr
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_22
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-4
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186
// 1839 
// 1840 #ifdef ZCL_DISCOVER
// 1841 /*********************************************************************
// 1842  * @fn      zcl_SendDiscoverCmdsCmd
// 1843  *
// 1844  * @brief   Send a Discover Commands command
// 1845  *
// 1846  * @param   dstAddr - destination address
// 1847  * @param   clusterID - cluster ID
// 1848  * @param   cmdType - requesting command ID
// 1849  * @param   pDiscoverCmd - discover command to be sent
// 1850  * @param   direction - direction of the command
// 1851  * @param   seqNum - transaction sequence number
// 1852  *
// 1853  * @return  ZSuccess if OK
// 1854  */
// 1855 ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1856                                   uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
// 1857                                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1858 {
// 1859   uint8 payload[2]; // size of startCmdID and maxCmdID
// 1860   ZStatus_t status;
// 1861 
// 1862   payload[0] = pDiscoverCmd->startCmdID;
// 1863   payload[1] = pDiscoverCmd->maxCmdID;
// 1864 
// 1865   // Send message for either commands received or generated
// 1866   if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1867   {
// 1868     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
// 1869                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1870   }
// 1871   else  // generated
// 1872   {
// 1873     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
// 1874                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1875   }
// 1876 
// 1877   return ( status );
// 1878 }
// 1879 
// 1880 /*********************************************************************
// 1881  * @fn      zcl_SendDiscoverCmdsRspCmd
// 1882  *
// 1883  * @brief   Send a Discover Commands Response command
// 1884  *
// 1885  * @param   dstAddr - destination address
// 1886  * @param   clusterID - cluster ID
// 1887  * @param   pDiscoverRspCmd - response command to be sent
// 1888  * @param   direction - direction of the command
// 1889  * @param   seqNum - transaction sequence number
// 1890  *
// 1891  * @return  ZSuccess if OK
// 1892  */
// 1893 ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1894                                       uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
// 1895                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1896 {
// 1897   uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
// 1898   uint8 *pCmdBuf;
// 1899   uint8 i;
// 1900   ZStatus_t status = ZSuccess;
// 1901 
// 1902   // allocate memory
// 1903   pCmdBuf = zcl_mem_alloc( payloadSize );
// 1904   if ( pCmdBuf != NULL )
// 1905   {
// 1906     uint8 *pBuf = pCmdBuf;
// 1907 
// 1908     // Load the buffer - serially
// 1909     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1910     for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
// 1911     {
// 1912       *pBuf++ = pDiscoverRspCmd->pCmdID[i];
// 1913     }
// 1914 
// 1915     // Send response message for either commands received or generated
// 1916     if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1917     {
// 1918       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
// 1919                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1920     }
// 1921     else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
// 1922     {
// 1923       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
// 1924                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1925     }
// 1926 
// 1927     zcl_mem_free( pCmdBuf );
// 1928   }
// 1929   else
// 1930   {
// 1931     status = ZMemError;
// 1932   }
// 1933 
// 1934   return ( status );
// 1935 }
// 1936 
// 1937 /*********************************************************************
// 1938  * @fn      zcl_SendDiscoverAttrsCmd
// 1939  *
// 1940  * @brief   Send a Discover Attributes command
// 1941  *
// 1942  * @param   dstAddr - destination address
// 1943  * @param   clusterID - cluster ID
// 1944  * @param   pDiscoverCmd - discover command to be sent
// 1945  * @param   direction - direction of the command
// 1946  * @param   seqNum - transaction sequence number
// 1947  *
// 1948  * @return  ZSuccess if OK
// 1949  */
// 1950 ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1951                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
// 1952                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1953 {
// 1954   uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
// 1955   uint8 *buf;
// 1956   ZStatus_t status;
// 1957 
// 1958   buf = zcl_mem_alloc( dataLen );
// 1959   if ( buf != NULL )
// 1960   {
// 1961     // Load the buffer - serially
// 1962     uint8 *pBuf = buf;
// 1963     *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
// 1964     *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
// 1965     *pBuf++ = pDiscoverCmd->maxAttrIDs;
// 1966 
// 1967     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
// 1968                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1969     zcl_mem_free( buf );
// 1970   }
// 1971   else
// 1972   {
// 1973     status = ZMemError;
// 1974   }
// 1975 
// 1976   return ( status );
// 1977 }
// 1978 
// 1979 /*********************************************************************
// 1980  * @fn      zcl_SendDiscoverAttrsRspCmd
// 1981  *
// 1982  * @brief   Send a Discover Attributes Response command
// 1983  *
// 1984  * @param   dstAddr - destination address
// 1985  * @param   clusterID - cluster ID
// 1986  * @param   reportRspCmd - report response command to be sent
// 1987  * @param   direction - direction of the command
// 1988  * @param   seqNum - transaction sequence number
// 1989  *
// 1990  * @return  ZSuccess if OK
// 1991  */
// 1992 ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1993                           uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
// 1994                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1995 {
// 1996   uint16 dataLen = 1; // Discovery complete
// 1997   uint8 *buf;
// 1998   ZStatus_t status;
// 1999 
// 2000   // calculate the size of the command
// 2001   dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
// 2002 
// 2003   buf = zcl_mem_alloc( dataLen );
// 2004   if ( buf != NULL )
// 2005   {
// 2006     // Load the buffer - serially
// 2007     uint8 i;
// 2008     uint8 *pBuf = buf;
// 2009 
// 2010     *pBuf++ = pDiscoverRspCmd->discComplete;
// 2011 
// 2012     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 2013     {
// 2014       *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 2015       *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 2016       *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
// 2017     }
// 2018 
// 2019     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
// 2020                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 2021     zcl_mem_free( buf );
// 2022   }
// 2023   else
// 2024   {
// 2025     status = ZMemError;
// 2026   }
// 2027 
// 2028   return ( status );
// 2029 }
// 2030 
// 2031 /*********************************************************************
// 2032  * @fn      zcl_SendDiscoverAttrsExt
// 2033  *
// 2034  * @brief   Send a Discover Attributes Extended command
// 2035  *
// 2036  * @param   dstAddr - destination address
// 2037  * @param   clusterID - cluster ID
// 2038  * @param   pDiscoverAttrsExt:
// 2039  *            - startAttrID: the first attribute to be selected
// 2040  *            - maxAttrIDs: maximum number of returned attributes
// 2041  * @param   direction - direction of the command
// 2042  * @param   seqNum - transaction sequence number
// 2043  *
// 2044  * @return  ZSuccess if OK
// 2045  */
// 2046 ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
// 2047                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
// 2048                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 2049 {
// 2050   uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
// 2051   ZStatus_t status;
// 2052 
// 2053   // Load the buffer - serially
// 2054   buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
// 2055   buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
// 2056   buf[2] = pDiscoverAttrsExt->maxAttrIDs;
// 2057 
// 2058   status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
// 2059                             direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
// 2060 
// 2061   return ( status );
// 2062 }
// 2063 
// 2064 /*********************************************************************
// 2065  * @fn      zcl_SendDiscoverAttrsExtRsp
// 2066  *
// 2067  * @brief   Send a Discover Attributes Extended Response command
// 2068  *
// 2069  * @param   dstAddr - destination address
// 2070  * @param   clusterID - cluster ID
// 2071  * @param   pDiscoverRspCmd:
// 2072  *            - discComplete: indicates whether all requested attributes returned
// 2073  *            - attrID: attribute ID
// 2074  *            - attrDataType: data type of the given attribute
// 2075  *            - attrAccessControl: access control of the given attribute
// 2076  * @param   direction - direction of the command
// 2077  * @param   seqNum - transaction sequence number
// 2078  *
// 2079  * @return  ZSuccess if OK
// 2080  */
// 2081 ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 2082                                       uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
// 2083                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 2084 {
// 2085   uint8 *buf;
// 2086   uint8 i;
// 2087   uint16 dataLen = 1; // Discovery complete
// 2088   ZStatus_t status;
// 2089 
// 2090   // calculate the size of the command
// 2091   dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
// 2092 
// 2093   buf = zcl_mem_alloc( dataLen );
// 2094   if ( buf != NULL )
// 2095   {
// 2096     // Load the buffer - serially
// 2097     uint8 *pBuf = buf;
// 2098     *pBuf++ = pDiscoverRspCmd->discComplete;
// 2099     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 2100     {
// 2101       *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 2102       *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 2103       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
// 2104       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
// 2105     }
// 2106 
// 2107     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
// 2108                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 2109     zcl_mem_free( buf );
// 2110   }
// 2111   else
// 2112   {
// 2113     status = ZMemError;
// 2114   }
// 2115 
// 2116   return ( status );
// 2117 }
// 2118 #endif // ZCL_DISCOVER
// 2119 
// 2120 /*********************************************************************
// 2121  * @fn      zcl_ProcessMessageMSG
// 2122  *
// 2123  * @brief   Data message processor callback.  This function processes
// 2124  *          any incoming data - probably from other devices.  So, based
// 2125  *          on cluster ID, perform the intended action.
// 2126  *
// 2127  * @param   pkt - incoming message
// 2128  *
// 2129  * @return  zclProcMsgStatus_t
// 2130  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2131 zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
zcl_ProcessMessageMSG:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
        CODE
// 2132 {
        FUNCALL zcl_ProcessMessageMSG, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2133   endPointDesc_t *epDesc;
// 2134   zclIncoming_t inMsg;
// 2135   zclLibPlugin_t *pInPlugin;
// 2136   zclDefaultRspCmd_t defautlRspCmd;
// 2137   uint8 options;
// 2138   uint8 securityEnable;
// 2139   uint8 interPanMsg;
// 2140   ZStatus_t status = ZFailure;
// 2141   uint8 defaultResponseSent = FALSE;
        CLR       ?VB.0
// 2142 
// 2143   if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
        MOV       A,R6
        ADD       A,#0x20
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       DPL,R0
        MOV       DPH,A
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#0x3
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??zcl_ProcessMessageMSG_0
// 2144   {
// 2145     return ( ZCL_PROC_INVALID );   // Error, ignore the message
        MOV       R1,#0x1
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2146   }
// 2147 
// 2148   // Initialize
// 2149   rawAFMsg = (afIncomingMSGPacket_t *)pkt;
??zcl_ProcessMessageMSG_0:
        MOV       DPTR,#rawAFMsg
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2150   inMsg.msg = pkt;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2151   inMsg.attrCmd = NULL;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2152   inMsg.pData = NULL;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2153   inMsg.pDataLen = 0;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2154 
// 2155   inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
        MOV       A,R6
        ADD       A,#0x22
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
        ; Setup parameters for call to function zclParseHdr
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_312:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        LCALL     ?Subroutine17 & 0xFFFF
// 2156   inMsg.pDataLen = pkt->cmd.DataLength;
// 2157   inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
??CrossCallReturnLabel_207:
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_263:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
        MOV       R1,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine117_0 & 0xFFFF
// 2158 
// 2159   // Temporary workaround to allow callback functions access to the
// 2160   // transaction sequence number.  Callback functions will call
// 2161   // zcl_getParsedTransSeqNum() to retrieve this number.
// 2162   savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
??CrossCallReturnLabel_201:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPTR,#savedZCLTransSeqNum
        MOVX      @DPTR,A
// 2163 
// 2164   // Find the wanted endpoint
// 2165   epDesc = afFindEndPointDesc( pkt->endPoint );
        MOV       A,R6
        ADD       A,#0x14
        LCALL     ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_131:
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       DPL,R2
        MOV       DPH,R3
// 2166   if ( epDesc == NULL )
        MOV       A,DPL
        ORL       A,DPH
        JNZ       ??zcl_ProcessMessageMSG_2
// 2167   {
// 2168     rawAFMsg = NULL;
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2169     return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
        MOV       R1,#0x2
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2170   }
// 2171 
// 2172   if ( ( epDesc->simpleDesc == NULL ) ||
// 2173        ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
// 2174                                 inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
??zcl_ProcessMessageMSG_2:
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_194:
        JZ        ??zcl_ProcessMessageMSG_3
        MOV       A,R6
        ADD       A,#0x4
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        ; Setup parameters for call to function zcl_DeviceOperational
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R4,A
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        JNZ       ??zcl_ProcessMessageMSG_4
// 2175   {
// 2176     rawAFMsg = NULL;
??zcl_ProcessMessageMSG_3:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2177     return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
        MOV       R1,#0x3
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2178   }
// 2179 
// 2180 #if defined ( INTER_PAN )
// 2181   if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
// 2182   {
// 2183     // No foundation command is supported thru Inter-PAN communication.
// 2184     // But the Light Link cluster uses a different Frame Control format
// 2185     // for it's Inter-PAN messages, where the messages could be confused
// 2186     // with the foundation commands.
// 2187     if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
// 2188     {
// 2189       rawAFMsg = NULL;
// 2190       return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
// 2191     }
// 2192 
// 2193     interPanMsg = TRUE;
// 2194     options = AF_TX_OPTIONS_NONE;
// 2195   }
// 2196   else
// 2197 #endif
// 2198   {
// 2199     interPanMsg = FALSE;
// 2200     options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
??zcl_ProcessMessageMSG_4:
        ; Setup parameters for call to function zclGetClusterOption
        LCALL     ?Subroutine32 & 0xFFFF
// 2201   }
??CrossCallReturnLabel_28:
        LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV       A,R1
        MOV       ?V6,A
// 2202 
// 2203   // Find the appropriate plugin
// 2204   pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_264:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       DPTR,#plugins
        SJMP      ??zcl_ProcessMessageMSG_5
??zcl_ProcessMessageMSG_6:
        MOV       DPL,R0
        MOV       DPH,R1
??zcl_ProcessMessageMSG_5:
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_224:
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_83:
        CLR       C
        MOV       A,R4
        SUBB      A,?V4
        MOV       A,R5
        SUBB      A,?V5
        JC        ??zcl_ProcessMessageMSG_6
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R4
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R5
        JC        ??zcl_ProcessMessageMSG_6
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        JNZ       ??zcl_ProcessMessageMSG_8
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
// 2205 
// 2206   // Local and remote Security options must match except for Default Response command
// 2207   if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
// 2208   {
// 2209     securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
??zcl_ProcessMessageMSG_8:
        MOV       A,?V6
        MOV       C,0xE0 /* A   */.6
        JC        $+5
        LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
        MOV       A,R6
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
// 2210 
// 2211     // Make sure that Clusters specifically defined to use security are received secure,
// 2212     // any other cluster that wants to use APS security will be allowed
// 2213     if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
// 2214     {
// 2215       if ( UNICAST_MSG( inMsg.msg ) )
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_55:
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_232:
        JNZ       ??zcl_ProcessMessageMSG_10
// 2216       {
// 2217         // Send a Default Response command back with no Application Link Key security
// 2218         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV       R4,#0x0
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
// 2219 
// 2220         defautlRspCmd.statusCode = status;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2221         defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine61 & 0xFFFF
// 2222         zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2223                                inMsg.msg->clusterId, &defautlRspCmd,
// 2224                                !inMsg.hdr.fc.direction, true,
// 2225                                inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
??CrossCallReturnLabel_91:
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V4,#0x1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 2226 
// 2227         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV       R4,#0x1
        LCALL     ?Subroutine32 & 0xFFFF
// 2228       }
??CrossCallReturnLabel_29:
        LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
// 2229 
// 2230       rawAFMsg = NULL;
??zcl_ProcessMessageMSG_10:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2231       return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
        MOV       R1,#0x5
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2232     }
// 2233   }
??zcl_ProcessMessageMSG_7:
        MOV       R4,#0x0
        MOV       R5,#0x0
// 2234 
// 2235   // Is this a foundation type message
// 2236   if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
??zcl_ProcessMessageMSG_9:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        ANL       A,#0x3
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
// 2237   {
// 2238     if ( inMsg.hdr.fc.manuSpecific )
        MOV       A,R0
        ANL       A,#0x4
        JZ        ??zcl_ProcessMessageMSG_12
// 2239     {
// 2240       // We don't support any manufacturer specific command
// 2241       status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
        MOV       R6,#-0x7c
        LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
// 2242     }
// 2243     else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
// 2244               ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
??zcl_ProcessMessageMSG_12:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       C
        SUBB      A,#0x17
        JC        $+5
        LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
        MOV       A,R0
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,#0x2
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOV       A,#zclCmdTable & 0xff
        ADD       A,?V2
        MOV       DPL,A
        MOV       A,#(zclCmdTable >> 8) & 0xff
        ADDC      A,?V3
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
// 2245     {
// 2246       zclParseCmd_t parseCmd;
// 2247 
// 2248       parseCmd.endpoint = pkt->endPoint;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2249       parseCmd.dataLen = inMsg.pDataLen;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_265:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine142_0 & 0xFFFF
// 2250       parseCmd.pData = inMsg.pData;
??CrossCallReturnLabel_347:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_266:
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine142_0 & 0xFFFF
// 2251 
// 2252       // Parse the command, remember that the return value is a pointer to allocated memory
// 2253       inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
??CrossCallReturnLabel_348:
        ; Setup parameters for indirect call
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?CALL_IND
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine117_0 & 0xFFFF
// 2254       if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
??CrossCallReturnLabel_202:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_ProcessMessageMSG_15
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,#(zclCmdTable + 2) & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
        ADDC      A,?V1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zcl_ProcessMessageMSG_16
// 2255       {
// 2256         // Process the command
// 2257         if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
        ; Setup parameters for indirect call
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?CALL_IND
// 2258         {
// 2259           // Couldn't find attribute in the table.
// 2260         }
// 2261       }
// 2262 
// 2263       // Free the buffer
// 2264       if ( inMsg.attrCmd )
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_225:
        JZ        ??zcl_ProcessMessageMSG_15
// 2265       {
// 2266         zcl_mem_free( inMsg.attrCmd );
??zcl_ProcessMessageMSG_16:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine132_0 & 0xFFFF
// 2267       }
??CrossCallReturnLabel_267:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2268 
// 2269       if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
??zcl_ProcessMessageMSG_15:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x3
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x5
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x6
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x8
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0xc
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x11
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x13
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0x15
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
        MOV       A,#0xb
        XRL       A,R0
        JZ        ??zcl_ProcessMessageMSG_17
// 2270       {
// 2271         rawAFMsg = NULL;
// 2272         return ( ZCL_PROC_SUCCESS ); // We're done
// 2273       }
// 2274 
// 2275       status = ZSuccess;
        MOV       R6,#0x0
        SJMP      ??zcl_ProcessMessageMSG_13
// 2276     }
// 2277     else
// 2278     {
// 2279       // Unsupported message
// 2280       status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
??zcl_ProcessMessageMSG_14:
        MOV       R6,#-0x7e
        SJMP      ??zcl_ProcessMessageMSG_13
// 2281     }
// 2282   }
// 2283   else  // Not a foundation type message, so it must be specific to the cluster ID.
// 2284   {
// 2285     if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
??zcl_ProcessMessageMSG_11:
        MOV       A,R4
        ORL       A,R5
        JZ        ??zcl_ProcessMessageMSG_18
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_195:
        JZ        ??zcl_ProcessMessageMSG_18
// 2286     {
// 2287       // The return value of the plugin function will be
// 2288       //  ZSuccess - Supported and need default response
// 2289       //  ZFailure - Unsupported
// 2290       //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
// 2291       //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
// 2292       //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
// 2293       //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
// 2294       status = pInPlugin->pfnIncomingHdlr( &inMsg );
        ; Setup parameters for indirect call
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?CALL_IND
        MOV       A,R1
        MOV       R6,A
// 2295       if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
        MOV       A,#-0x1
        XRL       A,R6
        JNZ       ??zcl_ProcessMessageMSG_19
// 2296       {
// 2297         rawAFMsg = NULL;
??zcl_ProcessMessageMSG_17:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2298         return ( ZCL_PROC_SUCCESS ); // We're done
        MOV       R1,A
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2299       }
// 2300     }
// 2301 
// 2302     if ( status == ZFailure )
??zcl_ProcessMessageMSG_19:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??zcl_ProcessMessageMSG_13
// 2303     {
// 2304       // Unsupported message
// 2305       if ( inMsg.hdr.fc.manuSpecific )
??zcl_ProcessMessageMSG_18:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_ProcessMessageMSG_20
// 2306       {
// 2307         status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
        MOV       R6,#-0x7d
        SJMP      ??zcl_ProcessMessageMSG_13
// 2308       }
// 2309       else
// 2310       {
// 2311         status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
??zcl_ProcessMessageMSG_20:
        MOV       R6,#-0x7f
// 2312       }
// 2313     }
// 2314   }
// 2315 
// 2316   if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
??zcl_ProcessMessageMSG_13:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_56:
        JNZ       ??zcl_ProcessMessageMSG_21
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_233:
        JNZ       ??zcl_ProcessMessageMSG_21
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        ANL       A,#0x10
        JNZ       ??zcl_ProcessMessageMSG_21
// 2317   {
// 2318     // Send a Default Response command back
// 2319     defautlRspCmd.statusCode = status;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
// 2320     defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine61 & 0xFFFF
// 2321     zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2322                            inMsg.msg->clusterId, &defautlRspCmd,
// 2323                            !inMsg.hdr.fc.direction, true,
// 2324                            inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
??CrossCallReturnLabel_92:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,R2
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        XRL       A,#0x1
        ANL       A,#0x1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 2325     defaultResponseSent = TRUE;
        SETB      ?VB.0
// 2326   }
// 2327 
// 2328   rawAFMsg = NULL;
??zcl_ProcessMessageMSG_21:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2329   if ( status == ZSuccess )
        MOV       A,R6
        JNZ       ??zcl_ProcessMessageMSG_22
// 2330   {
// 2331     return ( ZCL_PROC_SUCCESS );
        MOV       R1,#0x0
        SJMP      ??zcl_ProcessMessageMSG_1
// 2332   }
// 2333   else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
??zcl_ProcessMessageMSG_22:
        MOV       A,#-0x7c
        XRL       A,R6
        MOV       C,?VB.0
        JNZ       ??zcl_ProcessMessageMSG_23
// 2334   {
// 2335     if ( defaultResponseSent )
        JNC       ??zcl_ProcessMessageMSG_24
// 2336     {
// 2337       return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
        MOV       R1,#0x7
        SJMP      ??zcl_ProcessMessageMSG_1
// 2338     }
// 2339     else
// 2340     {
// 2341       return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
??zcl_ProcessMessageMSG_24:
        MOV       R1,#0x6
        SJMP      ??zcl_ProcessMessageMSG_1
// 2342     }
// 2343   }
// 2344   else
// 2345   {
// 2346     if ( defaultResponseSent )
??zcl_ProcessMessageMSG_23:
        JNC       ??zcl_ProcessMessageMSG_25
// 2347     {
// 2348       return ( ZCL_PROC_NOT_HANDLED_DR );
        MOV       R1,#0x9
        SJMP      ??zcl_ProcessMessageMSG_1
// 2349     }
// 2350     else
// 2351     {
// 2352       return ( ZCL_PROC_NOT_HANDLED );
??zcl_ProcessMessageMSG_25:
        MOV       R1,#0x8
??zcl_ProcessMessageMSG_1:
        MOV       A,#0x15
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2353     }
// 2354   }
        LJMP      ?Subroutine8 & 0xFFFF
// 2355 }
          CFI EndBlock cfiBlock187

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine81:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function zcl_event_loop
          CFI Conditional ??CrossCallReturnLabel_130
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zcl_ProcessMessageMSG
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        ; Setup parameters for call to function afFindEndPointDesc
        MOV       DPL,?V0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine61:
          CFI Block cfiCond191 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zcl_ProcessMessageMSG
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV       A,#0x8
        RET
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond194 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zcl_ProcessMessageMSG
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiPicker196 Using cfiCommon1
          CFI (cfiPicker196) NoFunction
          CFI (cfiPicker196) Picker
        MOVX      A,@DPTR
        ADD       A,#0x6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        MOV       A,#0x9
        RET
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiPicker196

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond197 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zcl_ProcessMessageMSG
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zcl_ReadAttrData
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        LCALL     ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_166:
        RET
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine100:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zcl_SendWriteRsp
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_62
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zcl_SendWriteRequest
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_82
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zcl_ProcessMessageMSG
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_83
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-4
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function zcl_ReadAttrData
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_84
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-4
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function zcl_SendCommand
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_35
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-4
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zclWriteAttrData
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_36
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-4
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zclRevertWriteUndividedCmd
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_37
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-4
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function zcl_ProcessMessageMSG
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        LCALL     ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_307:
        XCH       A,R0
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond213 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zcl_SendReadRsp
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zcl_SendReadRsp
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zcl_SendDefaultRspCmd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function zcl_SendDefaultRspCmd
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function zcl_SendDefaultRspCmd
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function zcl_ProcessMessageMSG
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zclProcessInWriteCmd
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker221 Using cfiCommon1
          CFI (cfiPicker221) NoFunction
          CFI (cfiPicker221) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiPicker221

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond222 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function zcl_ProcessMessageMSG
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        LCALL     ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_161:
        LCALL     ?Subroutine98 & 0xFFFF
??CrossCallReturnLabel_343:
        MOV       A,#0x9
        RET
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zcl_ProcessMessageMSG
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zcl_ProcessMessageMSG
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_334:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_194
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function zcl_ProcessMessageMSG
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_195
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker231 Using cfiCommon1
          CFI (cfiPicker231) NoFunction
          CFI (cfiPicker231) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiPicker231
        REQUIRE ??Subroutine116_0
        ; // Fall through to label ??Subroutine116_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine116_0:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function zclReadAttrData
          CFI Conditional ??CrossCallReturnLabel_193
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zcl_ProcessMessageMSG
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_194
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function zcl_ProcessMessageMSG
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_195
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker235 Using cfiCommon1
          CFI (cfiPicker235) NoFunction
          CFI (cfiPicker235) Picker
        LCALL     ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_197:
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiPicker235

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond236 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_205
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238
        REQUIRE ??Subroutine117_0
        ; // Fall through to label ??Subroutine117_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine117_0:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_200
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zcl_ProcessMessageMSG
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zcl_ProcessMessageMSG
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_202
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zclProcessInReadCmd
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_203
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_204
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond243) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function zclProcessInReadCmd
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_205
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond245) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker246 Using cfiCommon1
          CFI (cfiPicker246) NoFunction
          CFI (cfiPicker246) Picker
        MOV       A,R0
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiPicker246
        REQUIRE ??Subroutine118_0
        ; // Fall through to label ??Subroutine118_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine118_0:
          CFI Block cfiCond247 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_198
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function zclParseInReadRspCmd
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_199
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond248) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function zcl_SendCommand
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_200
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond249) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond249) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond249) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond249) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond249) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function zcl_ProcessMessageMSG
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function zcl_ProcessMessageMSG
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_202
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function zclProcessInReadCmd
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_203
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_204
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zclProcessInReadCmd
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_205
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond257 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_207
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function zclParseInWriteCmd
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_208
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond258) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker259 Using cfiCommon1
          CFI (cfiPicker259) NoFunction
          CFI (cfiPicker259) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiPicker259
        REQUIRE ??Subroutine119_0
        ; // Fall through to label ??Subroutine119_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine119_0:
          CFI Block cfiCond260 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_209
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function zcl_ProcessMessageMSG
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_207
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-2
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function zclParseInWriteCmd
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_208
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond262) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond262) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        RET
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263
// 2356 
// 2357 /*********************************************************************
// 2358  * PRIVATE FUNCTIONS
// 2359  *********************************************************************/
// 2360 
// 2361 /*********************************************************************
// 2362  * @fn      zclParseHdr
// 2363  *
// 2364  * @brief   Parse header of the ZCL format
// 2365  *
// 2366  * @param   hdr - place to put the frame control information
// 2367  * @param   pData - incoming buffer to parse
// 2368  *
// 2369  * @return  pointer past the header
// 2370  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2371 uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclParseHdr:
          CFI Block cfiBlock264 Using cfiCommon0
          CFI Function zclParseHdr
        CODE
// 2372 {
        FUNCALL zclParseHdr, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2373   // Clear the header
// 2374   zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2375 
// 2376   // Parse the Frame Control
// 2377   hdr->fc.type = zcl_FCType( *pData );
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xfc
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R2,A
        MOV       A,R0
        ORL       A,R2
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine22 & 0xFFFF
// 2378   hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
??CrossCallReturnLabel_17:
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclParseHdr_0
        SETB      B.0
        SJMP      ??zclParseHdr_1
??zclParseHdr_0:
        CLR       B.0
??zclParseHdr_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xfb
        MOVX      @DPTR,A
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,#0x2
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOVX      A,@DPTR
        ORL       A,?V2
        LCALL     ?Subroutine22 & 0xFFFF
// 2379   if ( zcl_FCDirection( *pData ) )
??CrossCallReturnLabel_18:
        MOV       C,0xE0 /* A   */.3
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNC       ??zclParseHdr_2
// 2380   {
// 2381     hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        ORL       A,#0x8
        SJMP      ??zclParseHdr_3
// 2382   }
// 2383   else
// 2384   {
// 2385     hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zclParseHdr_2:
        ANL       A,#0xf7
// 2386   }
??zclParseHdr_3:
        LCALL     ?Subroutine22 & 0xFFFF
// 2387 
// 2388   hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
??CrossCallReturnLabel_19:
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclParseHdr_4
        SETB      B.0
        SJMP      ??zclParseHdr_5
??zclParseHdr_4:
        CLR       B.0
??zclParseHdr_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xef
        MOVX      @DPTR,A
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       A,#0x4
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOVX      A,@DPTR
        ORL       A,?V2
        LCALL     ??Subroutine127_0 & 0xFFFF
// 2389   pData++;  // move past the frame control field
// 2390 
// 2391   // parse the manfacturer code
// 2392   if ( hdr->fc.manuSpecific )
??CrossCallReturnLabel_241:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclParseHdr_6
// 2393   {
// 2394     hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine118_0 & 0xFFFF
// 2395     pData += 2;
??CrossCallReturnLabel_198:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclParseHdr_6
        INC       R7
// 2396   }
// 2397 
// 2398   // parse the Transaction Sequence Number
// 2399   hdr->transSeqNum = *pData++;
??zclParseHdr_6:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_115:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine125_0 & 0xFFFF
// 2400 
// 2401   // parse the Cluster's command ID
// 2402   hdr->commandID = *pData++;
??CrossCallReturnLabel_236:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2403 
// 2404   // Should point to the frame payload
// 2405   return ( pData );
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LJMP      ?Subroutine3 & 0xFFFF
// 2406 }
          CFI EndBlock cfiBlock264

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine71:
          CFI Block cfiCond265 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function zclParseHdr
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker267 Using cfiCommon1
          CFI (cfiPicker267) NoFunction
          CFI (cfiPicker267) Picker
        LCALL     ?Subroutine105 & 0xFFFF
??CrossCallReturnLabel_170:
        INC       DPTR
        RET
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiPicker267

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine105:
          CFI Block cfiCond268 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_169
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function zcl_SendReadRsp
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_114
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond269) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-4
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function zclParseHdr
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_115
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-4
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker271 Using cfiCommon1
          CFI (cfiPicker271) NoFunction
          CFI (cfiPicker271) Picker
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        RET
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiPicker271

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond272 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function zclParseHdr
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function zclParseHdr
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker275 Using cfiCommon1
          CFI (cfiPicker275) NoFunction
          CFI (cfiPicker275) Picker
        LCALL     ?Subroutine109 & 0xFFFF
??CrossCallReturnLabel_247:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiPicker275
// 2407 
// 2408 /*********************************************************************
// 2409  * @fn      zclBuildHdr
// 2410  *
// 2411  * @brief   Build header of the ZCL format
// 2412  *
// 2413  * @param   hdr - outgoing header information
// 2414  * @param   pData - outgoing header space
// 2415  *
// 2416  * @return  pointer past the header
// 2417  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2418 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclBuildHdr:
          CFI Block cfiBlock276 Using cfiCommon0
          CFI Function zclBuildHdr
        CODE
// 2419 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2420   // Build the Frame Control byte
// 2421   *pData = hdr->fc.type;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine120_0 & 0xFFFF
// 2422   *pData |= hdr->fc.manuSpecific << 2;
??CrossCallReturnLabel_212:
        ANL       A,#0x4
        LCALL     ?Subroutine21 & 0xFFFF
// 2423   *pData |= hdr->fc.direction << 3;
??CrossCallReturnLabel_210:
        ANL       A,#0x8
        LCALL     ?Subroutine21 & 0xFFFF
// 2424   *pData |= hdr->fc.disableDefaultRsp << 4;
??CrossCallReturnLabel_211:
        ANL       A,#0x10
        MOV       R0,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
// 2425   pData++;  // move past the frame control field
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
// 2426 
// 2427   // Add the manfacturer code
// 2428   if ( hdr->fc.manuSpecific )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclBuildHdr_0
// 2429   {
// 2430     *pData++ = LO_UINT16( hdr->manuCode );
        LCALL     ?Subroutine80 & 0xFFFF
// 2431     *pData++ = HI_UINT16( hdr->manuCode );
// 2432   }
??CrossCallReturnLabel_129:
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       R4,A
        JNC       ??zclBuildHdr_0
        INC       R5
// 2433 
// 2434   // Add the Transaction Sequence Number
// 2435   *pData++ = hdr->transSeqNum;
??zclBuildHdr_0:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine91 & 0xFFFF
// 2436 
// 2437   // Add the Cluster's command ID
// 2438   *pData++ = hdr->commandID;
??CrossCallReturnLabel_216:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine64 & 0xFFFF
// 2439 
// 2440   // Should point to the frame payload
// 2441   return ( pData );
??CrossCallReturnLabel_99:
        MOV       R2,A
        CLR       A
        ADDC      A,R5
        MOV       R3,A
        SJMP      ??Subroutine121_0
// 2442 }
          CFI EndBlock cfiBlock276

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine80:
          CFI Block cfiCond277 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_128
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function zclBuildHdr
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-2
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker279 Using cfiCommon1
          CFI (cfiPicker279) NoFunction
          CFI (cfiPicker279) Picker
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiPicker279

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine64:
          CFI Block cfiCond280 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_100
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function zclBuildHdr
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker282 Using cfiCommon1
          CFI (cfiPicker282) NoFunction
          CFI (cfiPicker282) Picker
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R4
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiPicker282

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond283 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_210
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function zclBuildHdr
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-2
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker285 Using cfiCommon1
          CFI (cfiPicker285) NoFunction
          CFI (cfiPicker285) Picker
        MOV       R0,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ORL       A,R0
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiPicker285
        REQUIRE ??Subroutine120_0
        ; // Fall through to label ??Subroutine120_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine120_0:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_212
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function zclBuildHdr
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function zclBuildHdr
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker289 Using cfiCommon1
          CFI (cfiPicker289) NoFunction
          CFI (cfiPicker289) Picker
        LCALL     ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_217:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiPicker289

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock290 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
          CFI EndBlock cfiBlock290
        REQUIRE ??Subroutine121_0
        ; // Fall through to label ??Subroutine121_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine121_0:
          CFI Block cfiBlock291 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock291
// 2443 
// 2444 /*********************************************************************
// 2445  * @fn      zclCalcHdrSize
// 2446  *
// 2447  * @brief   Calculate the number of bytes needed for an outgoing
// 2448  *          ZCL header.
// 2449  *
// 2450  * @param   hdr - outgoing header information
// 2451  *
// 2452  * @return  returns the number of bytes needed
// 2453  */
// 2454 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
// 2455 {
// 2456   uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
// 2457 
// 2458   // Add the manfacturer code
// 2459   if ( hdr->fc.manuSpecific )
// 2460   {
// 2461     needed += 2;
// 2462   }
// 2463 
// 2464   return ( needed );
// 2465 }
// 2466 
// 2467 /*********************************************************************
// 2468  * @fn      zclFindPlugin
// 2469  *
// 2470  * @brief   Find the right plugin for a cluster ID
// 2471  *
// 2472  * @param   clusterID - cluster ID to look for
// 2473  * @param   profileID - profile ID
// 2474  *
// 2475  * @return  pointer to plugin, NULL if not found
// 2476  */
// 2477 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
// 2478 {
// 2479   zclLibPlugin_t *pLoop = plugins;
// 2480 
// 2481   (void)profileID;  // Intentionally unreferenced parameter
// 2482 
// 2483   while ( pLoop != NULL )
// 2484   {
// 2485     if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
// 2486     {
// 2487       return ( pLoop );
// 2488     }
// 2489 
// 2490     pLoop = pLoop->next;
// 2491   }
// 2492 
// 2493   return ( (zclLibPlugin_t *)NULL );
// 2494 }
// 2495 
// 2496 #ifdef ZCL_DISCOVER
// 2497 /*********************************************************************
// 2498  * @fn      zclFindCmdRecsList
// 2499  *
// 2500  * @brief   Find the right command record list for an endpoint
// 2501  *
// 2502  * @param   endpoint - endpoint to look for
// 2503  *
// 2504  * @return  pointer to record list, NULL if not found
// 2505  */
// 2506 static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
// 2507 {
// 2508   zclCmdRecsList_t *pLoop = gpCmdList;
// 2509 
// 2510   while ( pLoop != NULL )
// 2511   {
// 2512     if ( pLoop->endpoint == endpoint )
// 2513     {
// 2514       return ( pLoop );
// 2515     }
// 2516 
// 2517     pLoop = pLoop->pNext;
// 2518   }
// 2519 
// 2520   return ( NULL );
// 2521 }
// 2522 
// 2523 /*********************************************************************
// 2524  * @fn      zclFindCmdRec
// 2525  *
// 2526  * @brief   Find the command record that matchs the parameters
// 2527  *
// 2528  * @param   endpoint - Application's endpoint
// 2529  * @param   clusterID - cluster ID
// 2530  * @param   attrId - attribute looking for
// 2531  * @param   pAttr - attribute record to be returned
// 2532  *
// 2533  * @return  TRUE if record found. FALSE, otherwise.
// 2534  */
// 2535 uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
// 2536 {
// 2537   uint8 i;
// 2538   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2539 
// 2540   if ( pRec != NULL )
// 2541   {
// 2542     for ( i = 0; i < pRec->numCommands; i++ )
// 2543     {
// 2544       if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
// 2545       {
// 2546         *pCmd = pRec->pCmdRecs[i];
// 2547 
// 2548         return ( TRUE ); // EMBEDDED RETURN
// 2549       }
// 2550     }
// 2551   }
// 2552 
// 2553   return ( FALSE );
// 2554 }
// 2555 #endif // ZCL_DISCOVER
// 2556 
// 2557 /*********************************************************************
// 2558  * @fn      zclFindAttrRecsList
// 2559  *
// 2560  * @brief   Find the right attribute record list for an endpoint
// 2561  *
// 2562  * @param   clusterID - endpointto look for
// 2563  *
// 2564  * @return  pointer to record list, NULL if not found
// 2565  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2566 zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
zclFindAttrRecsList:
          CFI Block cfiBlock292 Using cfiCommon0
          CFI Function zclFindAttrRecsList
        CODE
// 2567 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2568   zclAttrRecsList *pLoop = attrList;
        MOV       DPTR,#attrList
        SJMP      ??zclFindAttrRecsList_0
// 2569 
// 2570   while ( pLoop != NULL )
// 2571   {
// 2572     if ( pLoop->endpoint == endpoint )
// 2573     {
// 2574       return ( pLoop );
// 2575     }
// 2576 
// 2577     pLoop = pLoop->next;
??zclFindAttrRecsList_1:
        MOV       DPL,R2
        MOV       DPH,R3
??zclFindAttrRecsList_0:
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_186:
        JZ        ??zclFindAttrRecsList_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??zclFindAttrRecsList_1
        SJMP      ??zclFindAttrRecsList_3
// 2578   }
// 2579 
// 2580   return ( NULL );
??zclFindAttrRecsList_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclFindAttrRecsList_3:
        LJMP      ?Subroutine0 & 0xFFFF
// 2581 }
          CFI EndBlock cfiBlock292
// 2582 
// 2583 /*********************************************************************
// 2584  * @fn      zclFindAttrRec
// 2585  *
// 2586  * @brief   Find the attribute record that matchs the parameters
// 2587  *
// 2588  * @param   endpoint - Application's endpoint
// 2589  * @param   clusterID - cluster ID
// 2590  * @param   attrId - attribute looking for
// 2591  * @param   pAttr - attribute record to be returned
// 2592  *
// 2593  * @return  TRUE if record found. FALSE, otherwise.
// 2594  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2595 uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
zclFindAttrRec:
          CFI Block cfiBlock293 Using cfiCommon0
          CFI Function zclFindAttrRec
        CODE
// 2596 {
        FUNCALL zclFindAttrRec, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2597   uint8 x;
// 2598   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V4,R2
        MOV       ?V5,R3
// 2599 
// 2600   if ( pRec != NULL )
        MOV       A,R2
        ORL       A,?V5
        JZ        ??zclFindAttrRec_0
// 2601   {
// 2602     for ( x = 0; x < pRec->numAttributes; x++ )
        MOV       R4,#0x0
        SJMP      ??zclFindAttrRec_1
??zclFindAttrRec_2:
        INC       R4
??zclFindAttrRec_1:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JNC       ??zclFindAttrRec_0
// 2603     {
// 2604       if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
        MOV       A,R4
        MOV       ?V6,A
        MOV       ?V7,#0x0
        MOV       A,#0x3
        MOV       R0,#?V6
        LCALL     ?S_SHL
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,?V6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R3,A
        MOV       A,?V0
        XRL       A,R2
        JNZ       ??zclFindAttrRec_3
        MOV       A,?V1
        XRL       A,R3
??zclFindAttrRec_3:
        JNZ       ??zclFindAttrRec_2
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R3,A
        MOV       A,R6
        XRL       A,R2
        JNZ       ??zclFindAttrRec_4
        MOV       A,R7
        XRL       A,R3
??zclFindAttrRec_4:
        JNZ       ??zclFindAttrRec_2
// 2605       {
// 2606         *pAttr = pRec->attrs[x];
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_313:
        MOV       DPH,R1
        MOV       DPL,R0
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_CODE
// 2607 
// 2608         return ( TRUE ); // EMBEDDED RETURN
        MOV       R1,#0x1
        SJMP      ??zclFindAttrRec_5
// 2609       }
// 2610     }
// 2611   }
// 2612 
// 2613   return ( FALSE );
??zclFindAttrRec_0:
        MOV       R1,#0x0
??zclFindAttrRec_5:
        SJMP      ??Subroutine122_0
// 2614 }
          CFI EndBlock cfiBlock293

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiBlock294 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock294
        REQUIRE ??Subroutine122_0
        ; // Fall through to label ??Subroutine122_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine122_0:
          CFI Block cfiBlock295 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock295
// 2615 
// 2616 #if defined ( ZCL_STANDALONE )
// 2617 /*********************************************************************
// 2618  * @fn      zclSetAttrRecList
// 2619  *
// 2620  * @brief   Set attribute record list for end point
// 2621  *
// 2622  * @param   endpoint - endpoint the attribute list belongs to
// 2623  * @param   numAttr - number of attributes in list
// 2624  * @param   attrList - array of attribute records.
// 2625  *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
// 2626  *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
// 2627  *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
// 2628  *                     ATTRIBUTE INFO
// 2629  *
// 2630  * @return  TRUE if successful, FALSE otherwise.
// 2631  */
// 2632 uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
// 2633 {
// 2634   zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
// 2635 
// 2636   if ( pRecsList != NULL )
// 2637   {
// 2638     pRecsList->numAttributes = numAttr;
// 2639     pRecsList->attrs = attrList;
// 2640     return ( TRUE );
// 2641   }
// 2642 
// 2643   return ( FALSE );
// 2644 }
// 2645 
// 2646 #endif // ZCL_STANDALONE
// 2647 
// 2648 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
// 2649 /*********************************************************************
// 2650  * @fn      zclGetReadWriteCB
// 2651  *
// 2652  * @brief   Get the Read/Write callback function pointer for a given endpoint.
// 2653  *
// 2654  * @param   endpoint - Application's endpoint
// 2655  *
// 2656  * @return  Read/Write CB, NULL if not found
// 2657  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2658 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
zclGetReadWriteCB:
          CFI Block cfiBlock296 Using cfiCommon0
          CFI Function zclGetReadWriteCB
        CODE
// 2659 {
        FUNCALL zclGetReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2660   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       DPL,R2
        MOV       DPH,R3
// 2661 
// 2662   if ( pRec != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclGetReadWriteCB_0
// 2663   {
// 2664     return ( pRec->pfnReadWriteCB );
        LCALL     ??Subroutine131_0 & 0xFFFF
// 2665   }
??CrossCallReturnLabel_274:
        SJMP      ??zclGetReadWriteCB_1
// 2666 
// 2667   return ( NULL );
??zclGetReadWriteCB_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclGetReadWriteCB_1:
        SJMP      ?Subroutine2
// 2668 }
          CFI EndBlock cfiBlock296
// 2669 
// 2670 /*********************************************************************
// 2671  * @fn      zclGetAuthorizeCB
// 2672  *
// 2673  * @brief   Get the Read/Write Authorization callback function pointer
// 2674  *          for a given endpoint.
// 2675  *
// 2676  * @param   endpoint - Application's endpoint
// 2677  *
// 2678  * @return  Authorization CB, NULL if not found
// 2679  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2680 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
zclGetAuthorizeCB:
          CFI Block cfiBlock297 Using cfiCommon0
          CFI Function zclGetAuthorizeCB
        CODE
// 2681 {
        FUNCALL zclGetAuthorizeCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2682   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       DPL,R2
        MOV       DPH,R3
// 2683 
// 2684   if ( pRec != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclGetAuthorizeCB_0
// 2685   {
// 2686     return ( pRec->pfnAuthorizeCB );
        LCALL     ?Subroutine54 & 0xFFFF
// 2687   }
??CrossCallReturnLabel_278:
        SJMP      ??zclGetAuthorizeCB_1
// 2688 
// 2689   return ( NULL );
??zclGetAuthorizeCB_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclGetAuthorizeCB_1:
          CFI EndBlock cfiBlock297
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 2690 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock298 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock298
// 2691 #endif // ZCL_READ || ZCL_WRITE
// 2692 
// 2693 /*********************************************************************
// 2694  * @fn      zclFindClusterOption
// 2695  *
// 2696  * @brief   Find the option record that matchs the cluster id
// 2697  *
// 2698  * @param   endpoint - Application's endpoint
// 2699  * @param   clusterID - cluster ID looking for
// 2700  *
// 2701  * @return  pointer to clutser option, NULL if not found
// 2702  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2703 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
zclFindClusterOption:
          CFI Block cfiBlock299 Using cfiCommon0
          CFI Function zclFindClusterOption
        CODE
// 2704 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
// 2705   zclClusterOptionList *pLoop;
// 2706 
// 2707   pLoop = clusterOptionList;
        MOV       DPTR,#clusterOptionList
        SJMP      ??zclFindClusterOption_0
// 2708   while ( pLoop != NULL )
// 2709   {
// 2710     if ( pLoop->endpoint == endpoint )
// 2711     {
// 2712       uint8 x;
// 2713       for ( x = 0; x < pLoop->numOptions; x++ )
// 2714       {
// 2715         if ( pLoop->options[x].clusterID == clusterID )
// 2716         {
// 2717           return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
// 2718         }
// 2719       }
// 2720     }
// 2721 
// 2722     pLoop = pLoop->next;
??zclFindClusterOption_1:
        MOV       DPL,R0
        MOV       DPH,R1
??zclFindClusterOption_0:
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_222:
        JZ        ??zclFindClusterOption_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??zclFindClusterOption_1
        MOV       R6,#0x0
        SJMP      ??zclFindClusterOption_3
??zclFindClusterOption_4:
        INC       R6
??zclFindClusterOption_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R6
        CLR       C
        SUBB      A,R2
        JNC       ??zclFindClusterOption_1
        MOV       A,R6
        MOV       B,#0x3
        MUL       AB
        MOV       R2,A
        MOV       ?V0,B
        MOV       R3,?V0
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??zclFindClusterOption_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??zclFindClusterOption_5:
        JNZ       ??zclFindClusterOption_4
        SJMP      ??zclFindClusterOption_6
// 2723   }
// 2724 
// 2725   return ( NULL );
??zclFindClusterOption_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclFindClusterOption_6:
        LJMP      ??Subroutine121_0 & 0xFFFF
// 2726 }
          CFI EndBlock cfiBlock299

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond300 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_232
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function zcl_ProcessMessageMSG
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_233
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker302 Using cfiCommon1
          CFI (cfiPicker302) NoFunction
          CFI (cfiPicker302) Picker
        LCALL     ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_160:
        INC       DPTR
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiPicker302
        REQUIRE ??Subroutine123_0
        ; // Fall through to label ??Subroutine123_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine123_0:
          CFI Block cfiCond303 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_231
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function zcl_ProcessMessageMSG
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_232
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function zcl_ProcessMessageMSG
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_233
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-2
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker306 Using cfiCommon1
          CFI (cfiPicker306) NoFunction
          CFI (cfiPicker306) Picker
        INC       DPTR
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiPicker306
        REQUIRE ??Subroutine124_0
        ; // Fall through to label ??Subroutine124_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine124_0:
          CFI Block cfiCond307 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_223
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function zcl_addExternalFoundationHandler
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_218
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-2
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function zcl_getExternalFoundationHandler
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond309) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond309) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond309) CFA_SP SP+-7
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function zcl_SendCommand
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_220
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-2
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function zcl_SendCommand
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_221
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond311) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-2
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function zcl_ProcessMessageMSG
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_224
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-2
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function zcl_ProcessMessageMSG
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_225
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-2
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function zclFindClusterOption
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_222
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-2
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function zcl_ReadAttrData
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_226
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function zclWriteAttrData
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_227
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function zclProcessInWriteCmd
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_228
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond317) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond317) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond317) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond317) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond317) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond317) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond317) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond317) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond317) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond317) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+-2
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function zclProcessInWriteCmd
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_229
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond318) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_230
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond319) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond319) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond319) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond319) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond319) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-2
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function zcl_SendCommand
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_231
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond320) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond320) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond320) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond320) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond320) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond320) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond320) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond320) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-2
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function zcl_ProcessMessageMSG
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_232
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function zcl_ProcessMessageMSG
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_233
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker323 Using cfiCommon1
          CFI (cfiPicker323) NoFunction
          CFI (cfiPicker323) Picker
        LCALL     ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_303:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiPicker323
// 2727 
// 2728 /*********************************************************************
// 2729  * @fn      zclGetClusterOption
// 2730  *
// 2731  * @brief   Get the option record that matchs the cluster id
// 2732  *
// 2733  * @param   endpoint - Application's endpoint
// 2734  * @param   clusterID - cluster ID looking for
// 2735  *
// 2736  * @return  clutser option, AF_TX_OPTIONS_NONE if not found
// 2737  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2738 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
zclGetClusterOption:
          CFI Block cfiBlock324 Using cfiCommon0
          CFI Function zclGetClusterOption
        CODE
// 2739 {
        FUNCALL zclGetClusterOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2740   uint8 option;
// 2741   zclOptionRec_t *pOption;
// 2742 
// 2743   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV       DPL,R2
        MOV       DPH,R3
// 2744   if ( pOption != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclGetClusterOption_0
// 2745   {
// 2746     option = pOption->option;
// 2747     if ( !ZG_SECURE_ENABLED )
// 2748     {
// 2749       option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
// 2750     }
// 2751 
// 2752     return ( option ); // EMBEDDED RETURN
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??zclGetClusterOption_1
// 2753   }
// 2754 
// 2755   return ( AF_TX_OPTIONS_NONE );
??zclGetClusterOption_0:
        MOV       R1,#0x0
??zclGetClusterOption_1:
        LJMP      ?Subroutine2 & 0xFFFF
// 2756 }
          CFI EndBlock cfiBlock324
// 2757 
// 2758 /*********************************************************************
// 2759  * @fn      zclSetSecurityOption
// 2760  *
// 2761  * @brief   Set the security option for the cluster id
// 2762  *
// 2763  * @param   endpoint - Application's endpoint
// 2764  * @param   clusterID - cluster ID looking for
// 2765  * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
// 2766  *
// 2767  * @return  none
// 2768  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2769 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
zclSetSecurityOption:
          CFI Block cfiBlock325 Using cfiCommon0
          CFI Function zclSetSecurityOption
        CODE
// 2770 {
        FUNCALL zclSetSecurityOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R4
        MOV       R7,A
// 2771   zclOptionRec_t *pOption;
// 2772 
// 2773   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
// 2774   if ( pOption != NULL )
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclSetSecurityOption_0
// 2775   {
// 2776     if ( enable )
        MOV       A,R0
        ADD       A,#0x2
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R7
        JZ        ??zclSetSecurityOption_1
// 2777     {
// 2778       pOption->option |= AF_EN_SECURITY;
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        SJMP      ??zclSetSecurityOption_2
// 2779     }
// 2780     else
// 2781     {
// 2782       pOption->option &= (AF_EN_SECURITY ^ 0xFF);
??zclSetSecurityOption_1:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.6
??zclSetSecurityOption_2:
        MOVX      @DPTR,A
// 2783     }
// 2784   }
// 2785 }
??zclSetSecurityOption_0:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock325
// 2786 
// 2787 #ifdef ZCL_DISCOVER
// 2788 /*********************************************************************
// 2789  * @fn      zclFindNextCmdRec
// 2790  *
// 2791  * @brief   Find the command (or next) record that matchs the parameters
// 2792  *
// 2793  * @param   endpoint - Application's endpoint
// 2794  * @param   clusterID - cluster ID
// 2795  * @param   commandID - command ID from requesting command
// 2796  * @param   direction- direction of received command
// 2797  * @param   pCmdID - command looking for
// 2798  * @param   pCmd - command information within command record list
// 2799  *
// 2800  * @return  pointer to command record, NULL no more records of this cluster
// 2801  */
// 2802 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
// 2803                                 uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
// 2804 {
// 2805   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2806   uint8 i;
// 2807 
// 2808   if ( pRec != NULL )
// 2809   {
// 2810     for ( i = 0; i < pRec->numCommands; i++ )
// 2811     {
// 2812       if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
// 2813           ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
// 2814       {
// 2815         if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 2816         {
// 2817           if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
// 2818           {
// 2819             *pCmd = pRec->pCmdRecs[i];
// 2820 
// 2821             // Update command ID
// 2822             *pCmdID = pCmd->cmdID;
// 2823 
// 2824             return ( TRUE ); // EMBEDDED RETURN
// 2825           }
// 2826           else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
// 2827           {
// 2828             *pCmd = pRec->pCmdRecs[i];
// 2829 
// 2830             // Update command ID
// 2831             *pCmdID = pCmd->cmdID;
// 2832 
// 2833             return ( TRUE ); // EMBEDDED RETURN
// 2834           }
// 2835         }
// 2836         else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
// 2837         {
// 2838           if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
// 2839           {
// 2840             *pCmd = pRec->pCmdRecs[i];
// 2841 
// 2842             // Update command ID
// 2843             *pCmdID = pCmd->cmdID;
// 2844 
// 2845             return ( TRUE ); // EMBEDDED RETURN
// 2846           }
// 2847           else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
// 2848           {
// 2849             *pCmd = pRec->pCmdRecs[i];
// 2850 
// 2851             // Update command ID
// 2852             *pCmdID = pCmd->cmdID;
// 2853 
// 2854             return ( TRUE ); // EMBEDDED RETURN
// 2855           }
// 2856         }
// 2857         else
// 2858         {
// 2859           return ( FALSE ); // Incorrect Command ID
// 2860         }
// 2861       }
// 2862     }
// 2863   }
// 2864 
// 2865   return ( FALSE );
// 2866 }
// 2867 
// 2868 /*********************************************************************
// 2869  * @fn      zclFindNextAttrRec
// 2870  *
// 2871  * @brief   Find the attribute (or next) record that matchs the parameters
// 2872  *
// 2873  * @param   endpoint - Application's endpoint
// 2874  * @param   clusterID - cluster ID
// 2875  * @param   attr - attribute looking for
// 2876  *
// 2877  * @return  pointer to attribute record, NULL if not found
// 2878  */
// 2879 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
// 2880                                  uint16 *attrId, zclAttrRec_t *pAttr )
// 2881 {
// 2882   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2883   uint8 attrDir;
// 2884 
// 2885   if ( pRec != NULL )
// 2886   {
// 2887     uint16 x;
// 2888 
// 2889     for ( x = 0; x < pRec->numAttributes; x++ )
// 2890     {
// 2891       if ( ( pRec->attrs[x].clusterID == clusterID ) &&
// 2892            ( pRec->attrs[x].attr.attrId >= *attrId ) )
// 2893       {
// 2894         // also make sure direction is right
// 2895         attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
// 2896         if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
// 2897         {
// 2898           // return attribute and found attribute ID
// 2899           *pAttr = pRec->attrs[x];
// 2900           *attrId = pAttr->attr.attrId;
// 2901 
// 2902           return ( TRUE ); // EMBEDDED RETURN
// 2903         }
// 2904       }
// 2905     }
// 2906   }
// 2907 
// 2908   return ( FALSE );
// 2909 }
// 2910 #endif // ZCL_DISCOVER
// 2911 
// 2912 /*********************************************************************
// 2913  * @fn      zclSerializeData
// 2914  *
// 2915  * @brief   Builds a buffer from the attribute data to sent out over
// 2916  *          the air.
// 2917  *          NOTE - Not compatible with application's attributes callbacks.
// 2918  *
// 2919  * @param   dataType - data types defined in zcl.h
// 2920  * @param   attrData - pointer to the attribute data
// 2921  * @param   buf - where to put the serialized data
// 2922  *
// 2923  * @return  pointer to end of destination buffer
// 2924  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2925 uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
zclSerializeData:
          CFI Block cfiBlock326 Using cfiCommon0
          CFI Function zclSerializeData
        CODE
// 2926 {
        FUNCALL zclSerializeData, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
// 2927   uint8 *pStr;
// 2928   uint16 len;
// 2929 
// 2930   if ( attrData == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2931   {
// 2932     return ( buf );
// 2933   }
// 2934 
// 2935   switch ( dataType )
        MOV       A,R2
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R3
        MOV       ?V5,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       ?V2,#0x0
        MOV       A,R1
        LCALL     ?UC_SWITCH_SPARSE
`?<Jumptable for zclSerializeData>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        65
        DATA
        DATA8
        DATA
        DATA8
        DB        66
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        67
        DATA
        DATA8
        DATA
        DATA8
        DB        68
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        224
        DATA
        DATA8
        DATA
        DATA8
        DB        226
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        232
        DATA
        DATA8
        DATA
        DATA8
        DB        233
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        27
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        35
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        36
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        37
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        38
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        39
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        40
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        41
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        42
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        43
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        44
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        45
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        46
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        47
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        48
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        49
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        57
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        58
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        234
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        240
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        241
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_0
        CODE
// 2936   {
// 2937     case ZCL_DATATYPE_DATA8:
// 2938     case ZCL_DATATYPE_BOOLEAN:
// 2939     case ZCL_DATATYPE_BITMAP8:
// 2940     case ZCL_DATATYPE_INT8:
// 2941     case ZCL_DATATYPE_UINT8:
// 2942     case ZCL_DATATYPE_ENUM8:
// 2943       *buf++ = *((uint8 *)attrData);
??zclSerializeData_5:
        LCALL     ?Subroutine104 & 0xFFFF
??CrossCallReturnLabel_238:
        MOVX      @DPTR,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
// 2944        break;
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2945 
// 2946     case ZCL_DATATYPE_DATA16:
// 2947     case ZCL_DATATYPE_BITMAP16:
// 2948     case ZCL_DATATYPE_UINT16:
// 2949     case ZCL_DATATYPE_INT16:
// 2950     case ZCL_DATATYPE_ENUM16:
// 2951     case ZCL_DATATYPE_SEMI_PREC:
// 2952     case ZCL_DATATYPE_CLUSTER_ID:
// 2953     case ZCL_DATATYPE_ATTR_ID:
// 2954       *buf++ = LO_UINT16( *((uint16*)attrData) );
??zclSerializeData_4:
        LCALL     ?Subroutine16 & 0xFFFF
// 2955       *buf++ = HI_UINT16( *((uint16*)attrData) );
??CrossCallReturnLabel_234:
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      @DPTR,A
        INC       R2
        INC       R2
        MOV       R3,?V5
// 2956       break;
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2957 
// 2958     case ZCL_DATATYPE_DATA24:
// 2959     case ZCL_DATATYPE_BITMAP24:
// 2960     case ZCL_DATATYPE_UINT24:
// 2961     case ZCL_DATATYPE_INT24:
// 2962       *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
??zclSerializeData_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V0
        LCALL     ?Subroutine109 & 0xFFFF
// 2963       *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
??CrossCallReturnLabel_248:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,?V1
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine109 & 0xFFFF
// 2964       *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
??CrossCallReturnLabel_249:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,#0x10
        MOV       R0,#?V0
        LCALL     ?UL_SHR
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??zclSerializeData_0
        INC       R3
// 2965       break;
        SJMP      ??zclSerializeData_0
// 2966 
// 2967     case ZCL_DATATYPE_DATA32:
// 2968     case ZCL_DATATYPE_BITMAP32:
// 2969     case ZCL_DATATYPE_UINT32:
// 2970     case ZCL_DATATYPE_INT32:
// 2971     case ZCL_DATATYPE_SINGLE_PREC:
// 2972     case ZCL_DATATYPE_TOD:
// 2973     case ZCL_DATATYPE_DATE:
// 2974     case ZCL_DATATYPE_UTC:
// 2975     case ZCL_DATATYPE_BAC_OID:
// 2976       buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
??zclSerializeData_3:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2977       break;
        SJMP      ??zclSerializeData_0
// 2978 
// 2979     case ZCL_DATATYPE_UINT40:
// 2980     case ZCL_DATATYPE_INT40:
// 2981       pStr = (uint8*)attrData;
// 2982       buf = zcl_memcpy( buf, pStr, 5 );
??zclSerializeData_7:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x5
        SJMP      ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 15)
// 2983       break;
// 2984 
// 2985     case ZCL_DATATYPE_UINT48:
// 2986     case ZCL_DATATYPE_INT48:
// 2987       pStr = (uint8*)attrData;
// 2988       buf = zcl_memcpy( buf, pStr, 6 );
??zclSerializeData_8:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x6
        SJMP      ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 15)
// 2989       break;
// 2990 
// 2991     case ZCL_DATATYPE_UINT56:
// 2992     case ZCL_DATATYPE_INT56:
// 2993       pStr = (uint8*)attrData;
// 2994       buf = zcl_memcpy( buf, pStr, 7 );
??zclSerializeData_9:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x7
        SJMP      ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 15)
// 2995       break;
// 2996 
// 2997     case ZCL_DATATYPE_DOUBLE_PREC:
// 2998     case ZCL_DATATYPE_IEEE_ADDR:
// 2999     case ZCL_DATATYPE_UINT64:
// 3000     case ZCL_DATATYPE_INT64:
// 3001       pStr = (uint8*)attrData;
// 3002       buf = zcl_memcpy( buf, pStr, 8 );
??zclSerializeData_10:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x8
        SJMP      ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 15)
// 3003       break;
// 3004 
// 3005     case ZCL_DATATYPE_CHAR_STR:
// 3006     case ZCL_DATATYPE_OCTET_STR:
// 3007       pStr = (uint8*)attrData;
// 3008       len = *pStr;
// 3009       buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
??zclSerializeData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R4,A
        CLR       A
        ADDC      A,#0x0
        SJMP      ??zclSerializeData_13
          CFI CFA_XSP16 add(XSP16, 15)
// 3010       break;
// 3011 
// 3012     case ZCL_DATATYPE_LONG_CHAR_STR:
// 3013     case ZCL_DATATYPE_LONG_OCTET_STR:
// 3014       pStr = (uint8*)attrData;
// 3015       len = BUILD_UINT16( pStr[0], pStr[1] );
// 3016       buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
??zclSerializeData_2:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV       R4,A
        CLR       A
        ADDC      A,R1
??zclSerializeData_13:
        MOV       R5,A
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 15)
// 3017       break;
// 3018 
// 3019     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 3020       pStr = (uint8*)attrData;
// 3021       buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
??zclSerializeData_11:
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x10
??zclSerializeData_12:
        MOV       R5,#0x0
??zclSerializeData_14:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 3022       break;
// 3023 
// 3024     case ZCL_DATATYPE_NO_DATA:
// 3025     case ZCL_DATATYPE_UNKNOWN:
// 3026       // Fall through
// 3027 
// 3028     default:
// 3029       break;
// 3030   }
// 3031 
// 3032   return ( buf );
??zclSerializeData_0:
        LJMP      ?Subroutine8 & 0xFFFF
// 3033 }
          CFI EndBlock cfiBlock326

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine109:
          CFI Block cfiCond327 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function zclParseHdr
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_18
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+-4
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function zclParseHdr
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_19
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-4
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function zclSerializeData
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_248
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-2
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function zclSerializeData
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_249
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+-2
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function zcl_HandleExternal
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_244
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-4
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function zclSerializeData
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_234
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-6
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function zclParseInDefaultRspCmd
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_235
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-6
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function zclParseHdr
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_236
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-6
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function zclParseInReadRspCmd
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_242
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond336) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond336) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond336) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+-6
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function zclParseInWriteRspCmd
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_243
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond337) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond337) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+-6
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function zclParseHdr
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_241
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-6
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_234
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function zclParseInDefaultRspCmd
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_235
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-2
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker342 Using cfiCommon1
          CFI (cfiPicker342) NoFunction
          CFI (cfiPicker342) Picker
        LCALL     ?Subroutine104 & 0xFFFF
??CrossCallReturnLabel_240:
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiPicker342
        REQUIRE ??Subroutine125_0
        ; // Fall through to label ??Subroutine125_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine125_0:
          CFI Block cfiCond343 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_236
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function zclSerializeData
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_234
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-2
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function zclParseInDefaultRspCmd
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_235
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-2
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker346 Using cfiCommon1
          CFI (cfiPicker346) NoFunction
          CFI (cfiPicker346) Picker
        LCALL     ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_245:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiPicker346

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine104:
          CFI Block cfiCond347 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_238
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function zclSerializeData
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_234
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-4
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function zclParseInDefaultRspCmd
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_235
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-4
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function zclParseInWriteRspCmd
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_239
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-2
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker351 Using cfiCommon1
          CFI (cfiPicker351) NoFunction
          CFI (cfiPicker351) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiPicker351
        REQUIRE ??Subroutine126_0
        ; // Fall through to label ??Subroutine126_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine126_0:
          CFI Block cfiCond352 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_237
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond353 Using cfiCommon0
          CFI (cfiCond353) Function zclSerializeData
          CFI (cfiCond353) Conditional ??CrossCallReturnLabel_238
          CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond353) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond353) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond353) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond353) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond353) CFA_SP SP+-2
          CFI (cfiCond353) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond354 Using cfiCommon0
          CFI (cfiCond354) Function zclSerializeData
          CFI (cfiCond354) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_234
          CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond354) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond354) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond354) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond354) CFA_SP SP+-4
          CFI (cfiCond354) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function zclParseInDefaultRspCmd
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_235
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-4
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function zclParseInWriteRspCmd
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_239
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+-2
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker357 Using cfiCommon1
          CFI (cfiPicker357) NoFunction
          CFI (cfiPicker357) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond352
          CFI EndBlock cfiCond353
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiPicker357

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine93:
          CFI Block cfiCond358 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_244
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function zclSerializeData
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_234
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+-4
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function zclParseInDefaultRspCmd
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_235
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+-4
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function zclParseHdr
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_236
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-4
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond362 Using cfiCommon0
          CFI (cfiCond362) Function zclParseInReadRspCmd
          CFI (cfiCond362) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_242
          CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond362) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond362) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond362) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond362) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond362) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond362) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond362) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond362) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond362) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond362) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond362) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond362) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond362) CFA_SP SP+-4
          CFI (cfiCond362) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond363 Using cfiCommon0
          CFI (cfiCond363) Function zclParseInWriteRspCmd
          CFI (cfiCond363) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_243
          CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond363) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond363) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond363) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond363) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond363) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond363) CFA_SP SP+-4
          CFI (cfiCond363) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function zclParseHdr
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_241
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+-4
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker365 Using cfiCommon1
          CFI (cfiPicker365) NoFunction
          CFI (cfiPicker365) Picker
        LCALL     ?Subroutine109 & 0xFFFF
??CrossCallReturnLabel_250:
        INC       DPTR
        RET
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiCond362
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiPicker365
// 3034 
// 3035 #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
// 3036 /*********************************************************************
// 3037  * @fn      zclAnalogDataType
// 3038  *
// 3039  * @brief   Checks to see if Data Type is Analog
// 3040  *
// 3041  * @param   dataType - data type
// 3042  *
// 3043  * @return  TRUE if data type is analog
// 3044  */
// 3045 uint8 zclAnalogDataType( uint8 dataType )
// 3046 {
// 3047   uint8 analog;
// 3048 
// 3049   switch ( dataType )
// 3050   {
// 3051     case ZCL_DATATYPE_UINT8:
// 3052     case ZCL_DATATYPE_UINT16:
// 3053     case ZCL_DATATYPE_UINT24:
// 3054     case ZCL_DATATYPE_UINT32:
// 3055     case ZCL_DATATYPE_UINT40:
// 3056     case ZCL_DATATYPE_UINT48:
// 3057     case ZCL_DATATYPE_UINT56:
// 3058     case ZCL_DATATYPE_UINT64:
// 3059     case ZCL_DATATYPE_INT8:
// 3060     case ZCL_DATATYPE_INT16:
// 3061     case ZCL_DATATYPE_INT24:
// 3062     case ZCL_DATATYPE_INT32:
// 3063     case ZCL_DATATYPE_INT40:
// 3064     case ZCL_DATATYPE_INT48:
// 3065     case ZCL_DATATYPE_INT56:
// 3066     case ZCL_DATATYPE_INT64:
// 3067     case ZCL_DATATYPE_SEMI_PREC:
// 3068     case ZCL_DATATYPE_SINGLE_PREC:
// 3069     case ZCL_DATATYPE_DOUBLE_PREC:
// 3070     case ZCL_DATATYPE_TOD:
// 3071     case ZCL_DATATYPE_DATE:
// 3072     case ZCL_DATATYPE_UTC:
// 3073       analog = TRUE;
// 3074       break;
// 3075 
// 3076     default:
// 3077       analog = FALSE;
// 3078       break;
// 3079   }
// 3080 
// 3081   return ( analog );
// 3082 }
// 3083 
// 3084 /*********************************************************************
// 3085  * @fn      zclIsLittleEndianMachine
// 3086  *
// 3087  * @brief   Verifies endianness in system.
// 3088  *
// 3089  * @param   none
// 3090  *
// 3091  * @return  MSB-00 or LSB-01 depending on endianness in the system
// 3092  */
// 3093 static int zclIsLittleEndianMachine(void)
// 3094 {
// 3095   uint16 test = 0x0001;
// 3096 
// 3097   return (*((uint8 *)(&test)));
// 3098 }
// 3099 
// 3100 /*********************************************************************
// 3101  * @fn      zcl_BuildAnalogData
// 3102  *
// 3103  * @brief   Build an analog arribute out of sequential bytes.
// 3104  *
// 3105  * @param   dataType - type of data
// 3106  * @param   pData - pointer to data
// 3107  * @param   pBuf - where to put the data
// 3108  *
// 3109  * @return  none
// 3110  */
// 3111 static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
// 3112 {
// 3113   int current_byte_index;
// 3114   int remaining_bytes;
// 3115   int step;
// 3116 
// 3117   remaining_bytes = zclGetAttrDataLength(dataType, pData);
// 3118 
// 3119   // decide if move forward or backwards to copy data
// 3120   if ( zclIsLittleEndianMachine() )
// 3121   {
// 3122     step = 1;
// 3123     current_byte_index = 0;
// 3124   }
// 3125   else
// 3126   {
// 3127     step = -1;
// 3128     current_byte_index = remaining_bytes - 1;
// 3129   }
// 3130 
// 3131   while ( remaining_bytes-- )
// 3132   {
// 3133     pData[current_byte_index] = *(pBuf++);
// 3134     current_byte_index += step;
// 3135   }
// 3136 }
// 3137 #endif
// 3138 
// 3139 /*********************************************************************
// 3140  * @fn      zclGetDataTypeLength
// 3141  *
// 3142  * @brief   Return the length of the datatype in octet.
// 3143  *
// 3144  *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
// 3145  *                ZCL_DATATYPE_CHAR_STR data types.
// 3146  *
// 3147  * @param   dataType - data type
// 3148  *
// 3149  * @return  length of data
// 3150  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3151 uint8 zclGetDataTypeLength( uint8 dataType )
zclGetDataTypeLength:
          CFI Block cfiBlock366 Using cfiCommon0
          CFI Function zclGetDataTypeLength
        CODE
// 3152 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV       A,R1
// 3153   uint8 len;
// 3154 
// 3155   switch ( dataType )
        ADD       A,#-0x8
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x5
        JZ        ??zclGetDataTypeLength_0
        ADD       A,#-0x8
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x5
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_4
        DEC       A
        JZ        ??zclGetDataTypeLength_5
        DEC       A
        JZ        ??zclGetDataTypeLength_6
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_4
        DEC       A
        JZ        ??zclGetDataTypeLength_5
        DEC       A
        JZ        ??zclGetDataTypeLength_6
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        ADD       A,#-0x7
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        ADD       A,#0x5a
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x6
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x6
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_8
        SJMP      ??zclGetDataTypeLength_9
// 3156   {
// 3157     case ZCL_DATATYPE_DATA8:
// 3158     case ZCL_DATATYPE_BOOLEAN:
// 3159     case ZCL_DATATYPE_BITMAP8:
// 3160     case ZCL_DATATYPE_INT8:
// 3161     case ZCL_DATATYPE_UINT8:
// 3162     case ZCL_DATATYPE_ENUM8:
// 3163       len = 1;
??zclGetDataTypeLength_0:
        MOV       R1,#0x1
// 3164       break;
        SJMP      ??zclGetDataTypeLength_10
// 3165 
// 3166     case ZCL_DATATYPE_DATA16:
// 3167     case ZCL_DATATYPE_BITMAP16:
// 3168     case ZCL_DATATYPE_UINT16:
// 3169     case ZCL_DATATYPE_INT16:
// 3170     case ZCL_DATATYPE_ENUM16:
// 3171     case ZCL_DATATYPE_SEMI_PREC:
// 3172     case ZCL_DATATYPE_CLUSTER_ID:
// 3173     case ZCL_DATATYPE_ATTR_ID:
// 3174       len = 2;
??zclGetDataTypeLength_1:
        MOV       R1,#0x2
// 3175       break;
        SJMP      ??zclGetDataTypeLength_10
// 3176 
// 3177     case ZCL_DATATYPE_DATA24:
// 3178     case ZCL_DATATYPE_BITMAP24:
// 3179     case ZCL_DATATYPE_UINT24:
// 3180     case ZCL_DATATYPE_INT24:
// 3181       len = 3;
??zclGetDataTypeLength_2:
        MOV       R1,#0x3
// 3182       break;
        SJMP      ??zclGetDataTypeLength_10
// 3183 
// 3184     case ZCL_DATATYPE_DATA32:
// 3185     case ZCL_DATATYPE_BITMAP32:
// 3186     case ZCL_DATATYPE_UINT32:
// 3187     case ZCL_DATATYPE_INT32:
// 3188     case ZCL_DATATYPE_SINGLE_PREC:
// 3189     case ZCL_DATATYPE_TOD:
// 3190     case ZCL_DATATYPE_DATE:
// 3191     case ZCL_DATATYPE_UTC:
// 3192     case ZCL_DATATYPE_BAC_OID:
// 3193       len = 4;
??zclGetDataTypeLength_3:
        MOV       R1,#0x4
// 3194       break;
        SJMP      ??zclGetDataTypeLength_10
// 3195 
// 3196    case ZCL_DATATYPE_UINT40:
// 3197    case ZCL_DATATYPE_INT40:
// 3198        len = 5;
??zclGetDataTypeLength_4:
        MOV       R1,#0x5
// 3199        break;
        SJMP      ??zclGetDataTypeLength_10
// 3200 
// 3201    case ZCL_DATATYPE_UINT48:
// 3202    case ZCL_DATATYPE_INT48:
// 3203        len = 6;
??zclGetDataTypeLength_5:
        MOV       R1,#0x6
// 3204        break;
        SJMP      ??zclGetDataTypeLength_10
// 3205 
// 3206    case ZCL_DATATYPE_UINT56:
// 3207    case ZCL_DATATYPE_INT56:
// 3208        len = 7;
??zclGetDataTypeLength_6:
        MOV       R1,#0x7
// 3209        break;
        SJMP      ??zclGetDataTypeLength_10
// 3210 
// 3211    case ZCL_DATATYPE_DOUBLE_PREC:
// 3212    case ZCL_DATATYPE_IEEE_ADDR:
// 3213    case ZCL_DATATYPE_UINT64:
// 3214    case ZCL_DATATYPE_INT64:
// 3215      len = 8;
??zclGetDataTypeLength_7:
        MOV       R1,#0x8
// 3216      break;
        SJMP      ??zclGetDataTypeLength_10
// 3217 
// 3218     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 3219      len = SEC_KEY_LEN;
??zclGetDataTypeLength_8:
        MOV       R1,#0x10
// 3220      break;
        SJMP      ??zclGetDataTypeLength_10
// 3221 
// 3222     case ZCL_DATATYPE_NO_DATA:
// 3223     case ZCL_DATATYPE_UNKNOWN:
// 3224       // Fall through
// 3225 
// 3226     default:
// 3227       len = 0;
??zclGetDataTypeLength_9:
        MOV       R1,#0x0
// 3228       break;
// 3229   }
// 3230 
// 3231   return ( len );
??zclGetDataTypeLength_10:
        LJMP      ?BRET
// 3232 }
          CFI EndBlock cfiBlock366
// 3233 
// 3234 /*********************************************************************
// 3235  * @fn      zclGetAttrDataLength
// 3236  *
// 3237  * @brief   Return the length of the attribute.
// 3238  *
// 3239  * @param   dataType - data type
// 3240  * @param   pData - pointer to data
// 3241  *
// 3242  * @return  returns atrribute length
// 3243  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3244 uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
zclGetAttrDataLength:
          CFI Block cfiBlock367 Using cfiCommon0
          CFI Function zclGetAttrDataLength
        CODE
// 3245 {
        FUNCALL zclGetAttrDataLength, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3246   uint16 dataLen = 0;
// 3247 
// 3248   if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
        MOV       A,#0x44
        XRL       A,R6
        JZ        ??zclGetAttrDataLength_0
        MOV       A,#0x43
        XRL       A,R6
        JNZ       ??zclGetAttrDataLength_1
// 3249   {
// 3250     dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
??zclGetAttrDataLength_0:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine78 & 0xFFFF
// 3251   }
??CrossCallReturnLabel_125:
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        SJMP      ??zclGetAttrDataLength_2
// 3252   else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
??zclGetAttrDataLength_1:
        MOV       A,#0x42
        XRL       A,R6
        JZ        ??zclGetAttrDataLength_3
        MOV       A,#0x41
        XRL       A,R6
        JNZ       ??zclGetAttrDataLength_4
// 3253   {
// 3254     dataLen = *pData + 1; // string length + 1 for length field
??zclGetAttrDataLength_3:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
??zclGetAttrDataLength_2:
        MOV       R3,A
        SJMP      ??zclGetAttrDataLength_5
// 3255   }
// 3256   else
// 3257   {
// 3258     dataLen = zclGetDataTypeLength( dataType );
??zclGetAttrDataLength_4:
        ; Setup parameters for call to function zclGetDataTypeLength
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       R2,A
        MOV       R3,#0x0
// 3259   }
// 3260 
// 3261   return ( dataLen );
??zclGetAttrDataLength_5:
        LJMP      ??Subroutine121_0 & 0xFFFF
// 3262 }
          CFI EndBlock cfiBlock367

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine78:
          CFI Block cfiCond368 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function zclGetAttrDataLength
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond369) CFA_SP SP+-2
          CFI (cfiCond369) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker370 Using cfiCommon1
          CFI (cfiPicker370) NoFunction
          CFI (cfiPicker370) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R4
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiPicker370
// 3263 
// 3264 #ifdef ZCL_READ
// 3265 /*********************************************************************
// 3266  * @fn      zclReadAttrData
// 3267  *
// 3268  * @brief   Read the attribute's current value into pAttrData.
// 3269  *          NOTE - Not compatible with application's attributes callbacks.
// 3270  *
// 3271  * @param   pAttrData - where to put attribute data
// 3272  * @param   pAttr - pointer to attribute
// 3273  * @param   pDataLen - where to put attribute data length
// 3274  *
// 3275  * @return Success
// 3276  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3277 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
zclReadAttrData:
          CFI Block cfiBlock371 Using cfiCommon0
          CFI Function zclReadAttrData
        CODE
// 3278 {
        FUNCALL zclReadAttrData, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclReadAttrData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3279   uint16 dataLen;
// 3280 
// 3281   if ( pAttr->attr.dataPtr == NULL )
        MOV       A,R4
        ADD       A,#0x6
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_191:
        JNZ       ??zclReadAttrData_0
// 3282   {
// 3283     return ( ZCL_STATUS_FAILURE );
        MOV       R1,#0x1
        SJMP      ??zclReadAttrData_1
// 3284   }
// 3285 
// 3286   dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
??zclReadAttrData_0:
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3287   zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,?V0
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine116_0 & 0xFFFF
// 3288 
// 3289   if ( pDataLen != NULL )
??CrossCallReturnLabel_193:
        JZ        ??zclReadAttrData_2
// 3290   {
// 3291     *pDataLen = dataLen;
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
// 3292   }
// 3293 
// 3294   return ( ZCL_STATUS_SUCCESS );
??zclReadAttrData_2:
        MOV       R1,#0x0
??zclReadAttrData_1:
          CFI EndBlock cfiBlock371
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 3295 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock372 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock372
// 3296 
// 3297 /*********************************************************************
// 3298  * @fn      zcl_ReadAttrData
// 3299  *
// 3300  * @brief   Read the attribute's current value into pAttrData.
// 3301  *          Use application's callback function if assigned to this attribute.
// 3302  *
// 3303  * @param   endpoint - application's endpoint
// 3304  * @param   clusterId - cluster that attribute belongs to
// 3305  * @param   attrId - attribute id
// 3306  * @param   pAttrData - where to put attribute data
// 3307  * @param   pDataLen - where to put attribute data length
// 3308  *
// 3309  * @return  Successful if data was read
// 3310  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3311 ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
zcl_ReadAttrData:
          CFI Block cfiBlock373 Using cfiCommon0
          CFI Function zcl_ReadAttrData
        CODE
// 3312                                          uint8 *pAttrData, uint16 *pDataLen )
// 3313 {
        FUNCALL zcl_ReadAttrData, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ReadAttrData, zclReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ReadAttrData, zclReadAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V2,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3314   zclAttrRec_t attrRec;
// 3315 
// 3316   if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R1,?V2
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        JNZ       ??zcl_ReadAttrData_0
// 3317   {
// 3318     return ( ZCL_STATUS_FAILURE );
        MOV       R1,#0x1
        SJMP      ??zcl_ReadAttrData_1
// 3319   }
??zcl_ReadAttrData_0:
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_321:
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine57 & 0xFFFF
// 3320 
// 3321   if ( attrRec.attr.dataPtr != NULL )
??CrossCallReturnLabel_84:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_226:
        MOV       R0,#?V4
        JZ        ??zcl_ReadAttrData_2
// 3322   {
// 3323     return zclReadAttrData( pAttrData, &attrRec, pDataLen );
        ; Setup parameters for call to function zclReadAttrData
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP      ??zcl_ReadAttrData_1
// 3324   }
// 3325   else
// 3326   {
// 3327     return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
??zcl_ReadAttrData_2:
        ; Setup parameters for call to function zclReadAttrDataUsingCB
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V2
        LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
??zcl_ReadAttrData_1:
        MOV       A,#0x8
// 3328   }
        LJMP      ?Subroutine9 & 0xFFFF
// 3329 }
          CFI EndBlock cfiBlock373
// 3330 
// 3331 /*********************************************************************
// 3332  * @fn      zclGetAttrDataLengthUsingCB
// 3333  *
// 3334  * @brief   Use application's callback to get the length of the attribute's
// 3335  *          current value stored in the database.
// 3336  *
// 3337  * @param   endpoint - application's endpoint
// 3338  * @param   clusterId - cluster that attribute belongs to
// 3339  * @param   attrId - attribute id
// 3340  *
// 3341  * @return  returns attribute length
// 3342  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3343 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
zclGetAttrDataLengthUsingCB:
          CFI Block cfiBlock374 Using cfiCommon0
          CFI Function zclGetAttrDataLengthUsingCB
        CODE
// 3344 {
        FUNCALL zclGetAttrDataLengthUsingCB, zclGetReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3345   uint16 dataLen = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3346   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
        ; Setup parameters for call to function zclGetReadWriteCB
        LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3347 
// 3348   if ( pfnReadWriteCB != NULL )
        MOV       A,R2
        ORL       A,?V1
        JZ        ??zclGetAttrDataLengthUsingCB_0
// 3349   {
// 3350     // Only get the attribute length
// 3351     (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
        ; Setup parameters for indirect call
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x0
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?CALL_IND
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3352   }
// 3353 
// 3354   return ( dataLen );
??zclGetAttrDataLengthUsingCB_0:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_268:
        MOV       A,#0x2
        LJMP      ?Subroutine9 & 0xFFFF
// 3355 }
          CFI EndBlock cfiBlock374
// 3356 
// 3357 /*********************************************************************
// 3358  * @fn      zclReadAttrDataUsingCB
// 3359  *
// 3360  * @brief   Use application's callback to read the attribute's current
// 3361  *          value stored in the database.
// 3362  *
// 3363  * @param   endpoint - application's endpoint
// 3364  * @param   clusterId - cluster that attribute belongs to
// 3365  * @param   attrId - attribute id
// 3366  * @param   pAttrData - where to put attribute data
// 3367  * @param   pDataLen - where to put attribute data length
// 3368  *
// 3369  * @return  Successful if data was read
// 3370  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3371 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
zclReadAttrDataUsingCB:
          CFI Block cfiBlock375 Using cfiCommon0
          CFI Function zclReadAttrDataUsingCB
        CODE
// 3372                                          uint8 *pAttrData, uint16 *pDataLen )
// 3373 {
        FUNCALL zclReadAttrDataUsingCB, zclGetReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3374   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
        ; Setup parameters for call to function zclGetReadWriteCB
        LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine138_0 & 0xFFFF
// 3375 
// 3376   if ( pDataLen != NULL )
??CrossCallReturnLabel_322:
        MOV       A,?V6
        ORL       A,?V7
        JZ        ??zclReadAttrDataUsingCB_0
// 3377   {
// 3378     *pDataLen = 0; // Always initialize it to 0
        MOV       DPL,?V6
        MOV       DPH,?V7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3379   }
// 3380 
// 3381   if ( pfnReadWriteCB != NULL )
??zclReadAttrDataUsingCB_0:
        MOV       A,R2
        ORL       A,?V3
        JZ        ??zclReadAttrDataUsingCB_1
// 3382   {
// 3383     // Read the attribute value and its length
// 3384     return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
        ; Setup parameters for indirect call
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,#0x1
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?CALL_IND
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        SJMP      ??zclReadAttrDataUsingCB_2
// 3385   }
// 3386 
// 3387   return ( ZCL_STATUS_SOFTWARE_FAILURE );
??zclReadAttrDataUsingCB_1:
        MOV       R1,#-0x3f
??zclReadAttrDataUsingCB_2:
        LJMP      ??Subroutine122_0 & 0xFFFF
// 3388 }
          CFI EndBlock cfiBlock375
// 3389 
// 3390 /*********************************************************************
// 3391  * @fn      zclAuthorizeRead
// 3392  *
// 3393  * @brief   Use application's callback to authorize a Read operation
// 3394  *          on a given attribute.
// 3395  *
// 3396  * @param   endpoint - application's endpoint
// 3397  * @param   srcAddr - source Address
// 3398  * @param   pAttr - pointer to attribute
// 3399  *
// 3400  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3401  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3402  */
// 3403 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3404 {
// 3405   if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
// 3406   {
// 3407     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3408 
// 3409     if ( pfnAuthorizeCB != NULL )
// 3410     {
// 3411       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
// 3412     }
// 3413   }
// 3414 
// 3415   return ( ZCL_STATUS_SUCCESS );
// 3416 }
// 3417 #endif // ZCL_READ
// 3418 
// 3419 #ifdef ZCL_WRITE
// 3420 /*********************************************************************
// 3421  * @fn      zclWriteAttrData
// 3422  *
// 3423  * @brief   Write the received data.
// 3424  *
// 3425  * @param   endpoint - application's endpoint
// 3426  * @param   pAttr - where to write data to
// 3427  * @param   pWriteRec - data to be written
// 3428  *
// 3429  * @return  Successful if data was written
// 3430  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3431 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
zclWriteAttrData:
          CFI Block cfiBlock376 Using cfiCommon0
          CFI Function zclWriteAttrData
        CODE
// 3432                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
// 3433 {
        FUNCALL zclWriteAttrData, zclAuthorizeWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclWriteAttrData, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclWriteAttrData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3434   uint8 status;
// 3435 
// 3436   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclWriteAttrData_0
// 3437   {
// 3438     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
        ; Setup parameters for call to function zclAuthorizeWrite
        LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
        MOV       A,R1
        MOV       ?V2,A
// 3439     if ( status == ZCL_STATUS_SUCCESS )
        JNZ       ??zclWriteAttrData_1
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine52 & 0xFFFF
// 3440     {
// 3441       if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
??CrossCallReturnLabel_75:
        MOV       DPTR,#zcl_ValidateAttrDataCB
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_227:
        JZ        ??zclWriteAttrData_2
        ; Setup parameters for indirect call
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
        MOV       A,R1
        JZ        ??zclWriteAttrData_3
// 3442       {
// 3443         // Write the attribute value
// 3444         uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
??zclWriteAttrData_2:
        MOV       A,?V0
        ADD       A,#0x3
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_269:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R4,?V4
        MOV       R5,?V5
// 3445         zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_279:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 3446 
// 3447         status = ZCL_STATUS_SUCCESS;
        SJMP      ??zclWriteAttrData_1
// 3448       }
// 3449       else
// 3450       {
// 3451         status = ZCL_STATUS_INVALID_VALUE;
??zclWriteAttrData_3:
        MOV       ?V2,#-0x79
        SJMP      ??zclWriteAttrData_1
// 3452       }
// 3453     }
// 3454   }
// 3455   else
// 3456   {
// 3457     status = ZCL_STATUS_READ_ONLY;
??zclWriteAttrData_0:
        MOV       ?V2,#-0x78
// 3458   }
// 3459 
// 3460   return ( status );
??zclWriteAttrData_1:
        MOV       R1,?V2
        LJMP      ?Subroutine8 & 0xFFFF
// 3461 }
          CFI EndBlock cfiBlock376

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond377 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond378 Using cfiCommon0
          CFI (cfiCond378) Function zclWriteAttrData
          CFI (cfiCond378) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond378) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond378) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond378) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond378) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond378) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond378) CFA_SP SP+-2
          CFI (cfiCond378) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond379 Using cfiCommon0
          CFI (cfiCond379) Function zclRevertWriteUndividedCmd
          CFI (cfiCond379) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond379) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond379) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond379) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond379) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond379) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond379) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond379) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond379) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond379) CFA_SP SP+-2
          CFI (cfiCond379) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker380 Using cfiCommon1
          CFI (cfiPicker380) NoFunction
          CFI (cfiPicker380) Picker
        LCALL     ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_164:
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond377
          CFI EndBlock cfiCond378
          CFI EndBlock cfiCond379
          CFI EndBlock cfiPicker380
// 3462 
// 3463 /*********************************************************************
// 3464  * @fn      zclWriteAttrDataUsingCB
// 3465  *
// 3466  * @brief   Use application's callback to write the attribute's current
// 3467  *          value stored in the database.
// 3468  *
// 3469  * @param   endpoint - application's endpoint
// 3470  * @param   pAttr - where to write data to
// 3471  * @param   pAttrData - data to be written
// 3472  *
// 3473  * @return  Successful if data was written
// 3474  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3475 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
zclWriteAttrDataUsingCB:
          CFI Block cfiBlock381 Using cfiCommon0
          CFI Function zclWriteAttrDataUsingCB
        CODE
// 3476                                           zclAttrRec_t *pAttr, uint8 *pAttrData )
// 3477 {
        FUNCALL zclWriteAttrDataUsingCB, zclAuthorizeWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclWriteAttrDataUsingCB, zclGetReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3478   uint8 status;
// 3479 
// 3480   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclWriteAttrDataUsingCB_0
// 3481   {
// 3482     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
        ; Setup parameters for call to function zclAuthorizeWrite
        LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
        MOV       A,R1
        MOV       R1,A
// 3483     if ( status == ZCL_STATUS_SUCCESS )
        JNZ       ??zclWriteAttrDataUsingCB_1
// 3484     {
// 3485       zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
        ; Setup parameters for call to function zclGetReadWriteCB
        MOV       R1,?V0
        LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3486       if ( pfnReadWriteCB != NULL )
        MOV       A,R2
        ORL       A,?V3
        JZ        ??zclWriteAttrDataUsingCB_2
// 3487       {
// 3488         // Write the attribute value
// 3489         status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
// 3490                                     ZCL_OPER_WRITE, pAttrData, NULL );
        ; Setup parameters for indirect call
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R1,#0x2
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine136_0 & 0xFFFF
// 3491       }
??CrossCallReturnLabel_317:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_270:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?CALL_IND
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R1,A
        SJMP      ??zclWriteAttrDataUsingCB_1
// 3492       else
// 3493       {
// 3494         status = ZCL_STATUS_SOFTWARE_FAILURE;
??zclWriteAttrDataUsingCB_2:
        MOV       R1,#-0x3f
        SJMP      ??zclWriteAttrDataUsingCB_1
// 3495       }
// 3496     }
// 3497   }
// 3498   else
// 3499   {
// 3500     status = ZCL_STATUS_READ_ONLY;
??zclWriteAttrDataUsingCB_0:
        MOV       R1,#-0x78
// 3501   }
// 3502 
// 3503   return ( status );
??zclWriteAttrDataUsingCB_1:
        LJMP      ?Subroutine4 & 0xFFFF
// 3504 }
          CFI EndBlock cfiBlock381
// 3505 
// 3506 /*********************************************************************
// 3507  * @fn      zclAuthorizeWrite
// 3508  *
// 3509  * @brief   Use application's callback to authorize a Write operation
// 3510  *          on a given attribute.
// 3511  *
// 3512  * @param   endpoint - application's endpoint
// 3513  * @param   srcAddr - source Address
// 3514  * @param   pAttr - pointer to attribute
// 3515  *
// 3516  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3517  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3518  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3519 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
zclAuthorizeWrite:
          CFI Block cfiBlock382 Using cfiCommon0
          CFI Function zclAuthorizeWrite
        CODE
// 3520 {
        FUNCALL zclAuthorizeWrite, zclGetAuthorizeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 3521   if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclAuthorizeWrite_0
// 3522   {
// 3523     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
        ; Setup parameters for call to function zclGetAuthorizeCB
        LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
        MOV       DPL,R2
        MOV       DPH,R3
// 3524 
// 3525     if ( pfnAuthorizeCB != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclAuthorizeWrite_0
// 3526     {
// 3527       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
        ; Setup parameters for indirect call
        MOV       R1,#0x2
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
        SJMP      ??zclAuthorizeWrite_1
// 3528     }
// 3529   }
// 3530 
// 3531   return ( ZCL_STATUS_SUCCESS );
??zclAuthorizeWrite_0:
        MOV       R1,#0x0
??zclAuthorizeWrite_1:
        LJMP      ?Subroutine4 & 0xFFFF
// 3532 }
          CFI EndBlock cfiBlock382
// 3533 #endif // ZCL_WRITE
// 3534 
// 3535 #ifdef ZCL_READ
// 3536 /*********************************************************************
// 3537  * @fn      zclParseInReadCmd
// 3538  *
// 3539  * @brief   Parse the "Profile" Read Commands
// 3540  *
// 3541  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3542  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3543  *
// 3544  * @param   pCmd - pointer to incoming data to parse
// 3545  *
// 3546  * @return  pointer to the parsed command structure
// 3547  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3548 void *zclParseInReadCmd( zclParseCmd_t *pCmd )
zclParseInReadCmd:
          CFI Block cfiBlock383 Using cfiCommon0
          CFI Function zclParseInReadCmd
        CODE
// 3549 {
        FUNCALL zclParseInReadCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3550   zclReadCmd_t *readCmd;
// 3551   uint8 *pBuf = pCmd->pData;
        LCALL     ?Subroutine67 & 0xFFFF
// 3552 
// 3553   readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
??CrossCallReturnLabel_105:
        LCALL     ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
// 3554   if ( readCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclParseInReadCmd_0
// 3555   {
// 3556     uint8 i;
// 3557     readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_306:
        CLR       C
        RRC       A
        MOV       A,R0
        RRC       A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 3558     for ( i = 0; i < readCmd->numAttr; i++ )
        MOV       R4,#0x0
        SJMP      ??zclParseInReadCmd_1
// 3559     {
// 3560       readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
??zclParseInReadCmd_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,?V0
        ADD       A,R0
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        MOV       A,R4
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 3561       pBuf += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclParseInReadCmd_3
        INC       R7
// 3562     }
??zclParseInReadCmd_3:
        INC       R4
??zclParseInReadCmd_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R4
        CLR       C
        SUBB      A,R0
        JC        ??zclParseInReadCmd_2
// 3563   }
// 3564 
// 3565   return ( (void *)readCmd );
??zclParseInReadCmd_0:
        LJMP      ?Subroutine3 & 0xFFFF
// 3566 }
          CFI EndBlock cfiBlock383

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine111:
          CFI Block cfiCond384 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_305
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond385 Using cfiCommon0
          CFI (cfiCond385) Function zcl_HandleExternal
          CFI (cfiCond385) Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_104
          CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond385) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond385) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond385) CFA_SP SP+-6
          CFI (cfiCond385) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond386 Using cfiCommon0
          CFI (cfiCond386) Function zcl_SendDefaultRspCmd
          CFI (cfiCond386) Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_103
          CFI (cfiCond386) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond386) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond386) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond386) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond386) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond386) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond386) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond386) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond386) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond386) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond386) CFA_SP SP+-6
          CFI (cfiCond386) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond387 Using cfiCommon0
          CFI (cfiCond387) Function zcl_ProcessMessageMSG
          CFI (cfiCond387) Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_194
          CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond387) CFA_SP SP+-6
          CFI (cfiCond387) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond388 Using cfiCommon0
          CFI (cfiCond388) Function zcl_ProcessMessageMSG
          CFI (cfiCond388) Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_195
          CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond388) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond388) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond388) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond388) CFA_SP SP+-6
          CFI (cfiCond388) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond389 Using cfiCommon0
          CFI (cfiCond389) Function zclReadAttrData
          CFI (cfiCond389) Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_193
          CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond389) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond389) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond389) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond389) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond389) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond389) CFA_SP SP+-6
          CFI (cfiCond389) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond390 Using cfiCommon0
          CFI (cfiCond390) Function zcl_ProcessMessageMSG
          CFI (cfiCond390) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_55
          CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond390) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond390) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond390) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond390) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond390) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond390) CFA_SP SP+-4
          CFI (cfiCond390) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond391 Using cfiCommon0
          CFI (cfiCond391) Function zcl_ProcessMessageMSG
          CFI (cfiCond391) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_56
          CFI (cfiCond391) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond391) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond391) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond391) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond391) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond391) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond391) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond391) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond391) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond391) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond391) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond391) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond391) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond391) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond391) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond391) CFA_SP SP+-4
          CFI (cfiCond391) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function zclParseInReadCmd
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_306
          CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond392) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond392) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond392) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond392) CFA_SP SP+-2
          CFI (cfiCond392) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function zcl_ProcessMessageMSG
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_232
          CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond393) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond393) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond393) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond393) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond393) CFA_SP SP+-6
          CFI (cfiCond393) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond394 Using cfiCommon0
          CFI (cfiCond394) Function zcl_ProcessMessageMSG
          CFI (cfiCond394) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_233
          CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond394) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond394) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond394) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond394) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond394) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond394) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond394) CFA_SP SP+-6
          CFI (cfiCond394) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond395 Using cfiCommon0
          CFI (cfiCond395) Function zcl_SendCommand
          CFI (cfiCond395) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_231
          CFI (cfiCond395) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond395) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond395) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond395) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond395) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond395) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond395) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond395) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond395) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond395) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond395) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond395) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond395) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond395) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond395) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond395) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond395) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond395) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond395) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond395) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond395) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond395) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond395) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond395) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond395) CFA_SP SP+-6
          CFI (cfiCond395) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond396 Using cfiCommon0
          CFI (cfiCond396) Function zcl_addExternalFoundationHandler
          CFI (cfiCond396) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_223
          CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond396) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond396) CFA_SP SP+-6
          CFI (cfiCond396) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond397 Using cfiCommon0
          CFI (cfiCond397) Function zcl_addExternalFoundationHandler
          CFI (cfiCond397) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_218
          CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond397) CFA_SP SP+-6
          CFI (cfiCond397) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond398 Using cfiCommon0
          CFI (cfiCond398) Function zcl_getExternalFoundationHandler
          CFI (cfiCond398) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_219
          CFI (cfiCond398) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond398) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond398) CFA_SP SP+-11
          CFI Block cfiCond399 Using cfiCommon0
          CFI (cfiCond399) Function zcl_SendCommand
          CFI (cfiCond399) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_220
          CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond399) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond399) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond399) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond399) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond399) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond399) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond399) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond399) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond399) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond399) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond399) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond399) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond399) CFA_SP SP+-6
          CFI (cfiCond399) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond400 Using cfiCommon0
          CFI (cfiCond400) Function zcl_SendCommand
          CFI (cfiCond400) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_221
          CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond400) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond400) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond400) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond400) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond400) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond400) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond400) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond400) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond400) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond400) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond400) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond400) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond400) CFA_SP SP+-6
          CFI (cfiCond400) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond401 Using cfiCommon0
          CFI (cfiCond401) Function zcl_ProcessMessageMSG
          CFI (cfiCond401) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_224
          CFI (cfiCond401) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond401) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond401) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond401) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond401) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond401) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond401) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond401) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond401) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond401) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond401) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond401) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond401) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond401) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond401) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond401) CFA_SP SP+-6
          CFI (cfiCond401) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond402 Using cfiCommon0
          CFI (cfiCond402) Function zcl_ProcessMessageMSG
          CFI (cfiCond402) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_225
          CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond402) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond402) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond402) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond402) CFA_SP SP+-6
          CFI (cfiCond402) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function zclFindClusterOption
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_222
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+-6
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function zcl_ReadAttrData
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_226
          CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond404) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond404) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond404) CFA_SP SP+-6
          CFI (cfiCond404) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond405 Using cfiCommon0
          CFI (cfiCond405) Function zclWriteAttrData
          CFI (cfiCond405) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_227
          CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond405) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond405) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond405) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond405) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond405) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond405) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond405) CFA_SP SP+-6
          CFI (cfiCond405) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond406 Using cfiCommon0
          CFI (cfiCond406) Function zclProcessInWriteCmd
          CFI (cfiCond406) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_228
          CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond406) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond406) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond406) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond406) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond406) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond406) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond406) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond406) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond406) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond406) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond406) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond406) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond406) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond406) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond406) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond406) CFA_SP SP+-6
          CFI (cfiCond406) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond407 Using cfiCommon0
          CFI (cfiCond407) Function zclProcessInWriteCmd
          CFI (cfiCond407) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_229
          CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond407) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond407) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond407) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond407) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond407) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond407) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond407) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond407) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond407) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond407) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond407) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond407) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond407) CFA_SP SP+-6
          CFI (cfiCond407) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond408 Using cfiCommon0
          CFI (cfiCond408) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond408) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_230
          CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond408) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond408) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond408) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond408) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond408) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond408) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond408) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond408) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond408) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond408) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond408) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond408) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond408) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond408) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond408) CFA_SP SP+-6
          CFI (cfiCond408) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond409 Using cfiCommon0
          CFI (cfiCond409) Function zclParseInReadCmd
          CFI (cfiCond409) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_105
          CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond409) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond409) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond409) CFA_SP SP+-6
          CFI (cfiCond409) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond410 Using cfiCommon0
          CFI (cfiCond410) Function zclParseInDefaultRspCmd
          CFI (cfiCond410) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_106
          CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond410) CFA_SP SP+-6
          CFI (cfiCond410) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond411 Using cfiCommon0
          CFI (cfiCond411) Function zclParseInReadRspCmd
          CFI (cfiCond411) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_40
          CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond411) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond411) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond411) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond411) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond411) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond411) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond411) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond411) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond411) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond411) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond411) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond411) CFA_SP SP+-6
          CFI (cfiCond411) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond412 Using cfiCommon0
          CFI (cfiCond412) Function zclProcessInReadCmd
          CFI (cfiCond412) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_41
          CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond412) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond412) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond412) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond412) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond412) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond412) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond412) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond412) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond412) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond412) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond412) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond412) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond412) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond412) CFA_SP SP+-6
          CFI (cfiCond412) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond413 Using cfiCommon0
          CFI (cfiCond413) Function zclProcessInReadCmd
          CFI (cfiCond413) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_42
          CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond413) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond413) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond413) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond413) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond413) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond413) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond413) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond413) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond413) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond413) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond413) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond413) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond413) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond413) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond413) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond413) CFA_SP SP+-6
          CFI (cfiCond413) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond414 Using cfiCommon0
          CFI (cfiCond414) Function zclProcessInWriteCmd
          CFI (cfiCond414) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_0
          CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond414) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond414) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond414) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond414) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond414) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond414) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond414) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond414) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond414) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond414) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond414) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond414) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond414) CFA_SP SP+-6
          CFI (cfiCond414) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond415 Using cfiCommon0
          CFI (cfiCond415) Function zclProcessInWriteCmd
          CFI (cfiCond415) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_1
          CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond415) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond415) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond415) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond415) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond415) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond415) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond415) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond415) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond415) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond415) CFA_SP SP+-6
          CFI (cfiCond415) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond416 Using cfiCommon0
          CFI (cfiCond416) Function zcl_SendReadRsp
          CFI (cfiCond416) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_298
          CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond416) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond416) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond416) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond416) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond416) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond416) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond416) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond416) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond416) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond416) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond416) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond416) CFA_SP SP+-6
          CFI (cfiCond416) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond417 Using cfiCommon0
          CFI (cfiCond417) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond417) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_299
          CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond417) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond417) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond417) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond417) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond417) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond417) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond417) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond417) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond417) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond417) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond417) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond417) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond417) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond417) CFA_SP SP+-6
          CFI (cfiCond417) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond418 Using cfiCommon0
          CFI (cfiCond418) Function zcl_addExternalFoundationHandler
          CFI (cfiCond418) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_293
          CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond418) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond418) CFA_SP SP+-6
          CFI (cfiCond418) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond419 Using cfiCommon0
          CFI (cfiCond419) Function zclProcessInReadCmd
          CFI (cfiCond419) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_294
          CFI (cfiCond419) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond419) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond419) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond419) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond419) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond419) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond419) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond419) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond419) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond419) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond419) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond419) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond419) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond419) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond419) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond419) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond419) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond419) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond419) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond419) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond419) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond419) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond419) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond419) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond419) CFA_SP SP+-6
          CFI (cfiCond419) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond420 Using cfiCommon0
          CFI (cfiCond420) Function zclRevertWriteUndividedCmd
          CFI (cfiCond420) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_295
          CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond420) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond420) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond420) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond420) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond420) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond420) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond420) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond420) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond420) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond420) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond420) CFA_SP SP+-6
          CFI (cfiCond420) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond421 Using cfiCommon0
          CFI (cfiCond421) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond421) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_296
          CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond421) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond421) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond421) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond421) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond421) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond421) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond421) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond421) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond421) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond421) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond421) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond421) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond421) CFA_SP SP+-6
          CFI (cfiCond421) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond422 Using cfiCommon0
          CFI (cfiCond422) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond422) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_297
          CFI (cfiCond422) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond422) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond422) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond422) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond422) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond422) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond422) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond422) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond422) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond422) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond422) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond422) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond422) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond422) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond422) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond422) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond422) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond422) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond422) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond422) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond422) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond422) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond422) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond422) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond422) CFA_SP SP+-6
          CFI (cfiCond422) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond423 Using cfiCommon0
          CFI (cfiCond423) Function zcl_ProcessMessageMSG
          CFI (cfiCond423) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_38
          CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond423) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond423) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond423) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond423) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond423) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond423) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond423) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond423) CFA_SP SP+-6
          CFI (cfiCond423) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond424 Using cfiCommon0
          CFI (cfiCond424) Function zcl_ProcessMessageMSG
          CFI (cfiCond424) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_39
          CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond424) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond424) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond424) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond424) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond424) CFA_SP SP+-6
          CFI (cfiCond424) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond425 Using cfiCommon0
          CFI (cfiCond425) Function zcl_ProcessMessageMSG
          CFI (cfiCond425) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_232
          CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond425) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond425) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond425) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond425) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond425) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond425) CFA_SP SP+-6
          CFI (cfiCond425) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond426 Using cfiCommon0
          CFI (cfiCond426) Function zcl_ProcessMessageMSG
          CFI (cfiCond426) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_233
          CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond426) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond426) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond426) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond426) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond426) CFA_SP SP+-6
          CFI (cfiCond426) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond427 Using cfiCommon0
          CFI (cfiCond427) Function zcl_event_loop
          CFI (cfiCond427) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
          CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond427) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond427) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond427) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond427) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond427) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond427) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond427) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond427) CFA_SP SP+-6
          CFI (cfiCond427) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond428 Using cfiCommon0
          CFI (cfiCond428) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond428) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
          CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond428) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond428) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond428) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond428) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond428) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond428) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond428) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond428) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond428) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond428) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond428) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond428) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond428) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond428) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond428) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond428) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond428) CFA_SP SP+-6
          CFI (cfiCond428) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond429 Using cfiCommon0
          CFI (cfiCond429) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond429) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_59
          CFI (cfiCond429) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond429) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond429) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond429) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond429) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond429) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond429) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond429) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond429) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond429) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond429) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond429) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond429) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond429) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond429) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond429) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond429) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond429) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond429) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond429) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond429) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond429) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond429) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond429) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond429) CFA_SP SP+-6
          CFI (cfiCond429) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond430 Using cfiCommon0
          CFI (cfiCond430) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond430) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_60
          CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond430) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond430) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond430) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond430) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond430) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond430) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond430) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond430) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond430) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond430) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond430) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond430) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond430) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond430) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond430) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond430) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond430) CFA_SP SP+-6
          CFI (cfiCond430) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker431 Using cfiCommon1
          CFI (cfiPicker431) NoFunction
          CFI (cfiPicker431) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond384
          CFI EndBlock cfiCond385
          CFI EndBlock cfiCond386
          CFI EndBlock cfiCond387
          CFI EndBlock cfiCond388
          CFI EndBlock cfiCond389
          CFI EndBlock cfiCond390
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiCond394
          CFI EndBlock cfiCond395
          CFI EndBlock cfiCond396
          CFI EndBlock cfiCond397
          CFI EndBlock cfiCond398
          CFI EndBlock cfiCond399
          CFI EndBlock cfiCond400
          CFI EndBlock cfiCond401
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiCond405
          CFI EndBlock cfiCond406
          CFI EndBlock cfiCond407
          CFI EndBlock cfiCond408
          CFI EndBlock cfiCond409
          CFI EndBlock cfiCond410
          CFI EndBlock cfiCond411
          CFI EndBlock cfiCond412
          CFI EndBlock cfiCond413
          CFI EndBlock cfiCond414
          CFI EndBlock cfiCond415
          CFI EndBlock cfiCond416
          CFI EndBlock cfiCond417
          CFI EndBlock cfiCond418
          CFI EndBlock cfiCond419
          CFI EndBlock cfiCond420
          CFI EndBlock cfiCond421
          CFI EndBlock cfiCond422
          CFI EndBlock cfiCond423
          CFI EndBlock cfiCond424
          CFI EndBlock cfiCond425
          CFI EndBlock cfiCond426
          CFI EndBlock cfiCond427
          CFI EndBlock cfiCond428
          CFI EndBlock cfiCond429
          CFI EndBlock cfiCond430
          CFI EndBlock cfiPicker431
// 3567 
// 3568 /*********************************************************************
// 3569  * @fn      zclParseInReadRspCmd
// 3570  *
// 3571  * @brief   Parse the "Profile" Read Response Commands
// 3572  *
// 3573  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3574  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3575  *
// 3576  * @param   pCmd - pointer to incoming data to parse
// 3577  *
// 3578  * @return  pointer to the parsed command structure
// 3579  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3580 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
zclParseInReadRspCmd:
          CFI Block cfiBlock432 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
        CODE
// 3581 {
        FUNCALL zclParseInReadRspCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInReadRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInReadRspCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInReadRspCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V8,R2
        MOV       ?V9,R3
// 3582   zclReadRspCmd_t *readRspCmd;
// 3583   uint8 *pBuf = pCmd->pData;
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V9
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        LCALL     ??Subroutine133_0 & 0xFFFF
// 3584   uint8 *dataPtr;
// 3585   uint8 numAttr = 0;
??CrossCallReturnLabel_281:
        MOV       ?V2,#0x0
// 3586   uint8 hdrLen;
// 3587   uint16 dataLen = 0;
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        SJMP      ??zclParseInReadRspCmd_0
// 3588   uint16 attrDataLen;
// 3589 
// 3590   // find out the number of attributes and the length of attribute data
// 3591   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3592   {
// 3593     uint8 status;
// 3594 
// 3595     numAttr++;
??zclParseInReadRspCmd_1:
        INC       ?V2
// 3596     pBuf += 2; // move pass attribute id
// 3597 
// 3598     status = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclParseInReadRspCmd_2
        INC       R7
// 3599     if ( status == ZCL_STATUS_SUCCESS )
??zclParseInReadRspCmd_2:
        MOV       A,R0
        JNZ       ??zclParseInReadRspCmd_0
// 3600     {
// 3601       uint8 dataType = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 3602 
// 3603       attrDataLen = zclGetAttrDataLength( dataType, pBuf );
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3604       pBuf += attrDataLen; // move pass attribute data
        MOV       A,R6
        ADD       A,R2
        MOV       R6,A
        MOV       A,R7
        ADDC      A,?V1
        MOV       R7,A
// 3605 
// 3606       // add padding if needed
// 3607       if ( PADDING_NEEDED( attrDataLen ) )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclParseInReadRspCmd_3
// 3608       {
// 3609         attrDataLen++;
        INC       ?V0
        INC       A
        JNZ       ??zclParseInReadRspCmd_3
        INC       ?V1
// 3610       }
// 3611 
// 3612       dataLen += attrDataLen;
??zclParseInReadRspCmd_3:
        MOV       A,?V6
        ADD       A,?V0
        MOV       ?V6,A
        MOV       A,?V7
        ADDC      A,?V1
        MOV       ?V7,A
// 3613     }
// 3614   }
??zclParseInReadRspCmd_0:
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_171:
        MOV       A,R6
        SUBB      A,R0
        MOV       A,R7
        SUBB      A,R1
        JC        ??zclParseInReadRspCmd_1
// 3615 
// 3616   // calculate the length of the response header
// 3617   hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
        MOV       B,#0x6
        MOV       A,?V2
        MUL       AB
        INC       A
        MOV       ?V0,A
// 3618 
// 3619   readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD       A,?V6
        MOV       R2,A
        CLR       A
        ADDC      A,?V7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V10,R2
        MOV       ?V11,R3
// 3620   if ( readRspCmd != NULL )
        MOV       A,R2
        ORL       A,?V11
        JNZ       $+5
        LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
// 3621   {
// 3622     uint8 i;
// 3623     pBuf = pCmd->pData;
        LCALL     ?Subroutine39 & 0xFFFF
// 3624     dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
??CrossCallReturnLabel_286:
        MOV       R0,?V0
        MOV       A,R2
        ADD       A,R0
        MOV       ?V8,A
        CLR       A
        ADDC      A,R3
        MOV       ?V9,A
// 3625 
// 3626     readRspCmd->numAttr = numAttr;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V2
        MOVX      @DPTR,A
// 3627     for ( i = 0; i < numAttr; i++ )
        MOV       ?V3,#0x0
        LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
// 3628     {
// 3629       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
??zclParseInReadRspCmd_6:
        MOV       A,?V3
        MOV       B,#0x6
        LCALL     ?Subroutine86 & 0xFFFF
// 3630 
// 3631       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_144:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     ??Subroutine118_0 & 0xFFFF
// 3632       pBuf += 2;
// 3633 
// 3634       statusRec->status = *pBuf++;
??CrossCallReturnLabel_199:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclParseInReadRspCmd_7
        INC       R7
// 3635       if ( statusRec->status == ZCL_STATUS_SUCCESS )
??zclParseInReadRspCmd_7:
        MOV       A,R0
        JNZ       ??zclParseInReadRspCmd_8
// 3636       {
// 3637         statusRec->dataType = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL     ?Subroutine12 & 0xFFFF
// 3638 
// 3639         attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
??CrossCallReturnLabel_242:
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3640         zcl_memcpy( dataPtr, pBuf, attrDataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3641         statusRec->data = dataPtr;
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V8
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V9
        MOVX      @DPTR,A
// 3642 
// 3643         pBuf += attrDataLen; // move pass attribute data
        MOV       A,R6
        ADD       A,?V0
        MOV       R6,A
        MOV       A,R7
        ADDC      A,?V1
        MOV       R7,A
// 3644 
// 3645         // advance attribute data pointer
// 3646         if ( PADDING_NEEDED( attrDataLen ) )
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclParseInReadRspCmd_9
// 3647         {
// 3648           attrDataLen++;
        INC       ?V0
        INC       A
        JNZ       ??zclParseInReadRspCmd_9
        INC       ?V1
// 3649         }
// 3650 
// 3651         dataPtr += attrDataLen;
??zclParseInReadRspCmd_9:
        MOV       A,?V8
        ADD       A,?V0
        MOV       ?V8,A
        MOV       A,?V9
        ADDC      A,?V1
        MOV       ?V9,A
// 3652       }
// 3653     }
??zclParseInReadRspCmd_8:
        INC       ?V3
??zclParseInReadRspCmd_5:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V2
        JNC       $+5
        LJMP      ??zclParseInReadRspCmd_6 & 0xFFFF
// 3654   }
// 3655 
// 3656   return ( (void *)readRspCmd );
??zclParseInReadRspCmd_4:
        LJMP      ?Subroutine7 & 0xFFFF
// 3657 }
          CFI EndBlock cfiBlock432

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond433 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_242
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond434 Using cfiCommon0
          CFI (cfiCond434) Function zclParseInWriteRspCmd
          CFI (cfiCond434) Conditional ??CrossCallReturnLabel_243
          CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond434) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond434) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond434) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond434) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond434) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond434) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond434) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond434) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond434) CFA_SP SP+-2
          CFI (cfiCond434) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker435 Using cfiCommon1
          CFI (cfiPicker435) NoFunction
          CFI (cfiPicker435) Picker
        INC       DPTR
          CFI EndBlock cfiCond433
          CFI EndBlock cfiCond434
          CFI EndBlock cfiPicker435
        REQUIRE ??Subroutine127_0
        ; // Fall through to label ??Subroutine127_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine127_0:
          CFI Block cfiCond436 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_241
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond437 Using cfiCommon0
          CFI (cfiCond437) Function zclParseInReadRspCmd
          CFI (cfiCond437) Conditional ??CrossCallReturnLabel_242
          CFI (cfiCond437) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond437) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond437) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond437) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond437) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond437) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond437) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond437) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond437) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond437) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond437) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond437) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond437) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond437) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond437) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond437) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond437) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond437) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond437) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond437) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond437) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond437) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond437) CFA_SP SP+-2
          CFI (cfiCond437) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond438 Using cfiCommon0
          CFI (cfiCond438) Function zclParseInWriteRspCmd
          CFI (cfiCond438) Conditional ??CrossCallReturnLabel_243
          CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond438) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond438) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond438) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond438) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond438) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond438) CFA_SP SP+-2
          CFI (cfiCond438) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker439 Using cfiCommon1
          CFI (cfiPicker439) NoFunction
          CFI (cfiPicker439) Picker
        LCALL     ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_246:
        MOV       R6,DPL
        MOV       R7,DPH
        RET
          CFI EndBlock cfiCond436
          CFI EndBlock cfiCond437
          CFI EndBlock cfiCond438
          CFI EndBlock cfiPicker439
// 3658 #endif // ZCL_READ
// 3659 
// 3660 #ifdef ZCL_WRITE
// 3661 /*********************************************************************
// 3662  * @fn      zclParseInWriteCmd
// 3663  *
// 3664  * @brief   Parse the "Profile" Write, Write Undivided and Write No
// 3665  *          Response Commands
// 3666  *
// 3667  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3668  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3669  *
// 3670  * @param   pCmd - pointer to incoming data to parse
// 3671  *
// 3672  * @return  pointer to the parsed command structure
// 3673  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3674 void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
zclParseInWriteCmd:
          CFI Block cfiBlock440 Using cfiCommon0
          CFI Function zclParseInWriteCmd
        CODE
// 3675 {
        FUNCALL zclParseInWriteCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInWriteCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInWriteCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInWriteCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V8,R2
        MOV       ?V9,R3
// 3676   zclWriteCmd_t *writeCmd;
// 3677   uint8 *pBuf = pCmd->pData;
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V9
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        LCALL     ?Subroutine52 & 0xFFFF
// 3678   uint16 attrDataLen;
// 3679   uint8 *dataPtr;
// 3680   uint8 numAttr = 0;
??CrossCallReturnLabel_76:
        MOV       ?V7,#0x0
// 3681   uint8 hdrLen;
// 3682   uint16 dataLen = 0;
        MOV       ?V4,#0x0
        MOV       ?V5,#0x0
        SJMP      ??zclParseInWriteCmd_0
// 3683 
// 3684   // find out the number of attributes and the length of attribute data
// 3685   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3686   {
// 3687     uint8 dataType;
// 3688 
// 3689     numAttr++;
??zclParseInWriteCmd_1:
        INC       ?V7
// 3690     pBuf += 2; // move pass attribute id
// 3691 
// 3692     dataType = *pBuf++;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??zclParseInWriteCmd_2
        INC       ?V1
// 3693 
// 3694     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
??zclParseInWriteCmd_2:
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       R2,A
        MOV       R3,?V1
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       R6,?V10
        MOV       R7,?V11
// 3695     pBuf += attrDataLen; // move pass attribute data
        MOV       A,?V0
        ADD       A,R2
        MOV       ?V0,A
        MOV       A,?V1
        ADDC      A,R7
        MOV       ?V1,A
// 3696 
// 3697     // add padding if needed
// 3698     if ( PADDING_NEEDED( attrDataLen ) )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclParseInWriteCmd_3
// 3699     {
// 3700       attrDataLen++;
        INC       R6
        INC       A
        JNZ       ??zclParseInWriteCmd_3
        INC       R7
// 3701     }
// 3702 
// 3703     dataLen += attrDataLen;
??zclParseInWriteCmd_3:
        MOV       A,?V4
        ADD       A,R6
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,R7
        MOV       ?V5,A
// 3704   }
??zclParseInWriteCmd_0:
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV       A,?V0
        SUBB      A,R0
        MOV       A,?V1
        SUBB      A,R1
        JC        ??zclParseInWriteCmd_1
// 3705 
// 3706   // calculate the length of the response header
// 3707   hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
        MOV       B,#0x5
        MOV       A,?V7
        MUL       AB
        INC       A
        MOV       R6,A
// 3708 
// 3709   writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD       A,?V4
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V10,R2
        MOV       ?V11,R3
// 3710   if ( writeCmd != NULL )
        MOV       A,R2
        ORL       A,?V11
        JNZ       $+5
        LJMP      ??zclParseInWriteCmd_4 & 0xFFFF
// 3711   {
// 3712     uint8 i;
// 3713     pBuf = pCmd->pData;
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine52 & 0xFFFF
// 3714     dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
??CrossCallReturnLabel_77:
        MOV       A,R2
        ADD       A,R6
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
// 3715 
// 3716     writeCmd->numAttr = numAttr;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V7
        MOVX      @DPTR,A
// 3717     for ( i = 0; i < numAttr; i++ )
        MOV       ?V8,#0x0
        LJMP      ??zclParseInWriteCmd_5 & 0xFFFF
// 3718     {
// 3719       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
??zclParseInWriteCmd_6:
        MOV       A,?V8
        MOV       B,#0x5
        LCALL     ?Subroutine86 & 0xFFFF
// 3720 
// 3721       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_145:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     ?Subroutine17 & 0xFFFF
// 3722       pBuf += 2;
// 3723       statusRec->dataType = *pBuf++;
??CrossCallReturnLabel_208:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_88:
        MOVX      @DPTR,A
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??zclParseInWriteCmd_7
        INC       ?V1
// 3724 
// 3725       attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
??zclParseInWriteCmd_7:
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       R2,A
        MOV       R3,?V1
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3726       zcl_memcpy( dataPtr, pBuf, attrDataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3727       statusRec->attrData = dataPtr;
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
// 3728 
// 3729       pBuf += attrDataLen; // move pass attribute data
        MOV       A,?V0
        ADD       A,R6
        MOV       ?V0,A
        MOV       A,?V1
        ADDC      A,R7
        MOV       ?V1,A
// 3730 
// 3731       // advance attribute data pointer
// 3732       if ( PADDING_NEEDED( attrDataLen ) )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclParseInWriteCmd_8
// 3733       {
// 3734         attrDataLen++;
        INC       R6
        INC       A
        JNZ       ??zclParseInWriteCmd_8
        INC       R7
// 3735       }
// 3736 
// 3737       dataPtr += attrDataLen;
??zclParseInWriteCmd_8:
        MOV       A,?V2
        ADD       A,R6
        MOV       ?V2,A
        MOV       A,?V3
        ADDC      A,R7
        MOV       ?V3,A
// 3738     }
        INC       ?V8
??zclParseInWriteCmd_5:
        MOV       A,?V8
        CLR       C
        SUBB      A,?V7
        JNC       $+5
        LJMP      ??zclParseInWriteCmd_6 & 0xFFFF
// 3739   }
// 3740 
// 3741   return ( (void *)writeCmd );
??zclParseInWriteCmd_4:
        LJMP      ?Subroutine7 & 0xFFFF
// 3742 }
          CFI EndBlock cfiBlock440

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine86:
          CFI Block cfiCond441 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_144
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond442 Using cfiCommon0
          CFI (cfiCond442) Function zclParseInWriteCmd
          CFI (cfiCond442) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond442) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond442) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond442) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond442) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond442) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond442) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond442) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond442) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond442) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond442) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond442) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond442) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond442) CFA_SP SP+-2
          CFI (cfiCond442) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker443 Using cfiCommon1
          CFI (cfiPicker443) NoFunction
          CFI (cfiPicker443) Picker
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V10
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V11
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        MOV       ?V12,DPL
        MOV       ?V13,DPH
        RET
          CFI EndBlock cfiCond441
          CFI EndBlock cfiCond442
          CFI EndBlock cfiPicker443

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine59:
          CFI Block cfiCond444 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond445 Using cfiCommon0
          CFI (cfiCond445) Function zclParseInWriteCmd
          CFI (cfiCond445) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond445) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond445) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond445) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond445) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond445) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond445) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond445) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond445) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond445) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond445) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond445) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond445) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond445) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond445) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond445) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond445) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond445) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond445) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond445) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond445) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond445) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond445) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond445) CFA_SP SP+-2
          CFI (cfiCond445) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker446 Using cfiCommon1
          CFI (cfiPicker446) NoFunction
          CFI (cfiPicker446) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond444
          CFI EndBlock cfiCond445
          CFI EndBlock cfiPicker446

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond447 Using cfiCommon0
          CFI Function zclWriteAttrData
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond448 Using cfiCommon0
          CFI (cfiCond448) Function zclParseInWriteCmd
          CFI (cfiCond448) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond448) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond448) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond448) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond448) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond448) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond448) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond448) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond448) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond448) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond448) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond448) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond448) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond448) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond448) CFA_SP SP+-2
          CFI (cfiCond448) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond449 Using cfiCommon0
          CFI (cfiCond449) Function zclParseInWriteCmd
          CFI (cfiCond449) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond449) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond449) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond449) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond449) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond449) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond449) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond449) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond449) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond449) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond449) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond449) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond449) CFA_SP SP+-2
          CFI (cfiCond449) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker450 Using cfiCommon1
          CFI (cfiPicker450) NoFunction
          CFI (cfiPicker450) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond447
          CFI EndBlock cfiCond448
          CFI EndBlock cfiCond449
          CFI EndBlock cfiPicker450

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond451 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond452 Using cfiCommon0
          CFI (cfiCond452) Function zclParseInWriteCmd
          CFI (cfiCond452) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond452) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond452) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond452) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond452) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond452) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond452) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond452) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond452) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond452) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond452) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond452) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond452) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond452) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond452) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond452) CFA_SP SP+-2
          CFI (cfiCond452) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker453 Using cfiCommon1
          CFI (cfiPicker453) NoFunction
          CFI (cfiPicker453) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       DPL,?V12
        MOV       DPH,?V13
        RET
          CFI EndBlock cfiCond451
          CFI EndBlock cfiCond452
          CFI EndBlock cfiPicker453
// 3743 
// 3744 /*********************************************************************
// 3745  * @fn      zclParseInWriteRspCmd
// 3746  *
// 3747  * @brief   Parse the "Profile" Write Response Commands
// 3748  *
// 3749  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3750  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3751  *
// 3752  * @param   pCmd - pointer to incoming data to parse
// 3753  *
// 3754  * @return  pointer to the parsed command structure
// 3755  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3756 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
zclParseInWriteRspCmd:
          CFI Block cfiBlock454 Using cfiCommon0
          CFI Function zclParseInWriteRspCmd
        CODE
// 3757 {
        FUNCALL zclParseInWriteRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 3758   zclWriteRspCmd_t *writeRspCmd;
// 3759   uint8 *pBuf = pCmd->pData;
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        LCALL     ??Subroutine133_0 & 0xFFFF
// 3760   uint8 i = 0;
??CrossCallReturnLabel_282:
        MOV       ?V4,#0x0
// 3761 
// 3762   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
        LCALL     ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
// 3763   if ( writeRspCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclParseInWriteRspCmd_0
// 3764   {
// 3765     if ( pCmd->dataLen == 1 )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclParseInWriteRspCmd_1
        INC       DPTR
        MOVX      A,@DPTR
??zclParseInWriteRspCmd_1:
        JNZ       ??zclParseInWriteRspCmd_2
// 3766     {
// 3767       // special case when all writes were successfull
// 3768       writeRspCmd->attrList[i++].status = *pBuf;
        LCALL     ?Subroutine104 & 0xFFFF
// 3769     }
??CrossCallReturnLabel_239:
        INC       DPTR
        MOVX      @DPTR,A
        MOV       ?V4,#0x1
        SJMP      ??zclParseInWriteRspCmd_3
// 3770     else
// 3771     {
// 3772       while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3773       {
// 3774         writeRspCmd->attrList[i].status = *pBuf++;
??zclParseInWriteRspCmd_4:
        MOV       A,?V4
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL     ?Subroutine12 & 0xFFFF
// 3775         writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_243:
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,?V6
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        INC       ?V4
// 3776         pBuf += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclParseInWriteRspCmd_2
        INC       R7
// 3777       }
??zclParseInWriteRspCmd_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine38 & 0xFFFF
// 3778     }
??CrossCallReturnLabel_44:
        MOV       A,R6
        SUBB      A,R0
        MOV       A,R7
        SUBB      A,R1
        JC        ??zclParseInWriteRspCmd_4
// 3779 
// 3780     writeRspCmd->numAttr = i;
??zclParseInWriteRspCmd_3:
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V4
        MOVX      @DPTR,A
// 3781   }
// 3782 
// 3783   return ( (void *)writeRspCmd );
??zclParseInWriteRspCmd_0:
        LJMP      ??Subroutine122_0 & 0xFFFF
// 3784 }
          CFI EndBlock cfiBlock454

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine72:
          CFI Block cfiCond455 Using cfiCommon0
          CFI Function zclParseInReadCmd
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond456 Using cfiCommon0
          CFI (cfiCond456) Function zclParseInWriteRspCmd
          CFI (cfiCond456) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond456) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond456) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond456) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond456) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond456) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond456) CFA_SP SP+-2
          CFI (cfiCond456) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker457 Using cfiCommon1
          CFI (cfiPicker457) NoFunction
          CFI (cfiPicker457) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        RET
          CFI EndBlock cfiCond455
          CFI EndBlock cfiCond456
          CFI EndBlock cfiPicker457

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond458 Using cfiCommon0
          CFI Function zclParseInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond459 Using cfiCommon0
          CFI (cfiCond459) Function zclParseInWriteRspCmd
          CFI (cfiCond459) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond459) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond459) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond459) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond459) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond459) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond459) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond459) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond459) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond459) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond459) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond459) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond459) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond459) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond459) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond459) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond459) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond459) CFA_SP SP+-2
          CFI (cfiCond459) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker460 Using cfiCommon1
          CFI (cfiPicker460) NoFunction
          CFI (cfiPicker460) Picker
        LCALL     ?Subroutine96 & 0xFFFF
??CrossCallReturnLabel_328:
        LCALL     ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_172:
        RET
          CFI EndBlock cfiCond458
          CFI EndBlock cfiCond459
          CFI EndBlock cfiPicker460

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine106:
          CFI Block cfiCond461 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_171
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond462 Using cfiCommon0
          CFI (cfiCond462) Function zclParseInWriteCmd
          CFI (cfiCond462) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_43
          CFI (cfiCond462) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond462) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond462) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond462) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond462) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond462) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond462) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond462) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond462) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond462) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond462) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond462) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond462) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond462) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond462) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond462) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond462) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond462) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond462) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond462) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond462) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond462) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond462) CFA_SP SP+-4
          CFI (cfiCond462) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond463 Using cfiCommon0
          CFI (cfiCond463) Function zclParseInWriteRspCmd
          CFI (cfiCond463) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_44
          CFI (cfiCond463) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond463) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond463) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond463) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond463) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond463) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond463) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond463) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond463) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond463) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond463) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond463) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond463) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond463) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond463) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond463) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond463) CFA_SP SP+-4
          CFI (cfiCond463) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker464 Using cfiCommon1
          CFI (cfiPicker464) NoFunction
          CFI (cfiPicker464) Picker
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        CLR       C
        RET
          CFI EndBlock cfiCond461
          CFI EndBlock cfiCond462
          CFI EndBlock cfiCond463
          CFI EndBlock cfiPicker464
// 3785 #endif // ZCL_WRITE
// 3786 
// 3787 #ifdef ZCL_REPORTING_DEVICE
// 3788 /*********************************************************************
// 3789  * @fn      zclParseInConfigReportCmd
// 3790  *
// 3791  * @brief   Parse the "Profile" Configure Reporting Command
// 3792  *
// 3793  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3794  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3795  *
// 3796  * @param   pCmd - pointer to incoming data to parse
// 3797  *
// 3798  * @return  pointer to the parsed command structure
// 3799  */
// 3800 void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
// 3801 {
// 3802   zclCfgReportCmd_t *cfgReportCmd;
// 3803   uint8 *pBuf = pCmd->pData;
// 3804   uint8 *dataPtr;
// 3805   uint8 numAttr = 0;
// 3806   uint8 dataType;
// 3807   uint8 hdrLen;
// 3808   uint16 dataLen = 0;
// 3809   uint8 reportChangeLen; // length of Reportable Change field
// 3810 
// 3811   // Calculate the length of the Request command
// 3812   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3813   {
// 3814     uint8 direction;
// 3815 
// 3816     numAttr++;
// 3817     direction = *pBuf++;
// 3818     pBuf += 2; // move pass the attribute ID
// 3819 
// 3820     // Is there a Reportable Change field?
// 3821     if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3822     {
// 3823       dataType = *pBuf++;
// 3824       pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3825 
// 3826       // For attributes of 'discrete' data types this field is omitted
// 3827       if ( zclAnalogDataType( dataType ) )
// 3828       {
// 3829         reportChangeLen = zclGetDataTypeLength( dataType );
// 3830         pBuf += reportChangeLen;
// 3831 
// 3832         // add padding if needed
// 3833         if ( PADDING_NEEDED( reportChangeLen ) )
// 3834         {
// 3835           reportChangeLen++;
// 3836         }
// 3837 
// 3838         dataLen += reportChangeLen;
// 3839       }
// 3840       else
// 3841       {
// 3842         pBuf++; // move past reportable change field
// 3843       }
// 3844     }
// 3845     else
// 3846     {
// 3847       pBuf += 2; // move pass the Timeout Period
// 3848     }
// 3849   } // while loop
// 3850 
// 3851   hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
// 3852 
// 3853   cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3854   if ( cfgReportCmd != NULL )
// 3855   {
// 3856     uint8 i;
// 3857     pBuf = pCmd->pData;
// 3858     dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
// 3859 
// 3860     cfgReportCmd->numAttr = numAttr;
// 3861     for ( i = 0; i < numAttr; i++ )
// 3862     {
// 3863       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 3864 
// 3865       zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
// 3866 
// 3867       reportRec->direction = *pBuf++;
// 3868       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3869       pBuf += 2;
// 3870       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3871       {
// 3872         // Attribute to be reported
// 3873         reportRec->dataType = *pBuf++;
// 3874         reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3875         pBuf += 2;
// 3876         reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3877         pBuf += 2;
// 3878 
// 3879         // For attributes of 'discrete' data types this field is omitted
// 3880         if ( zclAnalogDataType( reportRec->dataType ) )
// 3881         {
// 3882           zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
// 3883           reportRec->reportableChange = dataPtr;
// 3884 
// 3885           reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
// 3886           pBuf += reportChangeLen;
// 3887 
// 3888           // advance attribute data pointer
// 3889           if ( PADDING_NEEDED( reportChangeLen ) )
// 3890           {
// 3891             reportChangeLen++;
// 3892           }
// 3893 
// 3894           dataPtr += reportChangeLen;
// 3895         }
// 3896       }
// 3897       else
// 3898       {
// 3899         // Attribute reports to be received
// 3900         reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3901         pBuf += 2;
// 3902       }
// 3903     } // while loop
// 3904   }
// 3905 
// 3906   return ( (void *)cfgReportCmd );
// 3907 }
// 3908 #endif
// 3909 
// 3910 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 3911 /*********************************************************************
// 3912  * @fn      zclParseInConfigReportRspCmd
// 3913  *
// 3914  * @brief   Parse the "Profile" Configure Reporting Response Command
// 3915  *
// 3916  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3917  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3918  *
// 3919  * @param   pCmd - pointer to incoming data to parse
// 3920  *
// 3921  * @return  pointer to the parsed command structure
// 3922  */
// 3923 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
// 3924 {
// 3925   zclCfgReportRspCmd_t *cfgReportRspCmd;
// 3926   uint8 *pBuf = pCmd->pData;
// 3927   uint8 numAttr;
// 3928 
// 3929   numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
// 3930 
// 3931   cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
// 3932                                             + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
// 3933   if ( cfgReportRspCmd != NULL )
// 3934   {
// 3935     uint8 i;
// 3936     cfgReportRspCmd->numAttr = numAttr;
// 3937     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 3938     {
// 3939       cfgReportRspCmd->attrList[i].status = *pBuf++;
// 3940       cfgReportRspCmd->attrList[i].direction = *pBuf++;
// 3941       cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3942       pBuf += 2;
// 3943     }
// 3944   }
// 3945 
// 3946   return ( (void *)cfgReportRspCmd );
// 3947 }
// 3948 #endif
// 3949 
// 3950 #ifdef ZCL_REPORTING_DEVICE
// 3951 /*********************************************************************
// 3952  * @fn      zclParseInReadReportCfgCmd
// 3953  *
// 3954  * @brief   Parse the "Profile" Read Reporting Configuration Command
// 3955  *
// 3956  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3957  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3958  *
// 3959  * @param   pCmd - pointer to incoming data to parse
// 3960  *
// 3961  * @return  pointer to the parsed command structure
// 3962  */
// 3963 void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
// 3964 {
// 3965   zclReadReportCfgCmd_t *readReportCfgCmd;
// 3966   uint8 *pBuf = pCmd->pData;
// 3967   uint8 numAttr;
// 3968 
// 3969   numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
// 3970 
// 3971   readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
// 3972                                                   + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
// 3973   if ( readReportCfgCmd != NULL )
// 3974   {
// 3975     uint8 i;
// 3976     readReportCfgCmd->numAttr = numAttr;
// 3977     for ( i = 0; i < readReportCfgCmd->numAttr; i++)
// 3978     {
// 3979       readReportCfgCmd->attrList[i].direction = *pBuf++;;
// 3980       readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3981       pBuf += 2;
// 3982     }
// 3983   }
// 3984 
// 3985   return ( (void *)readReportCfgCmd );
// 3986 }
// 3987 #endif
// 3988 
// 3989 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 3990 /*********************************************************************
// 3991  * @fn      zclParseInReadReportCfgRspCmd
// 3992  *
// 3993  * @brief   Parse the "Profile" Read Reporting Configuration Response Command
// 3994  *
// 3995  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3996  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3997  *
// 3998  * @param   pCmd - pointer to incoming data to parse
// 3999  *
// 4000  * @return  pointer to the parsed command structure
// 4001  */
// 4002 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
// 4003 {
// 4004   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
// 4005   uint8 reportChangeLen;
// 4006   uint8 *pBuf = pCmd->pData;
// 4007   uint8 *dataPtr;
// 4008   uint8 numAttr = 0;
// 4009   uint8 hdrLen;
// 4010   uint16 dataLen = 0;
// 4011 
// 4012   // Calculate the length of the response command
// 4013   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 4014   {
// 4015     uint8 status;
// 4016     uint8 direction;
// 4017 
// 4018     numAttr++;
// 4019     status = *pBuf++;
// 4020     direction = *pBuf++;
// 4021     pBuf += 2; // move pass the attribute ID
// 4022 
// 4023     if ( status == ZCL_STATUS_SUCCESS )
// 4024     {
// 4025       if ( direction == ZCL_SEND_ATTR_REPORTS )
// 4026       {
// 4027         uint8 dataType = *pBuf++;
// 4028         pBuf += 4; // move pass the Min and Max Reporting Intervals
// 4029 
// 4030         // For attributes of 'discrete' data types this field is omitted
// 4031         if ( zclAnalogDataType( dataType ) )
// 4032         {
// 4033           reportChangeLen = zclGetDataTypeLength( dataType );
// 4034           pBuf += reportChangeLen;
// 4035 
// 4036           // add padding if needed
// 4037           if ( PADDING_NEEDED( reportChangeLen ) )
// 4038           {
// 4039             reportChangeLen++;
// 4040           }
// 4041 
// 4042           dataLen += reportChangeLen;
// 4043         }
// 4044       }
// 4045       else
// 4046       {
// 4047         pBuf += 2; // move pass the Timeout field
// 4048       }
// 4049     }
// 4050   } // while loop
// 4051 
// 4052   hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
// 4053 
// 4054   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 4055   if ( readReportCfgRspCmd != NULL )
// 4056   {
// 4057     uint8 i;
// 4058     pBuf = pCmd->pData;
// 4059     dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
// 4060 
// 4061     readReportCfgRspCmd->numAttr = numAttr;
// 4062     for ( i = 0; i < numAttr; i++ )
// 4063     {
// 4064       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 4065 
// 4066       reportRspRec->status = *pBuf++;
// 4067       reportRspRec->direction = *pBuf++;
// 4068       reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4069       pBuf += 2;
// 4070 
// 4071       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 4072       {
// 4073         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 4074         {
// 4075           reportRspRec->dataType = *pBuf++;
// 4076           reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4077           pBuf += 2;
// 4078           reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4079           pBuf += 2;
// 4080 
// 4081           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 4082           {
// 4083             zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
// 4084             reportRspRec->reportableChange = dataPtr;
// 4085 
// 4086             reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
// 4087             pBuf += reportChangeLen;
// 4088 
// 4089             // advance attribute data pointer
// 4090             if ( PADDING_NEEDED( reportChangeLen ) )
// 4091             {
// 4092               reportChangeLen++;
// 4093             }
// 4094 
// 4095             dataPtr += reportChangeLen;
// 4096           }
// 4097         }
// 4098         else
// 4099         {
// 4100           reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4101           pBuf += 2;
// 4102         }
// 4103       }
// 4104     }
// 4105   }
// 4106 
// 4107   return ( (void *)readReportCfgRspCmd );
// 4108 }
// 4109 #endif
// 4110 
// 4111 #ifdef ZCL_REPORT_DESTINATION_DEVICE
// 4112 /*********************************************************************
// 4113  * @fn      zclParseInReportCmd
// 4114  *
// 4115  * @brief   Parse the "Profile" Report Command
// 4116  *
// 4117  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4118  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4119  *
// 4120  * @param   pCmd - pointer to incoming data to parse
// 4121  *
// 4122  * @return  pointer to the parsed command structure
// 4123  */
// 4124 void *zclParseInReportCmd( zclParseCmd_t *pCmd )
// 4125 {
// 4126   zclReportCmd_t *reportCmd;
// 4127   uint8 *pBuf = pCmd->pData;
// 4128   uint16 attrDataLen;
// 4129   uint8 *dataPtr;
// 4130   uint8 numAttr = 0;
// 4131   uint8 hdrLen;
// 4132   uint16 dataLen = 0;
// 4133 
// 4134   // find out the number of attributes and the length of attribute data
// 4135   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 4136   {
// 4137     uint8 dataType;
// 4138 
// 4139     numAttr++;
// 4140     pBuf += 2; // move pass attribute id
// 4141 
// 4142     dataType = *pBuf++;
// 4143 
// 4144     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 4145     pBuf += attrDataLen; // move pass attribute data
// 4146 
// 4147     // add padding if needed
// 4148     if ( PADDING_NEEDED( attrDataLen ) )
// 4149     {
// 4150       attrDataLen++;
// 4151     }
// 4152 
// 4153     dataLen += attrDataLen;
// 4154   }
// 4155 
// 4156   hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
// 4157 
// 4158   reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 4159   if (reportCmd != NULL )
// 4160   {
// 4161     uint8 i;
// 4162     pBuf = pCmd->pData;
// 4163     dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
// 4164 
// 4165     reportCmd->numAttr = numAttr;
// 4166     for ( i = 0; i < numAttr; i++ )
// 4167     {
// 4168       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 4169 
// 4170       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4171       pBuf += 2;
// 4172       reportRec->dataType = *pBuf++;
// 4173 
// 4174       attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
// 4175       zcl_memcpy( dataPtr, pBuf, attrDataLen );
// 4176       reportRec->attrData = dataPtr;
// 4177 
// 4178       pBuf += attrDataLen; // move pass attribute data
// 4179 
// 4180       // advance attribute data pointer
// 4181       if ( PADDING_NEEDED( attrDataLen ) )
// 4182       {
// 4183         attrDataLen++;
// 4184       }
// 4185 
// 4186       dataPtr += attrDataLen;
// 4187     }
// 4188   }
// 4189 
// 4190   return ( (void *)reportCmd );
// 4191 }
// 4192 #endif
// 4193 
// 4194 /*********************************************************************
// 4195  * @fn      zclParseInDefaultRspCmd
// 4196  *
// 4197  * @brief   Parse the "Profile" Default Response Command
// 4198  *
// 4199  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4200  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4201  *
// 4202  * @param   pCmd - pointer to incoming data to parse
// 4203  *
// 4204  * @return  pointer to the parsed command structure
// 4205  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4206 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
zclParseInDefaultRspCmd:
          CFI Block cfiBlock465 Using cfiCommon0
          CFI Function zclParseInDefaultRspCmd
        CODE
// 4207 {
        FUNCALL zclParseInDefaultRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 4208   zclDefaultRspCmd_t *defaultRspCmd;
// 4209   uint8 *pBuf = pCmd->pData;
        LCALL     ?Subroutine67 & 0xFFFF
// 4210 
// 4211   defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
??CrossCallReturnLabel_106:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
// 4212   if ( defaultRspCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclParseInDefaultRspCmd_0
// 4213   {
// 4214     defaultRspCmd->commandID = *pBuf++;
        LCALL     ?Subroutine16 & 0xFFFF
// 4215     defaultRspCmd->statusCode = *pBuf;
// 4216   }
??CrossCallReturnLabel_235:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      @DPTR,A
// 4217 
// 4218   return ( (void *)defaultRspCmd );
??zclParseInDefaultRspCmd_0:
        LJMP      ?Subroutine2 & 0xFFFF
// 4219 }
          CFI EndBlock cfiBlock465

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine67:
          CFI Block cfiCond466 Using cfiCommon0
          CFI Function zclParseInReadCmd
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond467 Using cfiCommon0
          CFI (cfiCond467) Function zclParseInDefaultRspCmd
          CFI (cfiCond467) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond467) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond467) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond467) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond467) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond467) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond467) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond467) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond467) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond467) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond467) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond467) CFA_SP SP+-2
          CFI (cfiCond467) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker468 Using cfiCommon1
          CFI (cfiPicker468) NoFunction
          CFI (cfiPicker468) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_302:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        RET
          CFI EndBlock cfiCond466
          CFI EndBlock cfiCond467
          CFI EndBlock cfiPicker468
// 4220 
// 4221 #ifdef ZCL_DISCOVER
// 4222 /*********************************************************************
// 4223  * @fn      zclParseInDiscAttrsCmd
// 4224  *
// 4225  * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
// 4226  *
// 4227  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4228  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4229  *
// 4230  * @param   pCmd - pointer to incoming data to parse
// 4231  *
// 4232  * @return  pointer to the parsed command structure
// 4233  */
// 4234 void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
// 4235 {
// 4236   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4237   uint8 *pBuf = pCmd->pData;
// 4238 
// 4239   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
// 4240   if ( pDiscoverCmd != NULL )
// 4241   {
// 4242     pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4243     pBuf += 2;
// 4244     pDiscoverCmd->maxAttrIDs = *pBuf;
// 4245   }
// 4246 
// 4247   return ( (void *)pDiscoverCmd );
// 4248 }
// 4249 
// 4250 /*********************************************************************
// 4251  * @fn      zclParseInDiscAttrsRspCmd
// 4252  *
// 4253  * @brief   Parse the "Profile" Discovery Response Commands
// 4254  *
// 4255  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4256  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4257  *
// 4258  * @param   pCmd - pointer to incoming data to parse
// 4259  *
// 4260  * @return  pointer to the parsed command structure
// 4261  */
// 4262 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4263 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
// 4264 {
// 4265   zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
// 4266   uint8 *pBuf = pCmd->pData;
// 4267   uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
// 4268 
// 4269   pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
// 4270                     ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
// 4271 
// 4272   if ( pDiscoverRspCmd != NULL )
// 4273   {
// 4274     uint8 i;
// 4275 
// 4276     pDiscoverRspCmd->discComplete = *pBuf++;
// 4277     pDiscoverRspCmd->numAttr = numAttr;
// 4278 
// 4279     for ( i = 0; i < numAttr; i++ )
// 4280     {
// 4281       pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4282       pBuf += 2;
// 4283       pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
// 4284     }
// 4285   }
// 4286 
// 4287   return ( (void *)pDiscoverRspCmd );
// 4288 }
// 4289 
// 4290 /*********************************************************************
// 4291  * @fn      zclParseInDiscCmdsCmd
// 4292  *
// 4293  * @brief   Parse the "Profile" Discovery Commands
// 4294  *
// 4295  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4296  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4297  *
// 4298  * @param   pCmd - pointer to incoming data to parse
// 4299  *
// 4300  * @return  pointer to the parsed command structure
// 4301  */
// 4302 void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
// 4303 {
// 4304   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4305   uint8 *pBuf = pCmd->pData;
// 4306 
// 4307   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
// 4308   if ( pDiscoverCmd != NULL )
// 4309   {
// 4310     pDiscoverCmd->startCmdID = *pBuf++;
// 4311     pDiscoverCmd->maxCmdID = *pBuf++;
// 4312   }
// 4313 
// 4314   return ( (void *)pDiscoverCmd );
// 4315 }
// 4316 
// 4317 /*********************************************************************
// 4318  * @fn      zclParseInDiscCmdsRspCmd
// 4319  *
// 4320  * @brief   Parse the Discover Commands Response Command
// 4321  *
// 4322  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4323  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4324  *
// 4325  * @param   pCmd - pointer to incoming data to parse
// 4326  *
// 4327  * @return  pointer to the parsed command structure
// 4328  */
// 4329 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4330 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
// 4331 {
// 4332   zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
// 4333   uint8 *pBuf = pCmd->pData;
// 4334   uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
// 4335 
// 4336     // allocate memory for size of structure plus variable array
// 4337   pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
// 4338                     ( numCmds * sizeof(uint8) ) );
// 4339   if ( pDiscoverRspCmd != NULL )
// 4340   {
// 4341     uint8 i;
// 4342     pDiscoverRspCmd->discComplete = *pBuf++;
// 4343     pDiscoverRspCmd->numCmd = numCmds;
// 4344 
// 4345     for ( i = 0; i < numCmds; i++ )
// 4346     {
// 4347       pDiscoverRspCmd->pCmdID[i] = *pBuf++;
// 4348     }
// 4349   }
// 4350 
// 4351   return ( (void *)pDiscoverRspCmd );
// 4352 }
// 4353 
// 4354 /*********************************************************************
// 4355  * @fn      zclParseInDiscAttrsExtRspCmd
// 4356  *
// 4357  * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
// 4358  *
// 4359  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4360  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4361  *
// 4362  * @param   pCmd - pointer to incoming data to parse
// 4363  *
// 4364  * @return  pointer to the parsed command structure
// 4365  */
// 4366 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4367 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
// 4368 {
// 4369   zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
// 4370   uint8 i;
// 4371   uint8 *pBuf = pCmd->pData;
// 4372   uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
// 4373 
// 4374   pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
// 4375                     ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
// 4376 
// 4377   if ( pDiscoverRspCmd != NULL )
// 4378   {
// 4379     pDiscoverRspCmd->discComplete = *pBuf++;
// 4380     pDiscoverRspCmd->numAttr = numAttrs;
// 4381 
// 4382     for ( i = 0; i < numAttrs; i++ )
// 4383     {
// 4384       pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4385       pBuf += 2;
// 4386       pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
// 4387       pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
// 4388     }
// 4389   }
// 4390 
// 4391   return ( (void *)pDiscoverRspCmd );
// 4392 }
// 4393 #endif // ZCL_DISCOVER
// 4394 
// 4395 #ifdef ZCL_READ
// 4396 /*********************************************************************
// 4397  * @fn      zclProcessInReadCmd
// 4398  *
// 4399  * @brief   Process the "Profile" Read Command
// 4400  *
// 4401  * @param   pInMsg - incoming message to process
// 4402  *
// 4403  * @return  TRUE if command processed. FALSE, otherwise.
// 4404  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4405 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
zclProcessInReadCmd:
          CFI Block cfiBlock469 Using cfiCommon0
          CFI Function zclProcessInReadCmd
        CODE
// 4406 {
        FUNCALL zclProcessInReadCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, zclGetAuthorizeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, zcl_SendReadRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 4407   zclReadCmd_t *readCmd;
// 4408   zclReadRspCmd_t *readRspCmd;
// 4409   zclAttrRec_t attrRec;
// 4410   uint16 len;
// 4411   uint8 i;
// 4412   uint8 attrFound;
// 4413 
// 4414   readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
        MOV       A,R6
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
// 4415 
// 4416   // calculate the length of the response status record
// 4417   len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
// 4418 
// 4419   readRspCmd = zcl_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       DPL,?V10
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       B,#0x6
        MUL       AB
        MOV       R1,B
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 4420   if ( readRspCmd == NULL )
        MOV       A,R2
        ORL       A,?V1
        JNZ       ??zclProcessInReadCmd_0
// 4421   {
// 4422     return FALSE; // EMBEDDED RETURN
        MOV       R1,#0x0
        LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
// 4423   }
// 4424 
// 4425   readRspCmd->numAttr = readCmd->numAttr;
??zclProcessInReadCmd_0:
        MOV       DPL,?V10
        MOV       DPH,?V11
        LCALL     ??Subroutine126_0 & 0xFFFF
??CrossCallReturnLabel_237:
        MOVX      @DPTR,A
// 4426   for ( i = 0; i < readCmd->numAttr; i++ )
        MOV       ?V2,#0x0
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V14,A
        CLR       A
        ADDC      A,R7
        MOV       ?V15,A
        SJMP      ??zclProcessInReadCmd_2
// 4427   {
// 4428     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 4429 
// 4430     statusRec->attrID = readCmd->attrID[i];
// 4431     
// 4432     attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
// 4433     
// 4434     //Validate the attribute is found and the access control
// 4435     if ( ( attrFound == TRUE ) && 
// 4436          (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
// 4437             (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
// 4438     {
// 4439       if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
// 4440       {
// 4441         statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
// 4442                                               &(pInMsg->msg->srcAddr), &attrRec );
// 4443         if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 4444         {
// 4445           statusRec->data = attrRec.attr.dataPtr;
// 4446           statusRec->dataType = attrRec.attr.dataType;
// 4447         }
// 4448       }
// 4449       else
// 4450       {
// 4451         statusRec->status = ZCL_STATUS_WRITE_ONLY;
// 4452       }
// 4453     }
// 4454     else
// 4455     {
// 4456       statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??zclProcessInReadCmd_3:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOV       A,#-0x7a
??zclProcessInReadCmd_4:
        MOVX      @DPTR,A
// 4457     }
??zclProcessInReadCmd_5:
        INC       ?V2
??zclProcessInReadCmd_2:
        MOV       DPL,?V10
        MOV       DPH,?V11
        LCALL     ??Subroutine128_0 & 0xFFFF
??CrossCallReturnLabel_252:
        JC        $+5
        LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
        MOV       R0,?V2
        MOV       A,R0
        MOV       B,#0x6
        MUL       AB
        MOV       R2,A
        MOV       R3,B
        MOV       A,?V0
        ADD       A,R2
        MOV       DPL,A
        MOV       A,?V1
        ADDC      A,R3
        MOV       DPH,A
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,?V10
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V11
        LCALL     ?Subroutine89 & 0xFFFF
??CrossCallReturnLabel_151:
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ??Subroutine117_0 & 0xFFFF
??CrossCallReturnLabel_203:
        MOV       A,?V4
        ADD       A,#0x2
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V7,A
        LCALL     ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_291:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V12,R0
        MOV       ?V13,R1
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_314:
        MOV       DPL,?V8
        MOV       DPH,?V9
        LCALL     ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_275:
        LCALL     ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_138:
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JC        ??zclProcessInReadCmd_7
        MOV       DPL,?V14
        MOV       DPH,?V15
        LCALL     ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JB        B.0,??zclProcessInReadCmd_8
        CPL       C
??zclProcessInReadCmd_8:
        JC        $+5
        LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
??zclProcessInReadCmd_7:
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclProcessInReadCmd_9
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_294:
        MOV       A,R0
        ADD       A,#0x6
        MOV       ?V8,A
        CLR       A
        ADDC      A,R1
        MOV       ?V9,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclProcessInReadCmd_10
        ; Setup parameters for call to function zclGetAuthorizeCB
        LCALL     ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_135:
        LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclProcessInReadCmd_10
        ; Setup parameters for indirect call
        MOV       R1,#0x1
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     ?CALL_IND
        MOV       A,R1
        SJMP      ??zclProcessInReadCmd_11
??zclProcessInReadCmd_10:
        MOV       A,#0x0
// 4458   }
??zclProcessInReadCmd_11:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      @DPTR,A
        JZ        $+5
        LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_42:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_205:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
??zclProcessInReadCmd_9:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOV       A,#-0x71
        LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
// 4459 
// 4460   // Build and send Read Response command
// 4461   zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
// 4462                    readRspCmd, !pInMsg->hdr.fc.direction,
// 4463                    true, pInMsg->hdr.transSeqNum );
??zclProcessInReadCmd_6:
        LCALL     ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_292:
        ; Setup parameters for call to function zcl_SendReadRsp
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_259:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPL,?V14
        MOV       DPH,?V15
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       DPL,?V8
        MOV       DPH,?V9
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_320:
        MOV       A,?V8
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V9
        MOV       R3,A
        LCALL     ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_139:
        LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 4464   zcl_mem_free( readRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 4465 
// 4466   return TRUE;
        MOV       R1,#0x1
??zclProcessInReadCmd_1:
        MOV       A,#0x8
        LJMP      ?Subroutine5 & 0xFFFF
// 4467 }
          CFI EndBlock cfiBlock469

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine89:
          CFI Block cfiCond470 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_150
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond471 Using cfiCommon0
          CFI (cfiCond471) Function zclProcessInReadCmd
          CFI (cfiCond471) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond471) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond471) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond471) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond471) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond471) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond471) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond471) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond471) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond471) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond471) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond471) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond471) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond471) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond471) CFA_SP SP+-2
          CFI (cfiCond471) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker472 Using cfiCommon1
          CFI (cfiPicker472) NoFunction
          CFI (cfiPicker472) Picker
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        RET
          CFI EndBlock cfiCond470
          CFI EndBlock cfiCond471
          CFI EndBlock cfiPicker472

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine84:
          CFI Block cfiCond473 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond474 Using cfiCommon0
          CFI (cfiCond474) Function zclProcessInReadCmd
          CFI (cfiCond474) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond474) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond474) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond474) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond474) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond474) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond474) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond474) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond474) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond474) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond474) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond474) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond474) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond474) CFA_SP SP+-2
          CFI (cfiCond474) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker475 Using cfiCommon1
          CFI (cfiPicker475) NoFunction
          CFI (cfiPicker475) Picker
        MOV       A,?V8
        LCALL     ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_176:
        ADDC      A,?V9
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond473
          CFI EndBlock cfiCond474
          CFI EndBlock cfiPicker475

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond476 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_253
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond477 Using cfiCommon0
          CFI (cfiCond477) Function zcl_SendReadRsp
          CFI (cfiCond477) Conditional ??CrossCallReturnLabel_254
          CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond477) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond477) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond477) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond477) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond477) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond477) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond477) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond477) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond477) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond477) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond477) CFA_SP SP+-2
          CFI (cfiCond477) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker478 Using cfiCommon1
          CFI (cfiPicker478) NoFunction
          CFI (cfiPicker478) Picker
        MOV       DPL,?V8
        MOV       DPH,?V9
          CFI EndBlock cfiCond476
          CFI EndBlock cfiCond477
          CFI EndBlock cfiPicker478
        REQUIRE ??Subroutine128_0
        ; // Fall through to label ??Subroutine128_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine128_0:
          CFI Block cfiCond479 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_251
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond480 Using cfiCommon0
          CFI (cfiCond480) Function zclProcessInReadCmd
          CFI (cfiCond480) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond480) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond480) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond480) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond480) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond480) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond480) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond480) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond480) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond480) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond480) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond480) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond480) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond480) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond480) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond480) CFA_SP SP+-2
          CFI (cfiCond480) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond481 Using cfiCommon0
          CFI (cfiCond481) Function zcl_SendReadRsp
          CFI (cfiCond481) Conditional ??CrossCallReturnLabel_253
          CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond481) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond481) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond481) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond481) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond481) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond481) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond481) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond481) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond481) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond481) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond481) CFA_SP SP+-2
          CFI (cfiCond481) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond482 Using cfiCommon0
          CFI (cfiCond482) Function zcl_SendReadRsp
          CFI (cfiCond482) Conditional ??CrossCallReturnLabel_254
          CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond482) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond482) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond482) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond482) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond482) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond482) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond482) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond482) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond482) CFA_SP SP+-2
          CFI (cfiCond482) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker483 Using cfiCommon1
          CFI (cfiPicker483) NoFunction
          CFI (cfiPicker483) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        RET
          CFI EndBlock cfiCond479
          CFI EndBlock cfiCond480
          CFI EndBlock cfiCond481
          CFI EndBlock cfiCond482
          CFI EndBlock cfiPicker483

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond484 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_259
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond485 Using cfiCommon0
          CFI (cfiCond485) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond485) Conditional ??CrossCallReturnLabel_260
          CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond485) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond485) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond485) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond485) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond485) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond485) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond485) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond485) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond485) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond485) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond485) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond485) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond485) CFA_SP SP+-2
          CFI (cfiCond485) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker486 Using cfiCommon1
          CFI (cfiPicker486) NoFunction
          CFI (cfiPicker486) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond484
          CFI EndBlock cfiCond485
          CFI EndBlock cfiPicker486
        REQUIRE ??Subroutine129_0
        ; // Fall through to label ??Subroutine129_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine129_0:
          CFI Block cfiCond487 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_255
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond488 Using cfiCommon0
          CFI (cfiCond488) Function zcl_SendWriteRequest
          CFI (cfiCond488) Conditional ??CrossCallReturnLabel_256
          CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond488) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond488) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond488) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond488) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond488) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond488) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond488) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond488) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond488) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond488) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond488) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond488) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond488) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond488) CFA_SP SP+-2
          CFI (cfiCond488) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond489 Using cfiCommon0
          CFI (cfiCond489) Function zcl_SendWriteRequest
          CFI (cfiCond489) Conditional ??CrossCallReturnLabel_257
          CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond489) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond489) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond489) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond489) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond489) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond489) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond489) CFA_SP SP+-2
          CFI (cfiCond489) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond490 Using cfiCommon0
          CFI (cfiCond490) Function zcl_SendWriteRequest
          CFI (cfiCond490) Conditional ??CrossCallReturnLabel_258
          CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond490) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond490) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond490) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond490) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond490) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond490) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond490) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond490) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond490) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond490) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond490) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond490) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond490) CFA_SP SP+-2
          CFI (cfiCond490) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond491 Using cfiCommon0
          CFI (cfiCond491) Function zclProcessInReadCmd
          CFI (cfiCond491) Conditional ??CrossCallReturnLabel_259
          CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond491) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond491) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond491) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond491) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond491) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond491) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond491) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond491) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond491) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond491) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond491) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond491) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond491) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond491) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond491) CFA_SP SP+-2
          CFI (cfiCond491) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond492 Using cfiCommon0
          CFI (cfiCond492) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond492) Conditional ??CrossCallReturnLabel_260
          CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond492) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond492) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond492) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond492) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond492) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond492) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond492) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond492) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond492) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond492) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond492) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond492) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond492) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond492) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond492) CFA_SP SP+-2
          CFI (cfiCond492) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker493 Using cfiCommon1
          CFI (cfiPicker493) NoFunction
          CFI (cfiPicker493) Picker
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond487
          CFI EndBlock cfiCond488
          CFI EndBlock cfiCond489
          CFI EndBlock cfiCond490
          CFI EndBlock cfiCond491
          CFI EndBlock cfiCond492
          CFI EndBlock cfiPicker493

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond494 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond495 Using cfiCommon0
          CFI (cfiCond495) Function zclProcessInReadCmd
          CFI (cfiCond495) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond495) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond495) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond495) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond495) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond495) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond495) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond495) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond495) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond495) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond495) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond495) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond495) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond495) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond495) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond495) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond495) CFA_SP SP+-2
          CFI (cfiCond495) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond496 Using cfiCommon0
          CFI (cfiCond496) Function zclProcessInReadCmd
          CFI (cfiCond496) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond496) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond496) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond496) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond496) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond496) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond496) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond496) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond496) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond496) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond496) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond496) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond496) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond496) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond496) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond496) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond496) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond496) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond496) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond496) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond496) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond496) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond496) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond496) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond496) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond496) CFA_SP SP+-2
          CFI (cfiCond496) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker497 Using cfiCommon1
          CFI (cfiPicker497) NoFunction
          CFI (cfiPicker497) Picker
        LCALL     ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_301:
        MOV       DPL,?V4
        MOV       DPH,?V5
        RET
          CFI EndBlock cfiCond494
          CFI EndBlock cfiCond495
          CFI EndBlock cfiCond496
          CFI EndBlock cfiPicker497
// 4468 #endif // ZCL_READ
// 4469 
// 4470 #ifdef ZCL_WRITE
// 4471 /*********************************************************************
// 4472  * @fn      processInWriteCmd
// 4473  *
// 4474  * @brief   Process the "Profile" Write and Write No Response Commands
// 4475  *
// 4476  * @param   pInMsg - incoming message to process
// 4477  *
// 4478  * @return  TRUE if command processed. FALSE, otherwise.
// 4479  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4480 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
zclProcessInWriteCmd:
          CFI Block cfiBlock498 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
        CODE
// 4481 {
        FUNCALL zclProcessInWriteCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zcl_SendWriteRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, bdb_ZclIdentifyCmdInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zclWriteAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zclWriteAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,R2
        MOV       ?V3,R3
// 4482   zclWriteCmd_t *writeCmd;
// 4483   zclWriteRspCmd_t *writeRspCmd;
// 4484   uint8 sendRsp = FALSE;
        CLR       ?VB.0
// 4485   uint8 j = 0;
        MOV       R6,#0x0
// 4486   uint8 i;
// 4487 
// 4488   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V14,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V15,A
// 4489   if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclProcessInWriteCmd_0
// 4490   {
// 4491     // We need to send a response back - allocate space for it
// 4492     writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4493             + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       DPL,?V14
        MOV       DPH,?V15
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
// 4494     if ( writeRspCmd == NULL )
        MOV       A,R2
        ORL       A,?V5
        JNZ       ??zclProcessInWriteCmd_1
// 4495     {
// 4496       return FALSE; // EMBEDDED RETURN
        MOV       R1,#0x0
        LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
// 4497     }
// 4498 
// 4499     sendRsp = TRUE;
??zclProcessInWriteCmd_1:
        SETB      ?VB.0
// 4500   }
// 4501 
// 4502   for ( i = 0; i < writeCmd->numAttr; i++ )
??zclProcessInWriteCmd_0:
        MOV       R7,#0x0
        SJMP      ??zclProcessInWriteCmd_3
// 4503   {
// 4504     zclAttrRec_t attrRec;
// 4505     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4506 
// 4507     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4508                          statusRec->attrID, &attrRec ) )
// 4509     {
// 4510       if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
// 4511       {
// 4512         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4513         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4514         break;
// 4515       }
// 4516       if ( statusRec->dataType == attrRec.attr.dataType )
// 4517       {
// 4518         uint8 status;
// 4519 
// 4520         // Write the new attribute value
// 4521         if ( attrRec.attr.dataPtr != NULL )
// 4522         {
// 4523           //Handle special case for Identify
// 4524           if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
// 4525           {
// 4526             uint16 identifyTime; 
// 4527                   
// 4528             osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
// 4529                         
// 4530             bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
// 4531             
// 4532             status = ZCL_STATUS_SUCCESS;
// 4533           }          
// 4534           else
// 4535           {                
// 4536             status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4537                                        &attrRec, statusRec );
// 4538           }
// 4539         }
// 4540         else // Use CB
// 4541         {
// 4542           status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4543                                             &attrRec, statusRec->attrData );
// 4544         }
// 4545 
// 4546         // If successful, a write attribute status record shall NOT be generated
// 4547         if ( sendRsp && status != ZCL_STATUS_SUCCESS )
// 4548         {
// 4549           // Attribute is read only - move on to the next write attribute record
// 4550           writeRspCmd->attrList[j].status = status;
// 4551           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4552         }
// 4553       }
// 4554       else
// 4555       {
// 4556         // Attribute data type is incorrect - move on to the next write attribute record
// 4557         if ( sendRsp )
// 4558         {
// 4559           writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4560           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4561         }
// 4562       }
// 4563     }
// 4564     else
// 4565     {
// 4566       // Attribute is not supported - move on to the next write attribute record
// 4567       if ( sendRsp )
??zclProcessInWriteCmd_4:
        MOV       C,?VB.0
        JNC       ??CrossCallReturnLabel_0
// 4568       {
// 4569         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOV       A,#-0x7a
// 4570         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4571       }
// 4572     }
??zclProcessInWriteCmd_5:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_0:
        INC       R7
??zclProcessInWriteCmd_3:
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R7
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??CrossCallReturnLabel_1 & 0xFFFF
        MOV       A,R7
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V14
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V15
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       A,R6
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V4
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V5
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,DPL
        ADD       A,#0x2
        MOV       ?V8,A
        CLR       A
        ADDC      A,DPH
        MOV       ?V9,A
        INC       DPTR
        MOV       ?V12,DPL
        MOV       ?V13,DPH
        LCALL     ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_325:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_330:
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??zclProcessInWriteCmd_4 & 0xFFFF
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JB        B.0,??zclProcessInWriteCmd_6
        CPL       C
??zclProcessInWriteCmd_6:
        JC        ??zclProcessInWriteCmd_7
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOV       A,#-0x7a
        LCALL     ?Subroutine10 & 0xFFFF
// 4573   } // for loop
// 4574 
// 4575   if ( sendRsp )
??CrossCallReturnLabel_1:
        MOV       C,?VB.0
        JNC       ??zclProcessInWriteCmd_8
// 4576   {
// 4577     writeRspCmd->numAttr = j;
        MOV       A,R6
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      @DPTR,A
// 4578     if ( writeRspCmd->numAttr == 0 )
        JNZ       ??zclProcessInWriteCmd_9
// 4579     {
// 4580       // Since all records were written successful, include a single status record
// 4581       // in the resonse command with the status field set to SUCCESS and the
// 4582       // attribute ID field omitted.
// 4583       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 4584       writeRspCmd->numAttr = 1;
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       A
        MOVX      @DPTR,A
// 4585     }
// 4586 
// 4587     zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4588                       pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4589                       true, pInMsg->hdr.transSeqNum );
??zclProcessInWriteCmd_9:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine133_0 & 0xFFFF
??CrossCallReturnLabel_283:
        ; Setup parameters for call to function zcl_SendWriteRsp
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
// 4590     zcl_mem_free( writeRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 4591   }
// 4592 
// 4593   return TRUE;
??zclProcessInWriteCmd_8:
        MOV       R1,#0x1
??zclProcessInWriteCmd_2:
        MOV       A,#0xa
        LJMP      ?Subroutine5 & 0xFFFF
??zclProcessInWriteCmd_7:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        $+5
        LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
        LCALL     ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_326:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_228:
        JZ        ??zclProcessInWriteCmd_11
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??zclProcessInWriteCmd_12
        INC       DPTR
        MOVX      A,@DPTR
??zclProcessInWriteCmd_12:
        JNZ       ??zclProcessInWriteCmd_13
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_229:
        JNZ       ??zclProcessInWriteCmd_13
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine134_0 & 0xFFFF
??CrossCallReturnLabel_289:
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_271:
        LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
        LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
??zclProcessInWriteCmd_13:
        ; Setup parameters for call to function zclWriteAttrData
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
        SJMP      ??zclProcessInWriteCmd_14
          CFI CFA_XSP16 add(XSP16, 34)
??zclProcessInWriteCmd_11:
        ; Setup parameters for call to function zclWriteAttrDataUsingCB
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
??zclProcessInWriteCmd_14:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R1
        MOV       C,?VB.0
        JC        $+5
        LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
        JNZ       $+5
        LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
        MOV       DPL,?V12
        MOV       DPH,?V13
        LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
??zclProcessInWriteCmd_10:
        MOV       C,?VB.0
        JC        $+5
        LJMP      ??CrossCallReturnLabel_0 & 0xFFFF
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOV       A,#-0x73
        LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
// 4594 }
          CFI EndBlock cfiBlock498

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine65:
          CFI Block cfiCond499 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond500 Using cfiCommon0
          CFI (cfiCond500) Function zclProcessInWriteCmd
          CFI (cfiCond500) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond500) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond500) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond500) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond500) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond500) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond500) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond500) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond500) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond500) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond500) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond500) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond500) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond500) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond500) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond500) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond500) CFA_SP SP+-2
          CFI (cfiCond500) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker501 Using cfiCommon1
          CFI (cfiPicker501) NoFunction
          CFI (cfiPicker501) Picker
        MOVX      A,@DPTR
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        MOV       C,0xE0 /* A   */.0
        MOV       B.0,C
        RET
          CFI EndBlock cfiCond499
          CFI EndBlock cfiCond500
          CFI EndBlock cfiPicker501

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine63:
          CFI Block cfiCond502 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond503 Using cfiCommon0
          CFI (cfiCond503) Function zclProcessInWriteCmd
          CFI (cfiCond503) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond503) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond503) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond503) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond503) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond503) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond503) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond503) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond503) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond503) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond503) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond503) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond503) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond503) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond503) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond503) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond503) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond503) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond503) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond503) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond503) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond503) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond503) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond503) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond503) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond503) CFA_SP SP+-2
          CFI (cfiCond503) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker504 Using cfiCommon1
          CFI (cfiPicker504) NoFunction
          CFI (cfiPicker504) Picker
        LCALL     ?Subroutine101 & 0xFFFF
??CrossCallReturnLabel_168:
        RET
          CFI EndBlock cfiCond502
          CFI EndBlock cfiCond503
          CFI EndBlock cfiPicker504

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine101:
          CFI Block cfiCond505 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond506 Using cfiCommon0
          CFI (cfiCond506) Function zclProcessInWriteCmd
          CFI (cfiCond506) Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_98
          CFI (cfiCond506) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond506) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond506) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond506) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond506) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond506) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond506) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond506) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond506) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond506) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond506) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond506) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond506) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond506) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond506) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond506) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond506) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond506) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond506) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond506) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond506) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond506) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond506) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond506) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond506) CFA_SP SP+-4
          CFI (cfiCond506) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond507 Using cfiCommon0
          CFI (cfiCond507) Function zclProcessInReadCmd
          CFI (cfiCond507) Conditional ??CrossCallReturnLabel_167, ??CrossCallReturnLabel_57
          CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond507) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond507) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond507) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond507) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond507) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond507) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond507) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond507) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond507) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond507) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond507) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond507) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond507) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond507) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond507) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond507) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond507) CFA_SP SP+-4
          CFI (cfiCond507) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond508 Using cfiCommon0
          CFI (cfiCond508) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond508) Conditional ??CrossCallReturnLabel_167, ??CrossCallReturnLabel_58
          CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond508) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond508) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond508) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond508) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond508) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond508) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond508) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond508) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond508) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond508) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond508) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond508) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond508) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond508) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond508) CFA_SP SP+-4
          CFI (cfiCond508) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker509 Using cfiCommon1
          CFI (cfiPicker509) NoFunction
          CFI (cfiPicker509) Picker
        MOVX      A,@DPTR
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        XRL       A,#0x1
        ANL       A,#0x1
        RET
          CFI EndBlock cfiCond505
          CFI EndBlock cfiCond506
          CFI EndBlock cfiCond507
          CFI EndBlock cfiCond508
          CFI EndBlock cfiPicker509

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond510 Using cfiCommon0
          CFI Function zclGetAuthorizeCB
          CFI Conditional ??CrossCallReturnLabel_278
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond511 Using cfiCommon0
          CFI (cfiCond511) Function zclWriteAttrData
          CFI (cfiCond511) Conditional ??CrossCallReturnLabel_279
          CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond511) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond511) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond511) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond511) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond511) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond511) CFA_SP SP+-2
          CFI (cfiCond511) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker512 Using cfiCommon1
          CFI (cfiPicker512) NoFunction
          CFI (cfiPicker512) Picker
        INC       DPTR
          CFI EndBlock cfiCond510
          CFI EndBlock cfiCond511
          CFI EndBlock cfiPicker512
        REQUIRE ??Subroutine130_0
        ; // Fall through to label ??Subroutine130_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine130_0:
          CFI Block cfiCond513 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_275
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond514 Using cfiCommon0
          CFI (cfiCond514) Function zclRevertWriteUndividedCmd
          CFI (cfiCond514) Conditional ??CrossCallReturnLabel_276
          CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond514) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond514) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond514) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond514) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond514) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond514) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond514) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond514) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond514) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond514) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond514) CFA_SP SP+-2
          CFI (cfiCond514) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond515 Using cfiCommon0
          CFI (cfiCond515) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond515) Conditional ??CrossCallReturnLabel_277
          CFI (cfiCond515) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond515) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond515) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond515) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond515) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond515) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond515) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond515) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond515) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond515) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond515) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond515) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond515) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond515) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond515) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond515) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond515) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond515) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond515) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond515) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond515) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond515) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond515) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond515) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond515) CFA_SP SP+-2
          CFI (cfiCond515) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond516 Using cfiCommon0
          CFI (cfiCond516) Function zclGetAuthorizeCB
          CFI (cfiCond516) Conditional ??CrossCallReturnLabel_278
          CFI (cfiCond516) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond516) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond516) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond516) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond516) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond516) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond516) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond516) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond516) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond516) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond516) CFA_SP SP+-2
          CFI (cfiCond516) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond517 Using cfiCommon0
          CFI (cfiCond517) Function zclWriteAttrData
          CFI (cfiCond517) Conditional ??CrossCallReturnLabel_279
          CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond517) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond517) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond517) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond517) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond517) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond517) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond517) CFA_SP SP+-2
          CFI (cfiCond517) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker518 Using cfiCommon1
          CFI (cfiPicker518) NoFunction
          CFI (cfiPicker518) Picker
        INC       DPTR
          CFI EndBlock cfiCond513
          CFI EndBlock cfiCond514
          CFI EndBlock cfiCond515
          CFI EndBlock cfiCond516
          CFI EndBlock cfiCond517
          CFI EndBlock cfiPicker518
        REQUIRE ??Subroutine131_0
        ; // Fall through to label ??Subroutine131_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine131_0:
          CFI Block cfiCond519 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_273
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond520 Using cfiCommon0
          CFI (cfiCond520) Function zclGetReadWriteCB
          CFI (cfiCond520) Conditional ??CrossCallReturnLabel_274
          CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond520) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond520) CFA_SP SP+-2
          CFI (cfiCond520) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond521 Using cfiCommon0
          CFI (cfiCond521) Function zclProcessInReadCmd
          CFI (cfiCond521) Conditional ??CrossCallReturnLabel_275
          CFI (cfiCond521) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond521) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond521) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond521) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond521) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond521) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond521) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond521) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond521) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond521) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond521) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond521) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond521) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond521) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond521) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond521) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond521) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond521) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond521) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond521) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond521) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond521) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond521) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond521) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond521) CFA_SP SP+-2
          CFI (cfiCond521) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond522 Using cfiCommon0
          CFI (cfiCond522) Function zclRevertWriteUndividedCmd
          CFI (cfiCond522) Conditional ??CrossCallReturnLabel_276
          CFI (cfiCond522) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond522) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond522) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond522) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond522) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond522) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond522) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond522) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond522) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond522) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond522) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond522) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond522) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond522) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond522) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond522) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond522) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond522) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond522) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond522) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond522) CFA_SP SP+-2
          CFI (cfiCond522) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond523 Using cfiCommon0
          CFI (cfiCond523) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond523) Conditional ??CrossCallReturnLabel_277
          CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond523) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond523) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond523) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond523) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond523) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond523) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond523) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond523) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond523) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond523) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond523) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond523) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond523) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond523) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond523) CFA_SP SP+-2
          CFI (cfiCond523) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond524 Using cfiCommon0
          CFI (cfiCond524) Function zclGetAuthorizeCB
          CFI (cfiCond524) Conditional ??CrossCallReturnLabel_278
          CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond524) CFA_SP SP+-2
          CFI (cfiCond524) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond525 Using cfiCommon0
          CFI (cfiCond525) Function zclWriteAttrData
          CFI (cfiCond525) Conditional ??CrossCallReturnLabel_279
          CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond525) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond525) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond525) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond525) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond525) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond525) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond525) CFA_SP SP+-2
          CFI (cfiCond525) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker526 Using cfiCommon1
          CFI (cfiPicker526) NoFunction
          CFI (cfiPicker526) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond519
          CFI EndBlock cfiCond520
          CFI EndBlock cfiCond521
          CFI EndBlock cfiCond522
          CFI EndBlock cfiCond523
          CFI EndBlock cfiCond524
          CFI EndBlock cfiCond525
          CFI EndBlock cfiPicker526
        REQUIRE ??Subroutine132_0
        ; // Fall through to label ??Subroutine132_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine132_0:
          CFI Block cfiCond527 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_261
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond528 Using cfiCommon0
          CFI (cfiCond528) Function zcl_getRawAFMsg
          CFI (cfiCond528) Conditional ??CrossCallReturnLabel_262
          CFI (cfiCond528) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond528) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond528) CFA_SP SP+-7
          CFI Block cfiCond529 Using cfiCommon0
          CFI (cfiCond529) Function zcl_ProcessMessageMSG
          CFI (cfiCond529) Conditional ??CrossCallReturnLabel_263
          CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond529) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond529) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond529) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond529) CFA_SP SP+-2
          CFI (cfiCond529) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond530 Using cfiCommon0
          CFI (cfiCond530) Function zcl_ProcessMessageMSG
          CFI (cfiCond530) Conditional ??CrossCallReturnLabel_264
          CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond530) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond530) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond530) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond530) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond530) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond530) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond530) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond530) CFA_SP SP+-2
          CFI (cfiCond530) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond531 Using cfiCommon0
          CFI (cfiCond531) Function zcl_ProcessMessageMSG
          CFI (cfiCond531) Conditional ??CrossCallReturnLabel_265
          CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond531) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond531) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond531) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond531) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond531) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond531) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond531) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond531) CFA_SP SP+-2
          CFI (cfiCond531) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond532 Using cfiCommon0
          CFI (cfiCond532) Function zcl_ProcessMessageMSG
          CFI (cfiCond532) Conditional ??CrossCallReturnLabel_266
          CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond532) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond532) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond532) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond532) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond532) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond532) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond532) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond532) CFA_SP SP+-2
          CFI (cfiCond532) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond533 Using cfiCommon0
          CFI (cfiCond533) Function zcl_ProcessMessageMSG
          CFI (cfiCond533) Conditional ??CrossCallReturnLabel_267
          CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond533) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond533) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond533) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond533) CFA_SP SP+-2
          CFI (cfiCond533) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond534 Using cfiCommon0
          CFI (cfiCond534) Function zclGetAttrDataLengthUsingCB
          CFI (cfiCond534) Conditional ??CrossCallReturnLabel_268
          CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond534) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond534) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond534) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond534) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond534) CFA_SP SP+-2
          CFI (cfiCond534) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond535 Using cfiCommon0
          CFI (cfiCond535) Function zclWriteAttrData
          CFI (cfiCond535) Conditional ??CrossCallReturnLabel_269
          CFI (cfiCond535) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond535) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond535) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond535) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond535) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond535) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond535) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond535) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond535) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond535) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond535) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond535) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond535) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond535) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond535) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond535) CFA_SP SP+-2
          CFI (cfiCond535) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond536 Using cfiCommon0
          CFI (cfiCond536) Function zclWriteAttrDataUsingCB
          CFI (cfiCond536) Conditional ??CrossCallReturnLabel_270
          CFI (cfiCond536) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond536) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond536) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond536) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond536) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond536) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond536) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond536) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond536) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond536) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond536) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond536) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond536) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond536) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond536) CFA_SP SP+-2
          CFI (cfiCond536) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond537 Using cfiCommon0
          CFI (cfiCond537) Function zclProcessInWriteCmd
          CFI (cfiCond537) Conditional ??CrossCallReturnLabel_271
          CFI (cfiCond537) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond537) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond537) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond537) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond537) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond537) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond537) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond537) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond537) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond537) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond537) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond537) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond537) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond537) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond537) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond537) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond537) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond537) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond537) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond537) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond537) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond537) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond537) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond537) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond537) CFA_SP SP+-2
          CFI (cfiCond537) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond538 Using cfiCommon0
          CFI (cfiCond538) Function zclRevertWriteUndividedCmd
          CFI (cfiCond538) Conditional ??CrossCallReturnLabel_272
          CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond538) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond538) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond538) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond538) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond538) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond538) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond538) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond538) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond538) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond538) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond538) CFA_SP SP+-2
          CFI (cfiCond538) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond539 Using cfiCommon0
          CFI (cfiCond539) Function zcl_SendWriteRequest
          CFI (cfiCond539) Conditional ??CrossCallReturnLabel_273
          CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond539) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond539) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond539) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond539) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond539) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond539) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond539) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond539) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond539) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond539) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond539) CFA_SP SP+-2
          CFI (cfiCond539) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond540 Using cfiCommon0
          CFI (cfiCond540) Function zclGetReadWriteCB
          CFI (cfiCond540) Conditional ??CrossCallReturnLabel_274
          CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond540) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond540) CFA_SP SP+-2
          CFI (cfiCond540) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond541 Using cfiCommon0
          CFI (cfiCond541) Function zclProcessInReadCmd
          CFI (cfiCond541) Conditional ??CrossCallReturnLabel_275
          CFI (cfiCond541) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond541) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond541) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond541) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond541) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond541) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond541) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond541) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond541) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond541) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond541) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond541) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond541) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond541) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond541) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond541) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond541) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond541) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond541) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond541) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond541) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond541) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond541) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond541) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond541) CFA_SP SP+-2
          CFI (cfiCond541) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond542 Using cfiCommon0
          CFI (cfiCond542) Function zclRevertWriteUndividedCmd
          CFI (cfiCond542) Conditional ??CrossCallReturnLabel_276
          CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond542) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond542) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond542) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond542) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond542) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond542) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond542) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond542) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond542) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond542) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond542) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond542) CFA_SP SP+-2
          CFI (cfiCond542) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond543 Using cfiCommon0
          CFI (cfiCond543) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond543) Conditional ??CrossCallReturnLabel_277
          CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond543) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond543) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond543) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond543) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond543) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond543) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond543) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond543) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond543) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond543) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond543) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond543) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond543) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond543) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond543) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond543) CFA_SP SP+-2
          CFI (cfiCond543) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond544 Using cfiCommon0
          CFI (cfiCond544) Function zclGetAuthorizeCB
          CFI (cfiCond544) Conditional ??CrossCallReturnLabel_278
          CFI (cfiCond544) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond544) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond544) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond544) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond544) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond544) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond544) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond544) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond544) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond544) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond544) CFA_SP SP+-2
          CFI (cfiCond544) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond545 Using cfiCommon0
          CFI (cfiCond545) Function zclWriteAttrData
          CFI (cfiCond545) Conditional ??CrossCallReturnLabel_279
          CFI (cfiCond545) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond545) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond545) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond545) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond545) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond545) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond545) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond545) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond545) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond545) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond545) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond545) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond545) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond545) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond545) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond545) CFA_SP SP+-2
          CFI (cfiCond545) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker546 Using cfiCommon1
          CFI (cfiPicker546) NoFunction
          CFI (cfiPicker546) Picker
        LCALL     ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_337:
        RET
          CFI EndBlock cfiCond527
          CFI EndBlock cfiCond528
          CFI EndBlock cfiCond529
          CFI EndBlock cfiCond530
          CFI EndBlock cfiCond531
          CFI EndBlock cfiCond532
          CFI EndBlock cfiCond533
          CFI EndBlock cfiCond534
          CFI EndBlock cfiCond535
          CFI EndBlock cfiCond536
          CFI EndBlock cfiCond537
          CFI EndBlock cfiCond538
          CFI EndBlock cfiCond539
          CFI EndBlock cfiCond540
          CFI EndBlock cfiCond541
          CFI EndBlock cfiCond542
          CFI EndBlock cfiCond543
          CFI EndBlock cfiCond544
          CFI EndBlock cfiCond545
          CFI EndBlock cfiPicker546

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine97:
          CFI Block cfiCond547 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_183
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond548 Using cfiCommon0
          CFI (cfiCond548) Function zcl_registerAttrList
          CFI (cfiCond548) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_184
          CFI (cfiCond548) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond548) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond548) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond548) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond548) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond548) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond548) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond548) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond548) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond548) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond548) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond548) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond548) CFA_SP SP+-4
          CFI (cfiCond548) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond549 Using cfiCommon0
          CFI (cfiCond549) Function zcl_registerClusterOptionList
          CFI (cfiCond549) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_185
          CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond549) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond549) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond549) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond549) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond549) CFA_SP SP+-4
          CFI (cfiCond549) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond550 Using cfiCommon0
          CFI (cfiCond550) Function zcl_registerPlugin
          CFI (cfiCond550) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_187
          CFI (cfiCond550) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond550) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond550) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond550) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond550) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond550) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond550) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond550) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond550) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond550) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond550) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond550) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond550) CFA_SP SP+-4
          CFI (cfiCond550) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond551 Using cfiCommon0
          CFI (cfiCond551) Function zcl_registerAttrList
          CFI (cfiCond551) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_188
          CFI (cfiCond551) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond551) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond551) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond551) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond551) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond551) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond551) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond551) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond551) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond551) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond551) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond551) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond551) CFA_SP SP+-4
          CFI (cfiCond551) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond552 Using cfiCommon0
          CFI (cfiCond552) Function zcl_registerClusterOptionList
          CFI (cfiCond552) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_189
          CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond552) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond552) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond552) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond552) CFA_SP SP+-4
          CFI (cfiCond552) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond553 Using cfiCommon0
          CFI (cfiCond553) Function zcl_SendReadRsp
          CFI (cfiCond553) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_190
          CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond553) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond553) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond553) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond553) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond553) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond553) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond553) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond553) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond553) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond553) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond553) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond553) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond553) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond553) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond553) CFA_SP SP+-4
          CFI (cfiCond553) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond554 Using cfiCommon0
          CFI (cfiCond554) Function zclFindAttrRecsList
          CFI (cfiCond554) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_186
          CFI (cfiCond554) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond554) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond554) CFA_SP SP+-9
          CFI Block cfiCond555 Using cfiCommon0
          CFI (cfiCond555) Function zclReadAttrData
          CFI (cfiCond555) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_191
          CFI (cfiCond555) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond555) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond555) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond555) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond555) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond555) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond555) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond555) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond555) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond555) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond555) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond555) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond555) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond555) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond555) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond555) CFA_SP SP+-4
          CFI (cfiCond555) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond556 Using cfiCommon0
          CFI (cfiCond556) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond556) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_192
          CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond556) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond556) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond556) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond556) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond556) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond556) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond556) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond556) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond556) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond556) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond556) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond556) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond556) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond556) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond556) CFA_SP SP+-4
          CFI (cfiCond556) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond557 Using cfiCommon0
          CFI (cfiCond557) Function zcl_registerPlugin
          CFI (cfiCond557) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_78
          CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond557) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond557) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond557) CFA_SP SP+-4
          CFI (cfiCond557) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond558 Using cfiCommon0
          CFI (cfiCond558) Function zcl_SendWriteRequest
          CFI (cfiCond558) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_79
          CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond558) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond558) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond558) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond558) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond558) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond558) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond558) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond558) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond558) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond558) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond558) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond558) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond558) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond558) CFA_SP SP+-4
          CFI (cfiCond558) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond559 Using cfiCommon0
          CFI (cfiCond559) Function zcl_ProcessMessageMSG
          CFI (cfiCond559) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_27
          CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond559) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond559) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond559) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond559) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond559) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond559) CFA_SP SP+-4
          CFI (cfiCond559) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond560 Using cfiCommon0
          CFI (cfiCond560) Function zcl_ProcessMessageMSG
          CFI (cfiCond560) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_28
          CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond560) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond560) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond560) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond560) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond560) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond560) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond560) CFA_SP SP+-4
          CFI (cfiCond560) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond561 Using cfiCommon0
          CFI (cfiCond561) Function zcl_ProcessMessageMSG
          CFI (cfiCond561) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_29
          CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond561) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond561) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond561) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond561) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond561) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond561) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond561) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond561) CFA_SP SP+-4
          CFI (cfiCond561) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond562 Using cfiCommon0
          CFI (cfiCond562) Function zclGetAuthorizeCB
          CFI (cfiCond562) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_278
          CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond562) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond562) CFA_SP SP+-4
          CFI (cfiCond562) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond563 Using cfiCommon0
          CFI (cfiCond563) Function zclWriteAttrData
          CFI (cfiCond563) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_279
          CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond563) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond563) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond563) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond563) CFA_SP SP+-4
          CFI (cfiCond563) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond564 Using cfiCommon0
          CFI (cfiCond564) Function zclProcessInReadCmd
          CFI (cfiCond564) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_275
          CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond564) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond564) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond564) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond564) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond564) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond564) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond564) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond564) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond564) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond564) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond564) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond564) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond564) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond564) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond564) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond564) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond564) CFA_SP SP+-4
          CFI (cfiCond564) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond565 Using cfiCommon0
          CFI (cfiCond565) Function zclRevertWriteUndividedCmd
          CFI (cfiCond565) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_276
          CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond565) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond565) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond565) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond565) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond565) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond565) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond565) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond565) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond565) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond565) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond565) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond565) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond565) CFA_SP SP+-4
          CFI (cfiCond565) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond566 Using cfiCommon0
          CFI (cfiCond566) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond566) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_277
          CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond566) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond566) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond566) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond566) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond566) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond566) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond566) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond566) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond566) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond566) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond566) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond566) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond566) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond566) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond566) CFA_SP SP+-4
          CFI (cfiCond566) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond567 Using cfiCommon0
          CFI (cfiCond567) Function zcl_SendWriteRequest
          CFI (cfiCond567) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_273
          CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond567) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond567) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond567) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond567) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond567) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond567) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond567) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond567) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond567) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond567) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond567) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond567) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond567) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond567) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond567) CFA_SP SP+-4
          CFI (cfiCond567) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond568 Using cfiCommon0
          CFI (cfiCond568) Function zclGetReadWriteCB
          CFI (cfiCond568) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_274
          CFI (cfiCond568) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond568) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond568) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond568) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond568) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond568) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond568) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond568) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond568) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond568) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond568) CFA_SP SP+-4
          CFI (cfiCond568) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond569 Using cfiCommon0
          CFI (cfiCond569) Function zcl_HandleExternal
          CFI (cfiCond569) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_261
          CFI (cfiCond569) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond569) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond569) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond569) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond569) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond569) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond569) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond569) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond569) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond569) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond569) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond569) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond569) CFA_SP SP+-4
          CFI (cfiCond569) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond570 Using cfiCommon0
          CFI (cfiCond570) Function zcl_getRawAFMsg
          CFI (cfiCond570) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_262
          CFI (cfiCond570) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond570) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond570) CFA_SP SP+-9
          CFI Block cfiCond571 Using cfiCommon0
          CFI (cfiCond571) Function zcl_ProcessMessageMSG
          CFI (cfiCond571) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_263
          CFI (cfiCond571) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond571) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond571) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond571) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond571) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond571) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond571) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond571) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond571) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond571) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond571) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond571) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond571) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond571) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond571) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond571) CFA_SP SP+-4
          CFI (cfiCond571) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond572 Using cfiCommon0
          CFI (cfiCond572) Function zcl_ProcessMessageMSG
          CFI (cfiCond572) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_264
          CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond572) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond572) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond572) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond572) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond572) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond572) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond572) CFA_SP SP+-4
          CFI (cfiCond572) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond573 Using cfiCommon0
          CFI (cfiCond573) Function zcl_ProcessMessageMSG
          CFI (cfiCond573) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_265
          CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond573) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond573) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond573) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond573) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond573) CFA_SP SP+-4
          CFI (cfiCond573) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond574 Using cfiCommon0
          CFI (cfiCond574) Function zcl_ProcessMessageMSG
          CFI (cfiCond574) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_266
          CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond574) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond574) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond574) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond574) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond574) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond574) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond574) CFA_SP SP+-4
          CFI (cfiCond574) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond575 Using cfiCommon0
          CFI (cfiCond575) Function zcl_ProcessMessageMSG
          CFI (cfiCond575) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_267
          CFI (cfiCond575) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond575) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond575) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond575) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond575) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond575) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond575) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond575) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond575) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond575) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond575) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond575) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond575) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond575) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond575) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond575) CFA_SP SP+-4
          CFI (cfiCond575) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond576 Using cfiCommon0
          CFI (cfiCond576) Function zclGetAttrDataLengthUsingCB
          CFI (cfiCond576) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_268
          CFI (cfiCond576) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond576) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond576) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond576) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond576) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond576) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond576) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond576) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond576) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond576) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond576) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond576) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond576) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond576) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond576) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond576) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond576) CFA_SP SP+-4
          CFI (cfiCond576) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond577 Using cfiCommon0
          CFI (cfiCond577) Function zclWriteAttrData
          CFI (cfiCond577) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_269
          CFI (cfiCond577) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond577) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond577) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond577) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond577) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond577) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond577) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond577) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond577) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond577) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond577) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond577) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond577) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond577) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond577) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond577) CFA_SP SP+-4
          CFI (cfiCond577) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond578 Using cfiCommon0
          CFI (cfiCond578) Function zclWriteAttrDataUsingCB
          CFI (cfiCond578) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_270
          CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond578) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond578) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond578) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond578) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond578) CFA_SP SP+-4
          CFI (cfiCond578) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond579 Using cfiCommon0
          CFI (cfiCond579) Function zclProcessInWriteCmd
          CFI (cfiCond579) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_271
          CFI (cfiCond579) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond579) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond579) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond579) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond579) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond579) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond579) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond579) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond579) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond579) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond579) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond579) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond579) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond579) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond579) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond579) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond579) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond579) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond579) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond579) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond579) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond579) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond579) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond579) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond579) CFA_SP SP+-4
          CFI (cfiCond579) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond580 Using cfiCommon0
          CFI (cfiCond580) Function zclRevertWriteUndividedCmd
          CFI (cfiCond580) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_272
          CFI (cfiCond580) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond580) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond580) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond580) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond580) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond580) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond580) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond580) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond580) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond580) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond580) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond580) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond580) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond580) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond580) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond580) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond580) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond580) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond580) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond580) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond580) CFA_SP SP+-4
          CFI (cfiCond580) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond581 Using cfiCommon0
          CFI (cfiCond581) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond581) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_331
          CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond581) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond581) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond581) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond581) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond581) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond581) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond581) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond581) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond581) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond581) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond581) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond581) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond581) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond581) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond581) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond581) CFA_SP SP+-4
          CFI (cfiCond581) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond582 Using cfiCommon0
          CFI (cfiCond582) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond582) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_332
          CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond582) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond582) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond582) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond582) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond582) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond582) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond582) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond582) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond582) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond582) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond582) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond582) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond582) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond582) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond582) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond582) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond582) CFA_SP SP+-4
          CFI (cfiCond582) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond583 Using cfiCommon0
          CFI (cfiCond583) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond583) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_333
          CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond583) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond583) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond583) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond583) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond583) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond583) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond583) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond583) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond583) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond583) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond583) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond583) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond583) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond583) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond583) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond583) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond583) CFA_SP SP+-4
          CFI (cfiCond583) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond584 Using cfiCommon0
          CFI (cfiCond584) Function zclProcessInWriteCmd
          CFI (cfiCond584) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_330
          CFI (cfiCond584) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond584) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond584) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond584) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond584) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond584) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond584) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond584) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond584) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond584) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond584) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond584) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond584) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond584) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond584) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond584) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond584) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond584) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond584) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond584) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond584) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond584) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond584) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond584) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond584) CFA_SP SP+-4
          CFI (cfiCond584) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker585 Using cfiCommon1
          CFI (cfiPicker585) NoFunction
          CFI (cfiPicker585) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond547
          CFI EndBlock cfiCond548
          CFI EndBlock cfiCond549
          CFI EndBlock cfiCond550
          CFI EndBlock cfiCond551
          CFI EndBlock cfiCond552
          CFI EndBlock cfiCond553
          CFI EndBlock cfiCond554
          CFI EndBlock cfiCond555
          CFI EndBlock cfiCond556
          CFI EndBlock cfiCond557
          CFI EndBlock cfiCond558
          CFI EndBlock cfiCond559
          CFI EndBlock cfiCond560
          CFI EndBlock cfiCond561
          CFI EndBlock cfiCond562
          CFI EndBlock cfiCond563
          CFI EndBlock cfiCond564
          CFI EndBlock cfiCond565
          CFI EndBlock cfiCond566
          CFI EndBlock cfiCond567
          CFI EndBlock cfiCond568
          CFI EndBlock cfiCond569
          CFI EndBlock cfiCond570
          CFI EndBlock cfiCond571
          CFI EndBlock cfiCond572
          CFI EndBlock cfiCond573
          CFI EndBlock cfiCond574
          CFI EndBlock cfiCond575
          CFI EndBlock cfiCond576
          CFI EndBlock cfiCond577
          CFI EndBlock cfiCond578
          CFI EndBlock cfiCond579
          CFI EndBlock cfiCond580
          CFI EndBlock cfiCond581
          CFI EndBlock cfiCond582
          CFI EndBlock cfiCond583
          CFI EndBlock cfiCond584
          CFI EndBlock cfiPicker585

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond586 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_286
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond587 Using cfiCommon0
          CFI (cfiCond587) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond587) Conditional ??CrossCallReturnLabel_287
          CFI (cfiCond587) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond587) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond587) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond587) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond587) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond587) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond587) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond587) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond587) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond587) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond587) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond587) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond587) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond587) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond587) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond587) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond587) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond587) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond587) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond587) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond587) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond587) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond587) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond587) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond587) CFA_SP SP+-2
          CFI (cfiCond587) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker588 Using cfiCommon1
          CFI (cfiPicker588) NoFunction
          CFI (cfiPicker588) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
          CFI EndBlock cfiCond586
          CFI EndBlock cfiCond587
          CFI EndBlock cfiPicker588
        REQUIRE ??Subroutine133_0
        ; // Fall through to label ??Subroutine133_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine133_0:
          CFI Block cfiCond589 Using cfiCommon0
          CFI Function zcl_event_loop
          CFI Conditional ??CrossCallReturnLabel_280
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond590 Using cfiCommon0
          CFI (cfiCond590) Function zclParseInReadRspCmd
          CFI (cfiCond590) Conditional ??CrossCallReturnLabel_281
          CFI (cfiCond590) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond590) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond590) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond590) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond590) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond590) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond590) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond590) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond590) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond590) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond590) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond590) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond590) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond590) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond590) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond590) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond590) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond590) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond590) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond590) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond590) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond590) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond590) CFA_SP SP+-2
          CFI (cfiCond590) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond591 Using cfiCommon0
          CFI (cfiCond591) Function zclParseInWriteRspCmd
          CFI (cfiCond591) Conditional ??CrossCallReturnLabel_282
          CFI (cfiCond591) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond591) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond591) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond591) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond591) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond591) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond591) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond591) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond591) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond591) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond591) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond591) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond591) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond591) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond591) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond591) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond591) CFA_SP SP+-2
          CFI (cfiCond591) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond592 Using cfiCommon0
          CFI (cfiCond592) Function zclProcessInWriteCmd
          CFI (cfiCond592) Conditional ??CrossCallReturnLabel_283
          CFI (cfiCond592) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond592) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond592) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond592) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond592) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond592) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond592) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond592) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond592) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond592) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond592) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond592) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond592) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond592) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond592) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond592) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond592) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond592) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond592) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond592) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond592) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond592) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond592) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond592) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond592) CFA_SP SP+-2
          CFI (cfiCond592) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond593 Using cfiCommon0
          CFI (cfiCond593) Function zclRevertWriteUndividedCmd
          CFI (cfiCond593) Conditional ??CrossCallReturnLabel_284
          CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond593) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond593) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond593) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond593) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond593) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond593) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond593) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond593) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond593) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond593) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond593) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond593) CFA_SP SP+-2
          CFI (cfiCond593) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond594 Using cfiCommon0
          CFI (cfiCond594) Function zclRevertWriteUndividedCmd
          CFI (cfiCond594) Conditional ??CrossCallReturnLabel_285
          CFI (cfiCond594) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond594) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond594) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond594) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond594) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond594) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond594) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond594) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond594) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond594) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond594) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond594) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond594) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond594) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond594) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond594) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond594) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond594) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond594) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond594) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond594) CFA_SP SP+-2
          CFI (cfiCond594) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond595 Using cfiCommon0
          CFI (cfiCond595) Function zclParseInReadRspCmd
          CFI (cfiCond595) Conditional ??CrossCallReturnLabel_286
          CFI (cfiCond595) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond595) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond595) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond595) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond595) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond595) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond595) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond595) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond595) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond595) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond595) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond595) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond595) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond595) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond595) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond595) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond595) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond595) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond595) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond595) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond595) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond595) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond595) CFA_SP SP+-2
          CFI (cfiCond595) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond596 Using cfiCommon0
          CFI (cfiCond596) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond596) Conditional ??CrossCallReturnLabel_287
          CFI (cfiCond596) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond596) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond596) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond596) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond596) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond596) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond596) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond596) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond596) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond596) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond596) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond596) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond596) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond596) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond596) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond596) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond596) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond596) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond596) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond596) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond596) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond596) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond596) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond596) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond596) CFA_SP SP+-2
          CFI (cfiCond596) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker597 Using cfiCommon1
          CFI (cfiPicker597) NoFunction
          CFI (cfiPicker597) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond589
          CFI EndBlock cfiCond590
          CFI EndBlock cfiCond591
          CFI EndBlock cfiCond592
          CFI EndBlock cfiCond593
          CFI EndBlock cfiCond594
          CFI EndBlock cfiCond595
          CFI EndBlock cfiCond596
          CFI EndBlock cfiPicker597

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond598 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond599 Using cfiCommon0
          CFI (cfiCond599) Function zcl_ProcessMessageMSG
          CFI (cfiCond599) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond599) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond599) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond599) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond599) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond599) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond599) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond599) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond599) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond599) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond599) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond599) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond599) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond599) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond599) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond599) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond599) CFA_SP SP+-2
          CFI (cfiCond599) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond600 Using cfiCommon0
          CFI (cfiCond600) Function zclProcessInWriteCmd
          CFI (cfiCond600) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond600) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond600) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond600) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond600) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond600) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond600) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond600) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond600) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond600) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond600) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond600) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond600) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond600) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond600) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond600) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond600) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond600) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond600) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond600) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond600) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond600) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond600) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond600) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond600) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond600) CFA_SP SP+-2
          CFI (cfiCond600) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker601 Using cfiCommon1
          CFI (cfiPicker601) NoFunction
          CFI (cfiPicker601) Picker
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        LCALL     ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_174:
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond598
          CFI EndBlock cfiCond599
          CFI EndBlock cfiCond600
          CFI EndBlock cfiPicker601

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond602 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond603 Using cfiCommon0
          CFI (cfiCond603) Function zclProcessInWriteCmd
          CFI (cfiCond603) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond603) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond603) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond603) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond603) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond603) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond603) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond603) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond603) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond603) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond603) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond603) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond603) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond603) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond603) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond603) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond603) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond603) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond603) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond603) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond603) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond603) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond603) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond603) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond603) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond603) CFA_SP SP+-2
          CFI (cfiCond603) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker604 Using cfiCommon1
          CFI (cfiPicker604) NoFunction
          CFI (cfiPicker604) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_300:
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        INC       R6
        RET
          CFI EndBlock cfiCond602
          CFI EndBlock cfiCond603
          CFI EndBlock cfiPicker604
// 4595 
// 4596 /*********************************************************************
// 4597  * @fn      zclRevertWriteUndividedCmd
// 4598  *
// 4599  * @brief   Revert the "Profile" Write Undevided Command
// 4600  *
// 4601  * @param   pInMsg - incoming message to process
// 4602  * @param   curWriteRec - old data
// 4603  * @param   numAttr - number of attributes to be reverted
// 4604  *
// 4605  * @return  none
// 4606  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4607 static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
zclRevertWriteUndividedCmd:
          CFI Block cfiBlock605 Using cfiCommon0
          CFI Function zclRevertWriteUndividedCmd
        CODE
// 4608                                     zclWriteRec_t *curWriteRec, uint16 numAttr )
// 4609 {
        FUNCALL zclRevertWriteUndividedCmd, zclWriteAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclRevertWriteUndividedCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclRevertWriteUndividedCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclRevertWriteUndividedCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V10,R4
        MOV       ?V11,R5
// 4610   uint8 i;
// 4611 
// 4612   for ( i = 0; i < numAttr; i++ )
        MOV       ?V0,#0x0
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine134_0 & 0xFFFF
??CrossCallReturnLabel_290:
        SJMP      ??zclRevertWriteUndividedCmd_0
// 4613   {
// 4614     zclAttrRec_t attrRec;
// 4615     zclWriteRec_t *statusRec = &(curWriteRec[i]);
// 4616 
// 4617     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4618                           statusRec->attrID, &attrRec ) )
// 4619     {
// 4620       break; // should never happen
// 4621     }
// 4622 
// 4623     if ( attrRec.attr.dataPtr != NULL )
// 4624     {
// 4625       // Just copy the old data back - no need to validate the data
// 4626       uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
// 4627       zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
// 4628     }
// 4629     else // Use CB
// 4630     {
// 4631       // Write the old data back
// 4632       zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4633                                &attrRec, statusRec->attrData );
??zclRevertWriteUndividedCmd_1:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine133_0 & 0xFFFF
// 4634     }
??CrossCallReturnLabel_284:
        ; Setup parameters for call to function zclWriteAttrDataUsingCB
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       A,R6
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_142:
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
??zclRevertWriteUndividedCmd_2:
        INC       ?V0
??zclRevertWriteUndividedCmd_0:
        CLR       C
        MOV       A,?V0
        SUBB      A,?V8
        CLR       A
        SUBB      A,?V9
        JC        $+5
        LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
        MOV       A,?V0
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V10
        ADD       A,R0
        MOV       R6,A
        MOV       A,?V11
        ADDC      A,R1
        MOV       R7,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_295:
        MOV       ?V4,R0
        MOV       ?V5,R1
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_315:
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_276:
        MOV       A,?V4
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_143:
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        JZ        ??zclRevertWriteUndividedCmd_3
        MOV       A,R6
        ADD       A,#0x3
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        LCALL     ??Subroutine132_0 & 0xFFFF
??CrossCallReturnLabel_272:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine133_0 & 0xFFFF
??CrossCallReturnLabel_285:
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       R4,?V6
        MOV       R5,?V7
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine35 & 0xFFFF
// 4635   } // for loop
??CrossCallReturnLabel_37:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
// 4636 }
??zclRevertWriteUndividedCmd_3:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        LJMP      ??Subroutine113_0 & 0xFFFF
          CFI EndBlock cfiBlock605

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine77:
          CFI Block cfiCond606 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_291
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond607 Using cfiCommon0
          CFI (cfiCond607) Function zclProcessInReadCmd
          CFI (cfiCond607) Conditional ??CrossCallReturnLabel_292
          CFI (cfiCond607) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond607) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond607) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond607) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond607) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond607) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond607) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond607) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond607) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond607) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond607) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond607) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond607) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond607) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond607) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond607) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond607) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond607) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond607) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond607) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond607) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond607) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond607) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond607) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond607) CFA_SP SP+-2
          CFI (cfiCond607) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker608 Using cfiCommon1
          CFI (cfiPicker608) NoFunction
          CFI (cfiPicker608) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond606
          CFI EndBlock cfiCond607
          CFI EndBlock cfiPicker608
        REQUIRE ??Subroutine134_0
        ; // Fall through to label ??Subroutine134_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine134_0:
          CFI Block cfiCond609 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_288
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond610 Using cfiCommon0
          CFI (cfiCond610) Function zclProcessInWriteCmd
          CFI (cfiCond610) Conditional ??CrossCallReturnLabel_289
          CFI (cfiCond610) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond610) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond610) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond610) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond610) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond610) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond610) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond610) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond610) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond610) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond610) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond610) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond610) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond610) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond610) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond610) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond610) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond610) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond610) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond610) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond610) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond610) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond610) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond610) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond610) CFA_SP SP+-2
          CFI (cfiCond610) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond611 Using cfiCommon0
          CFI (cfiCond611) Function zclRevertWriteUndividedCmd
          CFI (cfiCond611) Conditional ??CrossCallReturnLabel_290
          CFI (cfiCond611) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond611) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond611) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond611) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond611) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond611) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond611) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond611) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond611) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond611) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond611) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond611) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond611) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond611) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond611) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond611) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond611) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond611) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond611) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond611) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond611) CFA_SP SP+-2
          CFI (cfiCond611) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond612 Using cfiCommon0
          CFI (cfiCond612) Function zclProcessInReadCmd
          CFI (cfiCond612) Conditional ??CrossCallReturnLabel_291
          CFI (cfiCond612) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond612) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond612) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond612) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond612) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond612) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond612) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond612) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond612) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond612) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond612) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond612) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond612) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond612) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond612) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond612) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond612) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond612) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond612) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond612) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond612) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond612) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond612) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond612) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond612) CFA_SP SP+-2
          CFI (cfiCond612) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond613 Using cfiCommon0
          CFI (cfiCond613) Function zclProcessInReadCmd
          CFI (cfiCond613) Conditional ??CrossCallReturnLabel_292
          CFI (cfiCond613) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond613) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond613) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond613) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond613) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond613) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond613) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond613) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond613) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond613) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond613) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond613) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond613) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond613) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond613) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond613) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond613) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond613) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond613) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond613) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond613) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond613) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond613) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond613) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond613) CFA_SP SP+-2
          CFI (cfiCond613) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker614 Using cfiCommon1
          CFI (cfiPicker614) NoFunction
          CFI (cfiPicker614) Picker
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        RET
          CFI EndBlock cfiCond609
          CFI EndBlock cfiCond610
          CFI EndBlock cfiCond611
          CFI EndBlock cfiCond612
          CFI EndBlock cfiCond613
          CFI EndBlock cfiPicker614

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine68:
          CFI Block cfiCond615 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_298
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond616 Using cfiCommon0
          CFI (cfiCond616) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond616) Conditional ??CrossCallReturnLabel_299
          CFI (cfiCond616) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond616) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond616) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond616) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond616) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond616) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond616) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond616) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond616) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond616) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond616) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond616) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond616) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond616) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond616) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond616) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond616) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond616) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond616) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond616) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond616) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond616) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond616) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond616) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond616) CFA_SP SP+-2
          CFI (cfiCond616) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker617 Using cfiCommon1
          CFI (cfiPicker617) NoFunction
          CFI (cfiPicker617) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond615
          CFI EndBlock cfiCond616
          CFI EndBlock cfiPicker617
        REQUIRE ??Subroutine135_0
        ; // Fall through to label ??Subroutine135_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine135_0:
          CFI Block cfiCond618 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_293
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond619 Using cfiCommon0
          CFI (cfiCond619) Function zclProcessInReadCmd
          CFI (cfiCond619) Conditional ??CrossCallReturnLabel_294
          CFI (cfiCond619) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond619) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond619) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond619) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond619) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond619) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond619) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond619) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond619) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond619) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond619) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond619) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond619) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond619) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond619) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond619) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond619) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond619) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond619) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond619) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond619) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond619) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond619) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond619) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond619) CFA_SP SP+-2
          CFI (cfiCond619) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond620 Using cfiCommon0
          CFI (cfiCond620) Function zclRevertWriteUndividedCmd
          CFI (cfiCond620) Conditional ??CrossCallReturnLabel_295
          CFI (cfiCond620) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond620) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond620) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond620) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond620) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond620) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond620) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond620) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond620) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond620) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond620) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond620) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond620) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond620) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond620) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond620) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond620) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond620) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond620) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond620) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond620) CFA_SP SP+-2
          CFI (cfiCond620) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond621 Using cfiCommon0
          CFI (cfiCond621) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond621) Conditional ??CrossCallReturnLabel_296
          CFI (cfiCond621) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond621) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond621) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond621) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond621) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond621) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond621) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond621) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond621) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond621) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond621) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond621) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond621) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond621) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond621) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond621) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond621) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond621) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond621) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond621) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond621) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond621) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond621) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond621) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond621) CFA_SP SP+-2
          CFI (cfiCond621) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond622 Using cfiCommon0
          CFI (cfiCond622) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond622) Conditional ??CrossCallReturnLabel_297
          CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond622) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond622) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond622) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond622) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond622) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond622) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond622) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond622) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond622) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond622) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond622) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond622) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond622) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond622) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond622) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond622) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond622) CFA_SP SP+-2
          CFI (cfiCond622) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond623 Using cfiCommon0
          CFI (cfiCond623) Function zcl_SendReadRsp
          CFI (cfiCond623) Conditional ??CrossCallReturnLabel_298
          CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond623) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond623) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond623) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond623) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond623) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond623) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond623) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond623) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond623) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond623) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond623) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond623) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond623) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond623) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond623) CFA_SP SP+-2
          CFI (cfiCond623) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond624 Using cfiCommon0
          CFI (cfiCond624) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond624) Conditional ??CrossCallReturnLabel_299
          CFI (cfiCond624) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond624) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond624) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond624) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond624) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond624) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond624) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond624) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond624) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond624) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond624) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond624) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond624) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond624) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond624) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond624) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond624) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond624) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond624) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond624) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond624) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond624) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond624) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond624) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond624) CFA_SP SP+-2
          CFI (cfiCond624) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker625 Using cfiCommon1
          CFI (cfiPicker625) NoFunction
          CFI (cfiPicker625) Picker
        LCALL     ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_304:
        RET
          CFI EndBlock cfiCond618
          CFI EndBlock cfiCond619
          CFI EndBlock cfiCond620
          CFI EndBlock cfiCond621
          CFI EndBlock cfiCond622
          CFI EndBlock cfiCond623
          CFI EndBlock cfiCond624
          CFI EndBlock cfiPicker625

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine103:
          CFI Block cfiCond626 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_232
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond627 Using cfiCommon0
          CFI (cfiCond627) Function zcl_ProcessMessageMSG
          CFI (cfiCond627) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_233
          CFI (cfiCond627) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond627) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond627) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond627) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond627) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond627) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond627) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond627) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond627) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond627) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond627) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond627) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond627) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond627) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond627) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond627) CFA_SP SP+-4
          CFI (cfiCond627) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond628 Using cfiCommon0
          CFI (cfiCond628) Function zcl_SendCommand
          CFI (cfiCond628) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_231
          CFI (cfiCond628) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond628) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond628) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond628) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond628) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond628) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond628) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond628) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond628) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond628) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond628) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond628) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond628) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond628) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond628) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond628) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond628) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond628) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond628) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond628) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond628) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond628) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond628) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond628) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond628) CFA_SP SP+-4
          CFI (cfiCond628) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond629 Using cfiCommon0
          CFI (cfiCond629) Function zcl_addExternalFoundationHandler
          CFI (cfiCond629) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_223
          CFI (cfiCond629) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond629) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond629) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond629) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond629) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond629) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond629) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond629) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond629) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond629) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond629) CFA_SP SP+-4
          CFI (cfiCond629) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond630 Using cfiCommon0
          CFI (cfiCond630) Function zcl_addExternalFoundationHandler
          CFI (cfiCond630) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_218
          CFI (cfiCond630) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond630) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond630) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond630) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond630) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond630) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond630) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond630) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond630) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond630) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond630) CFA_SP SP+-4
          CFI (cfiCond630) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond631 Using cfiCommon0
          CFI (cfiCond631) Function zcl_getExternalFoundationHandler
          CFI (cfiCond631) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_219
          CFI (cfiCond631) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond631) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond631) CFA_SP SP+-9
          CFI Block cfiCond632 Using cfiCommon0
          CFI (cfiCond632) Function zcl_SendCommand
          CFI (cfiCond632) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_220
          CFI (cfiCond632) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond632) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond632) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond632) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond632) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond632) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond632) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond632) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond632) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond632) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond632) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond632) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond632) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond632) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond632) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond632) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond632) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond632) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond632) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond632) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond632) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond632) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond632) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond632) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond632) CFA_SP SP+-4
          CFI (cfiCond632) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond633 Using cfiCommon0
          CFI (cfiCond633) Function zcl_SendCommand
          CFI (cfiCond633) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_221
          CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond633) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond633) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond633) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond633) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond633) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond633) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond633) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond633) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond633) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond633) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond633) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond633) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond633) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond633) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond633) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond633) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond633) CFA_SP SP+-4
          CFI (cfiCond633) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond634 Using cfiCommon0
          CFI (cfiCond634) Function zcl_ProcessMessageMSG
          CFI (cfiCond634) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_224
          CFI (cfiCond634) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond634) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond634) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond634) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond634) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond634) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond634) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond634) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond634) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond634) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond634) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond634) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond634) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond634) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond634) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond634) CFA_SP SP+-4
          CFI (cfiCond634) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond635 Using cfiCommon0
          CFI (cfiCond635) Function zcl_ProcessMessageMSG
          CFI (cfiCond635) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_225
          CFI (cfiCond635) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond635) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond635) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond635) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond635) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond635) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond635) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond635) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond635) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond635) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond635) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond635) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond635) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond635) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond635) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond635) CFA_SP SP+-4
          CFI (cfiCond635) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond636 Using cfiCommon0
          CFI (cfiCond636) Function zclFindClusterOption
          CFI (cfiCond636) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_222
          CFI (cfiCond636) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond636) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond636) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond636) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond636) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond636) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond636) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond636) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond636) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond636) CFA_SP SP+-4
          CFI (cfiCond636) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond637 Using cfiCommon0
          CFI (cfiCond637) Function zcl_ReadAttrData
          CFI (cfiCond637) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_226
          CFI (cfiCond637) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond637) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond637) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond637) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond637) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond637) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond637) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond637) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond637) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond637) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond637) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond637) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond637) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond637) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond637) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond637) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond637) CFA_SP SP+-4
          CFI (cfiCond637) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond638 Using cfiCommon0
          CFI (cfiCond638) Function zclWriteAttrData
          CFI (cfiCond638) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_227
          CFI (cfiCond638) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond638) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond638) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond638) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond638) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond638) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond638) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond638) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond638) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond638) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond638) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond638) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond638) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond638) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond638) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond638) CFA_SP SP+-4
          CFI (cfiCond638) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond639 Using cfiCommon0
          CFI (cfiCond639) Function zclProcessInWriteCmd
          CFI (cfiCond639) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_228
          CFI (cfiCond639) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond639) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond639) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond639) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond639) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond639) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond639) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond639) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond639) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond639) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond639) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond639) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond639) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond639) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond639) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond639) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond639) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond639) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond639) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond639) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond639) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond639) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond639) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond639) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond639) CFA_SP SP+-4
          CFI (cfiCond639) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond640 Using cfiCommon0
          CFI (cfiCond640) Function zclProcessInWriteCmd
          CFI (cfiCond640) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_229
          CFI (cfiCond640) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond640) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond640) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond640) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond640) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond640) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond640) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond640) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond640) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond640) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond640) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond640) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond640) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond640) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond640) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond640) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond640) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond640) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond640) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond640) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond640) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond640) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond640) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond640) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond640) CFA_SP SP+-4
          CFI (cfiCond640) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond641 Using cfiCommon0
          CFI (cfiCond641) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond641) Conditional ??CrossCallReturnLabel_303, ??CrossCallReturnLabel_230
          CFI (cfiCond641) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond641) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond641) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond641) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond641) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond641) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond641) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond641) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond641) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond641) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond641) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond641) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond641) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond641) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond641) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond641) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond641) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond641) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond641) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond641) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond641) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond641) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond641) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond641) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond641) CFA_SP SP+-4
          CFI (cfiCond641) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond642 Using cfiCommon0
          CFI (cfiCond642) Function zclParseInReadCmd
          CFI (cfiCond642) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_105
          CFI (cfiCond642) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond642) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond642) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond642) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond642) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond642) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond642) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond642) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond642) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond642) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond642) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond642) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond642) CFA_SP SP+-4
          CFI (cfiCond642) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond643 Using cfiCommon0
          CFI (cfiCond643) Function zclParseInDefaultRspCmd
          CFI (cfiCond643) Conditional ??CrossCallReturnLabel_302, ??CrossCallReturnLabel_106
          CFI (cfiCond643) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond643) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond643) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond643) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond643) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond643) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond643) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond643) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond643) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond643) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond643) CFA_SP SP+-4
          CFI (cfiCond643) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond644 Using cfiCommon0
          CFI (cfiCond644) Function zclParseInReadRspCmd
          CFI (cfiCond644) Conditional ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_40
          CFI (cfiCond644) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond644) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond644) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond644) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond644) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond644) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond644) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond644) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond644) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond644) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond644) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond644) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond644) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond644) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond644) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond644) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond644) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond644) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond644) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond644) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond644) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond644) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond644) CFA_SP SP+-4
          CFI (cfiCond644) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond645 Using cfiCommon0
          CFI (cfiCond645) Function zclProcessInReadCmd
          CFI (cfiCond645) Conditional ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_41
          CFI (cfiCond645) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond645) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond645) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond645) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond645) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond645) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond645) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond645) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond645) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond645) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond645) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond645) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond645) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond645) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond645) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond645) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond645) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond645) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond645) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond645) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond645) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond645) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond645) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond645) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond645) CFA_SP SP+-4
          CFI (cfiCond645) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond646 Using cfiCommon0
          CFI (cfiCond646) Function zclProcessInReadCmd
          CFI (cfiCond646) Conditional ??CrossCallReturnLabel_301, ??CrossCallReturnLabel_42
          CFI (cfiCond646) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond646) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond646) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond646) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond646) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond646) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond646) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond646) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond646) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond646) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond646) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond646) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond646) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond646) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond646) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond646) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond646) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond646) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond646) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond646) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond646) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond646) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond646) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond646) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond646) CFA_SP SP+-4
          CFI (cfiCond646) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond647 Using cfiCommon0
          CFI (cfiCond647) Function zclProcessInWriteCmd
          CFI (cfiCond647) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_0
          CFI (cfiCond647) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond647) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond647) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond647) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond647) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond647) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond647) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond647) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond647) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond647) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond647) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond647) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond647) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond647) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond647) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond647) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond647) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond647) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond647) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond647) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond647) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond647) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond647) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond647) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond647) CFA_SP SP+-4
          CFI (cfiCond647) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond648 Using cfiCommon0
          CFI (cfiCond648) Function zclProcessInWriteCmd
          CFI (cfiCond648) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_1
          CFI (cfiCond648) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond648) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond648) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond648) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond648) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond648) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond648) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond648) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond648) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond648) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond648) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond648) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond648) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond648) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond648) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond648) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond648) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond648) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond648) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond648) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond648) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond648) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond648) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond648) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond648) CFA_SP SP+-4
          CFI (cfiCond648) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond649 Using cfiCommon0
          CFI (cfiCond649) Function zcl_SendReadRsp
          CFI (cfiCond649) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_298
          CFI (cfiCond649) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond649) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond649) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond649) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond649) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond649) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond649) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond649) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond649) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond649) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond649) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond649) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond649) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond649) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond649) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond649) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond649) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond649) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond649) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond649) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond649) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond649) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond649) CFA_SP SP+-4
          CFI (cfiCond649) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond650 Using cfiCommon0
          CFI (cfiCond650) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond650) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_299
          CFI (cfiCond650) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond650) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond650) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond650) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond650) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond650) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond650) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond650) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond650) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond650) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond650) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond650) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond650) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond650) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond650) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond650) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond650) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond650) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond650) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond650) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond650) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond650) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond650) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond650) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond650) CFA_SP SP+-4
          CFI (cfiCond650) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond651 Using cfiCommon0
          CFI (cfiCond651) Function zcl_addExternalFoundationHandler
          CFI (cfiCond651) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_293
          CFI (cfiCond651) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond651) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond651) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond651) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond651) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond651) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond651) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond651) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond651) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond651) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond651) CFA_SP SP+-4
          CFI (cfiCond651) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond652 Using cfiCommon0
          CFI (cfiCond652) Function zclProcessInReadCmd
          CFI (cfiCond652) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_294
          CFI (cfiCond652) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond652) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond652) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond652) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond652) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond652) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond652) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond652) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond652) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond652) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond652) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond652) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond652) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond652) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond652) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond652) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond652) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond652) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond652) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond652) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond652) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond652) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond652) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond652) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond652) CFA_SP SP+-4
          CFI (cfiCond652) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond653 Using cfiCommon0
          CFI (cfiCond653) Function zclRevertWriteUndividedCmd
          CFI (cfiCond653) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_295
          CFI (cfiCond653) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond653) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond653) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond653) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond653) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond653) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond653) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond653) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond653) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond653) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond653) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond653) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond653) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond653) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond653) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond653) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond653) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond653) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond653) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond653) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond653) CFA_SP SP+-4
          CFI (cfiCond653) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond654 Using cfiCommon0
          CFI (cfiCond654) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond654) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_296
          CFI (cfiCond654) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond654) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond654) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond654) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond654) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond654) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond654) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond654) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond654) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond654) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond654) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond654) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond654) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond654) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond654) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond654) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond654) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond654) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond654) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond654) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond654) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond654) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond654) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond654) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond654) CFA_SP SP+-4
          CFI (cfiCond654) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond655 Using cfiCommon0
          CFI (cfiCond655) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond655) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_297
          CFI (cfiCond655) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond655) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond655) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond655) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond655) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond655) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond655) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond655) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond655) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond655) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond655) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond655) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond655) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond655) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond655) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond655) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond655) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond655) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond655) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond655) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond655) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond655) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond655) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond655) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond655) CFA_SP SP+-4
          CFI (cfiCond655) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker656 Using cfiCommon1
          CFI (cfiPicker656) NoFunction
          CFI (cfiPicker656) Picker
        LCALL     ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_310:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond626
          CFI EndBlock cfiCond627
          CFI EndBlock cfiCond628
          CFI EndBlock cfiCond629
          CFI EndBlock cfiCond630
          CFI EndBlock cfiCond631
          CFI EndBlock cfiCond632
          CFI EndBlock cfiCond633
          CFI EndBlock cfiCond634
          CFI EndBlock cfiCond635
          CFI EndBlock cfiCond636
          CFI EndBlock cfiCond637
          CFI EndBlock cfiCond638
          CFI EndBlock cfiCond639
          CFI EndBlock cfiCond640
          CFI EndBlock cfiCond641
          CFI EndBlock cfiCond642
          CFI EndBlock cfiCond643
          CFI EndBlock cfiCond644
          CFI EndBlock cfiCond645
          CFI EndBlock cfiCond646
          CFI EndBlock cfiCond647
          CFI EndBlock cfiCond648
          CFI EndBlock cfiCond649
          CFI EndBlock cfiCond650
          CFI EndBlock cfiCond651
          CFI EndBlock cfiCond652
          CFI EndBlock cfiCond653
          CFI EndBlock cfiCond654
          CFI EndBlock cfiCond655
          CFI EndBlock cfiPicker656

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond657 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_318
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond658 Using cfiCommon0
          CFI (cfiCond658) Function zcl_SendReadRsp
          CFI (cfiCond658) Conditional ??CrossCallReturnLabel_319
          CFI (cfiCond658) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond658) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond658) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond658) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond658) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond658) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond658) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond658) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond658) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond658) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond658) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond658) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond658) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond658) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond658) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond658) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond658) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond658) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond658) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond658) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond658) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond658) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond658) CFA_SP SP+-2
          CFI (cfiCond658) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond659 Using cfiCommon0
          CFI (cfiCond659) Function zclProcessInReadCmd
          CFI (cfiCond659) Conditional ??CrossCallReturnLabel_320
          CFI (cfiCond659) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond659) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond659) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond659) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond659) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond659) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond659) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond659) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond659) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond659) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond659) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond659) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond659) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond659) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond659) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond659) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond659) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond659) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond659) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond659) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond659) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond659) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond659) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond659) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond659) CFA_SP SP+-2
          CFI (cfiCond659) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker660 Using cfiCommon1
          CFI (cfiPicker660) NoFunction
          CFI (cfiPicker660) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond657
          CFI EndBlock cfiCond658
          CFI EndBlock cfiCond659
          CFI EndBlock cfiPicker660
        REQUIRE ??Subroutine136_0
        ; // Fall through to label ??Subroutine136_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine136_0:
          CFI Block cfiCond661 Using cfiCommon0
          CFI Function zclWriteAttrDataUsingCB
          CFI Conditional ??CrossCallReturnLabel_317
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond662 Using cfiCommon0
          CFI (cfiCond662) Function zcl_HandleExternal
          CFI (cfiCond662) Conditional ??CrossCallReturnLabel_318
          CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond662) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond662) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond662) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond662) CFA_SP SP+-2
          CFI (cfiCond662) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond663 Using cfiCommon0
          CFI (cfiCond663) Function zcl_SendReadRsp
          CFI (cfiCond663) Conditional ??CrossCallReturnLabel_319
          CFI (cfiCond663) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond663) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond663) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond663) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond663) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond663) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond663) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond663) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond663) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond663) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond663) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond663) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond663) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond663) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond663) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond663) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond663) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond663) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond663) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond663) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond663) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond663) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond663) CFA_SP SP+-2
          CFI (cfiCond663) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond664 Using cfiCommon0
          CFI (cfiCond664) Function zclProcessInReadCmd
          CFI (cfiCond664) Conditional ??CrossCallReturnLabel_320
          CFI (cfiCond664) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond664) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond664) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond664) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond664) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond664) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond664) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond664) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond664) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond664) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond664) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond664) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond664) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond664) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond664) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond664) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond664) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond664) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond664) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond664) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond664) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond664) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond664) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond664) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond664) CFA_SP SP+-2
          CFI (cfiCond664) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker665 Using cfiCommon1
          CFI (cfiPicker665) NoFunction
          CFI (cfiPicker665) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond661
          CFI EndBlock cfiCond662
          CFI EndBlock cfiCond663
          CFI EndBlock cfiCond664
          CFI EndBlock cfiPicker665
        REQUIRE ??Subroutine137_0
        ; // Fall through to label ??Subroutine137_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine137_0:
          CFI Block cfiCond666 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_311
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond667 Using cfiCommon0
          CFI (cfiCond667) Function zcl_ProcessMessageMSG
          CFI (cfiCond667) Conditional ??CrossCallReturnLabel_312
          CFI (cfiCond667) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond667) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond667) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond667) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond667) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond667) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond667) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond667) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond667) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond667) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond667) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond667) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond667) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond667) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond667) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond667) CFA_SP SP+-2
          CFI (cfiCond667) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond668 Using cfiCommon0
          CFI (cfiCond668) Function zclFindAttrRec
          CFI (cfiCond668) Conditional ??CrossCallReturnLabel_313
          CFI (cfiCond668) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond668) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond668) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond668) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond668) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond668) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond668) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond668) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond668) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond668) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond668) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond668) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond668) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond668) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond668) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond668) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond668) CFA_SP SP+-2
          CFI (cfiCond668) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond669 Using cfiCommon0
          CFI (cfiCond669) Function zclProcessInReadCmd
          CFI (cfiCond669) Conditional ??CrossCallReturnLabel_314
          CFI (cfiCond669) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond669) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond669) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond669) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond669) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond669) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond669) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond669) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond669) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond669) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond669) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond669) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond669) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond669) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond669) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond669) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond669) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond669) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond669) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond669) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond669) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond669) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond669) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond669) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond669) CFA_SP SP+-2
          CFI (cfiCond669) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond670 Using cfiCommon0
          CFI (cfiCond670) Function zclRevertWriteUndividedCmd
          CFI (cfiCond670) Conditional ??CrossCallReturnLabel_315
          CFI (cfiCond670) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond670) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond670) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond670) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond670) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond670) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond670) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond670) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond670) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond670) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond670) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond670) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond670) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond670) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond670) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond670) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond670) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond670) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond670) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond670) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond670) CFA_SP SP+-2
          CFI (cfiCond670) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond671 Using cfiCommon0
          CFI (cfiCond671) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond671) Conditional ??CrossCallReturnLabel_316
          CFI (cfiCond671) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond671) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond671) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond671) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond671) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond671) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond671) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond671) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond671) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond671) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond671) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond671) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond671) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond671) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond671) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond671) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond671) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond671) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond671) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond671) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond671) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond671) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond671) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond671) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond671) CFA_SP SP+-2
          CFI (cfiCond671) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond672 Using cfiCommon0
          CFI (cfiCond672) Function zclWriteAttrDataUsingCB
          CFI (cfiCond672) Conditional ??CrossCallReturnLabel_317
          CFI (cfiCond672) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond672) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond672) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond672) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond672) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond672) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond672) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond672) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond672) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond672) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond672) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond672) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond672) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond672) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond672) CFA_SP SP+-2
          CFI (cfiCond672) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond673 Using cfiCommon0
          CFI (cfiCond673) Function zcl_HandleExternal
          CFI (cfiCond673) Conditional ??CrossCallReturnLabel_318
          CFI (cfiCond673) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond673) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond673) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond673) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond673) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond673) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond673) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond673) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond673) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond673) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond673) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond673) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond673) CFA_SP SP+-2
          CFI (cfiCond673) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond674 Using cfiCommon0
          CFI (cfiCond674) Function zcl_SendReadRsp
          CFI (cfiCond674) Conditional ??CrossCallReturnLabel_319
          CFI (cfiCond674) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond674) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond674) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond674) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond674) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond674) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond674) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond674) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond674) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond674) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond674) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond674) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond674) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond674) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond674) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond674) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond674) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond674) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond674) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond674) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond674) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond674) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond674) CFA_SP SP+-2
          CFI (cfiCond674) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond675 Using cfiCommon0
          CFI (cfiCond675) Function zclProcessInReadCmd
          CFI (cfiCond675) Conditional ??CrossCallReturnLabel_320
          CFI (cfiCond675) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond675) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond675) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond675) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond675) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond675) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond675) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond675) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond675) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond675) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond675) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond675) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond675) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond675) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond675) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond675) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond675) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond675) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond675) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond675) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond675) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond675) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond675) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond675) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond675) CFA_SP SP+-2
          CFI (cfiCond675) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker676 Using cfiCommon1
          CFI (cfiPicker676) NoFunction
          CFI (cfiPicker676) Picker
        LCALL     ??Subroutine141_0 & 0xFFFF
??CrossCallReturnLabel_344:
        RET
          CFI EndBlock cfiCond666
          CFI EndBlock cfiCond667
          CFI EndBlock cfiCond668
          CFI EndBlock cfiCond669
          CFI EndBlock cfiCond670
          CFI EndBlock cfiCond671
          CFI EndBlock cfiCond672
          CFI EndBlock cfiCond673
          CFI EndBlock cfiCond674
          CFI EndBlock cfiCond675
          CFI EndBlock cfiPicker676
// 4637 
// 4638 /*********************************************************************
// 4639  * @fn      zclProcessInWriteUndividedCmd
// 4640  *
// 4641  * @brief   Process the "Profile" Write Undivided Command
// 4642  *
// 4643  * @param   pInMsg - incoming message to process
// 4644  *
// 4645  * @return  TRUE if command processed. FALSE, otherwise.
// 4646  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4647 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
zclProcessInWriteUndividedCmd:
          CFI Block cfiBlock677 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
        CODE
// 4648 {
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclGetAttrDataLengthUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclWriteAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclReadAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclWriteAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclRevertWriteUndividedCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zcl_SendWriteRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V4,R2
        MOV       ?V5,R3
// 4649   zclWriteCmd_t *writeCmd;
// 4650   zclWriteRspCmd_t *writeRspCmd;
// 4651   zclAttrRec_t attrRec;
// 4652   uint16 dataLen;
// 4653   uint16 curLen = 0;
        MOV       ?V8,#0x0
        MOV       ?V9,#0x0
// 4654   uint8 j = 0;
        MOV       R6,#0x0
// 4655   uint8 i;
// 4656 
// 4657   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        LCALL     ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_296:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine117_0 & 0xFFFF
// 4658 
// 4659   // Allocate space for Write Response Command
// 4660   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4661                    + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
??CrossCallReturnLabel_204:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 4662   if ( writeRspCmd == NULL )
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
// 4663   {
// 4664     return FALSE; // EMBEDDED RETURN
// 4665   }
// 4666 
// 4667   // If any attribute cannot be written, no attribute values are changed. Hence,
// 4668   // make sure all the attributes are supported and writable
// 4669   for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV       R7,#0x0
        SJMP      ??zclProcessInWriteUndividedCmd_1
// 4670   {
// 4671     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4672 
// 4673     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4674                           statusRec->attrID, &attrRec ) )
// 4675     {
// 4676       // Attribute is not supported - stop here
// 4677       writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4678       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4679       break;
// 4680     }
// 4681 
// 4682     if ( statusRec->dataType != attrRec.attr.dataType )
// 4683     {
// 4684       // Attribute data type is incorrect - stope here
// 4685       writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4686       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4687       break;
// 4688     }
// 4689 
// 4690     if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
// 4691     {
// 4692       // Attribute is not writable - stop here
// 4693       writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
// 4694       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4695       break;
// 4696     }
// 4697 
// 4698     if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
// 4699     {
// 4700       // Not authorized to write - stop here
// 4701       writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
// 4702       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4703       break;
// 4704     }
// 4705 
// 4706     // Attribute Data length
// 4707     if ( attrRec.attr.dataPtr != NULL )
// 4708     {
// 4709       dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
// 4710     }
// 4711     else // Use CB
// 4712     {
// 4713       dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4714                                              statusRec->attrID );
??zclProcessInWriteUndividedCmd_2:
        LCALL     ?Subroutine51 & 0xFFFF
// 4715     }
??CrossCallReturnLabel_73:
        LCALL     ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_316:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_277:
        LCALL     ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_136:
        LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
??zclProcessInWriteUndividedCmd_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine142_0 & 0xFFFF
// 4716 
// 4717     // add padding if needed
// 4718     if ( PADDING_NEEDED( dataLen ) )
??CrossCallReturnLabel_349:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??CrossCallReturnLabel_152
// 4719     {
// 4720       dataLen++;
        LCALL     ?Subroutine90 & 0xFFFF
// 4721     }
// 4722 
// 4723     curLen += dataLen;
??CrossCallReturnLabel_152:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,?V8
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V9
        MOV       ?V9,A
        INC       R7
??zclProcessInWriteUndividedCmd_1:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_59:
        JNC       ??zclProcessInWriteUndividedCmd_4
        MOV       A,R7
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_331:
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        JNZ       ??zclProcessInWriteUndividedCmd_5
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       A,#-0x7a
??zclProcessInWriteUndividedCmd_6:
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_206:
        MOV       R6,#0x1
// 4724   } // for loop
// 4725 
// 4726   writeRspCmd->numAttr = j;
??zclProcessInWriteUndividedCmd_4:
        MOV       A,R6
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
// 4727   if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
        JZ        $+5
        LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
// 4728   {
// 4729     uint8 *curDataPtr;
// 4730     zclWriteRec_t *curWriteRec;
// 4731 
// 4732     // calculate the length of the current data header
// 4733     uint8 hdrLen = j * sizeof( zclWriteRec_t );
        MOV       B,#0x5
        MUL       AB
        MOV       R7,A
// 4734 
// 4735     // Allocate space to keep a copy of the current data
// 4736     curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD       A,?V8
        MOV       R2,A
        CLR       A
        ADDC      A,?V9
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V14,R2
        MOV       ?V15,R3
// 4737     if ( curWriteRec == NULL )
        MOV       A,R2
        ORL       A,?V15
        JNZ       ??zclProcessInWriteUndividedCmd_8
// 4738     {
// 4739       zcl_mem_free(writeRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 4740       return FALSE; // EMBEDDED RETURN
??zclProcessInWriteUndividedCmd_0:
        MOV       R1,#0x0
        LJMP      ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
// 4741     }
??zclProcessInWriteUndividedCmd_5:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine139_0 & 0xFFFF
??CrossCallReturnLabel_327:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JZ        ??zclProcessInWriteUndividedCmd_10
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       A,#-0x73
        SJMP      ??zclProcessInWriteUndividedCmd_6
??zclProcessInWriteUndividedCmd_10:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??zclProcessInWriteUndividedCmd_11
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       A,#-0x78
        SJMP      ??zclProcessInWriteUndividedCmd_6
??zclProcessInWriteUndividedCmd_11:
        MOV       C,0xE0 /* A   */.5
        JNC       ??zclProcessInWriteUndividedCmd_12
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       A,#0x7e
        SJMP      ??zclProcessInWriteUndividedCmd_6
??zclProcessInWriteUndividedCmd_12:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_192:
        JNZ       $+5
        LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
        ; Setup parameters for call to function zclGetAttrDataLength
        LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
        LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
// 4742 
// 4743     curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
??zclProcessInWriteUndividedCmd_8:
        MOV       A,R2
        ADD       A,R7
        MOV       ?V8,A
        CLR       A
        ADDC      A,R3
        MOV       ?V9,A
// 4744 
// 4745     // Write the new data over
// 4746     for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV       R7,#0x0
        SJMP      ??zclProcessInWriteUndividedCmd_13
// 4747     {
// 4748       uint8 status;
// 4749       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4750       zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
// 4751 
// 4752       if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4753                             statusRec->attrID, &attrRec ) )
// 4754       {
// 4755         break; // should never happen
// 4756       }
// 4757 
// 4758       // Keep a copy of the current data before before writing the new data over
// 4759       curStatusRec->attrID = statusRec->attrID;
// 4760       curStatusRec->attrData = curDataPtr;
// 4761 
// 4762       if ( attrRec.attr.dataPtr != NULL )
// 4763       {
// 4764         // Read the current value
// 4765         zclReadAttrData( curDataPtr, &attrRec, &dataLen );
// 4766 
// 4767         // Write the new attribute value
// 4768         status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4769                                    &attrRec, statusRec );
// 4770       }
// 4771       else // Use CBs
// 4772       {
// 4773         // Read the current value
// 4774         zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4775                                 statusRec->attrID, curDataPtr, &dataLen );
// 4776         // Write the new attribute value
// 4777         status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4778                                           &attrRec, statusRec->attrData );
// 4779       }
// 4780 
// 4781       // If successful, a write attribute status record shall NOT be generated
// 4782       if ( status != ZCL_STATUS_SUCCESS )
// 4783       {
// 4784         writeRspCmd->attrList[j].status = status;
// 4785         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4786 
// 4787         // Since this write failed, we need to revert all the pervious writes
// 4788         zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
// 4789         break;
// 4790       }
// 4791 
// 4792       // add padding if needed
// 4793       if ( PADDING_NEEDED( dataLen ) )
??zclProcessInWriteUndividedCmd_14:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??CrossCallReturnLabel_153
// 4794       {
// 4795         dataLen++;
        LCALL     ?Subroutine90 & 0xFFFF
// 4796       }
// 4797 
// 4798       curDataPtr += dataLen;
??CrossCallReturnLabel_153:
        LCALL     ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_299:
        MOV       A,?V8
        ADD       A,R0
        MOV       ?V8,A
        MOV       A,?V9
        ADDC      A,R1
        MOV       ?V9,A
        INC       R7
??zclProcessInWriteUndividedCmd_13:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_60:
        JC        $+5
        LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
        MOV       A,R7
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV       A,?V14
        ADD       A,R0
        MOV       ?V12,A
        MOV       A,?V15
        ADDC      A,R1
        MOV       ?V13,A
        LCALL     ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_332:
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_297:
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV       A,?V8
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V9
        MOVX      @DPTR,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_230:
        JZ        ??zclProcessInWriteUndividedCmd_16
        ; Setup parameters for call to function zclReadAttrData
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_323:
        ; Setup parameters for call to function zclWriteAttrData
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_134:
        LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
        SJMP      ??zclProcessInWriteUndividedCmd_17
          CFI CFA_XSP16 add(XSP16, 36)
??zclProcessInWriteUndividedCmd_16:
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_324:
        ; Setup parameters for call to function zclReadAttrDataUsingCB
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_333:
        LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_74:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R0
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_137:
        LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
??zclProcessInWriteUndividedCmd_17:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        MOV       R2,A
        MOV       A,R2
        JNZ       $+5
        LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
        MOV       A,R6
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V0
        ADD       A,R0
        MOV       R0,A
        MOV       A,?V1
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_351:
        INC       R6
        ; Setup parameters for call to function zclRevertWriteUndividedCmd
        MOV       A,R7
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 4799     } // for loop
// 4800 
// 4801     writeRspCmd->numAttr = j;
??zclProcessInWriteUndividedCmd_15:
        MOV       A,R6
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
// 4802     if ( writeRspCmd->numAttr  == 0 )
        JNZ       ??zclProcessInWriteUndividedCmd_18
// 4803     {
// 4804       // Since all records were written successful, include a single status record
// 4805       // in the resonse command with the status field set to SUCCESS and the
// 4806       // attribute ID field omitted.
// 4807       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
        INC       DPTR
        CLR       A
        LCALL     ??Subroutine119_0 & 0xFFFF
// 4808       writeRspCmd->numAttr = 1;
// 4809     }
??CrossCallReturnLabel_209:
        INC       A
        MOVX      @DPTR,A
// 4810 
// 4811     zcl_mem_free( curWriteRec );
??zclProcessInWriteUndividedCmd_18:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V14
        MOV       R3,?V15
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 4812   }
// 4813 
// 4814   zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4815                     pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4816                     true, pInMsg->hdr.transSeqNum );
??zclProcessInWriteUndividedCmd_7:
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_287:
        ; Setup parameters for call to function zcl_SendWriteRsp
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_260:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 4817   zcl_mem_free( writeRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 4818 
// 4819   return TRUE;
        MOV       R1,#0x1
??zclProcessInWriteUndividedCmd_9:
        MOV       A,#0xc
        LJMP      ?Subroutine5 & 0xFFFF
// 4820 }
          CFI EndBlock cfiBlock677

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine90:
          CFI Block cfiCond678 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_152
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond679 Using cfiCommon0
          CFI (cfiCond679) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond679) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond679) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond679) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond679) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond679) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond679) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond679) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond679) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond679) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond679) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond679) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond679) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond679) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond679) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond679) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond679) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond679) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond679) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond679) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond679) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond679) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond679) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond679) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond679) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond679) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond679) CFA_SP SP+-2
          CFI (cfiCond679) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker680 Using cfiCommon1
          CFI (cfiPicker680) NoFunction
          CFI (cfiPicker680) Picker
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond678
          CFI EndBlock cfiCond679
          CFI EndBlock cfiPicker680

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine83:
          CFI Block cfiCond681 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond682 Using cfiCommon0
          CFI (cfiCond682) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond682) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond682) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond682) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond682) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond682) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond682) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond682) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond682) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond682) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond682) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond682) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond682) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond682) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond682) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond682) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond682) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond682) CFA_SP SP+-2
          CFI (cfiCond682) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond683 Using cfiCommon0
          CFI (cfiCond683) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond683) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond683) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond683) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond683) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond683) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond683) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond683) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond683) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond683) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond683) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond683) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond683) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond683) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond683) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond683) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond683) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond683) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond683) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond683) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond683) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond683) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond683) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond683) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond683) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond683) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond683) CFA_SP SP+-2
          CFI (cfiCond683) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker684 Using cfiCommon1
          CFI (cfiPicker684) NoFunction
          CFI (cfiPicker684) Picker
        MOV       A,R0
        LCALL     ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_175:
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond681
          CFI EndBlock cfiCond682
          CFI EndBlock cfiCond683
          CFI EndBlock cfiPicker684

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine82:
          CFI Block cfiCond685 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond686 Using cfiCommon0
          CFI (cfiCond686) Function zclProcessInWriteCmd
          CFI (cfiCond686) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond686) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond686) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond686) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond686) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond686) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond686) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond686) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond686) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond686) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond686) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond686) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond686) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond686) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond686) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond686) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond686) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond686) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond686) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond686) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond686) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond686) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond686) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond686) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond686) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond686) CFA_SP SP+-2
          CFI (cfiCond686) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond687 Using cfiCommon0
          CFI (cfiCond687) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond687) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond687) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond687) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond687) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond687) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond687) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond687) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond687) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond687) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond687) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond687) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond687) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond687) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond687) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond687) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond687) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond687) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond687) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond687) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond687) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond687) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond687) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond687) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond687) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond687) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond687) CFA_SP SP+-2
          CFI (cfiCond687) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker688 Using cfiCommon1
          CFI (cfiPicker688) NoFunction
          CFI (cfiPicker688) Picker
        MOV       A,?V6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V7
        MOV       R3,A
        LCALL     ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_339:
        RET
          CFI EndBlock cfiCond685
          CFI EndBlock cfiCond686
          CFI EndBlock cfiCond687
          CFI EndBlock cfiPicker688

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine75:
          CFI Block cfiCond689 Using cfiCommon0
          CFI Function zcl_event_loop
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond690 Using cfiCommon0
          CFI (cfiCond690) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond690) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond690) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond690) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond690) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond690) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond690) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond690) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond690) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond690) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond690) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond690) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond690) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond690) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond690) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond690) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond690) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond690) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond690) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond690) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond690) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond690) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond690) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond690) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond690) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond690) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond690) CFA_SP SP+-2
          CFI (cfiCond690) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker691 Using cfiCommon1
          CFI (cfiPicker691) NoFunction
          CFI (cfiPicker691) Picker
        LCALL     ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_163:
        RET
          CFI EndBlock cfiCond689
          CFI EndBlock cfiCond690
          CFI EndBlock cfiPicker691

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine99:
          CFI Block cfiCond692 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond693 Using cfiCommon0
          CFI (cfiCond693) Function zcl_ProcessMessageMSG
          CFI (cfiCond693) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_39
          CFI (cfiCond693) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond693) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond693) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond693) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond693) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond693) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond693) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond693) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond693) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond693) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond693) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond693) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond693) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond693) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond693) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond693) CFA_SP SP+-4
          CFI (cfiCond693) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond694 Using cfiCommon0
          CFI (cfiCond694) Function zcl_ProcessMessageMSG
          CFI (cfiCond694) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_232
          CFI (cfiCond694) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond694) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond694) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond694) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond694) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond694) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond694) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond694) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond694) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond694) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond694) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond694) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond694) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond694) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond694) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond694) CFA_SP SP+-4
          CFI (cfiCond694) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond695 Using cfiCommon0
          CFI (cfiCond695) Function zcl_ProcessMessageMSG
          CFI (cfiCond695) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_233
          CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond695) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond695) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond695) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond695) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond695) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond695) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond695) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond695) CFA_SP SP+-4
          CFI (cfiCond695) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond696 Using cfiCommon0
          CFI (cfiCond696) Function zcl_event_loop
          CFI (cfiCond696) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
          CFI (cfiCond696) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond696) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond696) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond696) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond696) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond696) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond696) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond696) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond696) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond696) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond696) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond696) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond696) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond696) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond696) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond696) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond696) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond696) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond696) CFA_SP SP+-4
          CFI (cfiCond696) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond697 Using cfiCommon0
          CFI (cfiCond697) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond697) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
          CFI (cfiCond697) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond697) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond697) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond697) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond697) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond697) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond697) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond697) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond697) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond697) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond697) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond697) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond697) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond697) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond697) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond697) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond697) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond697) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond697) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond697) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond697) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond697) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond697) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond697) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond697) CFA_SP SP+-4
          CFI (cfiCond697) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond698 Using cfiCommon0
          CFI (cfiCond698) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond698) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_59
          CFI (cfiCond698) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond698) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond698) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond698) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond698) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond698) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond698) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond698) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond698) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond698) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond698) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond698) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond698) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond698) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond698) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond698) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond698) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond698) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond698) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond698) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond698) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond698) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond698) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond698) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond698) CFA_SP SP+-4
          CFI (cfiCond698) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond699 Using cfiCommon0
          CFI (cfiCond699) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond699) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_60
          CFI (cfiCond699) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond699) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond699) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond699) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond699) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond699) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond699) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond699) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond699) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond699) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond699) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond699) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond699) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond699) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond699) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond699) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond699) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond699) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond699) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond699) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond699) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond699) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond699) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond699) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond699) CFA_SP SP+-4
          CFI (cfiCond699) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker700 Using cfiCommon1
          CFI (cfiPicker700) NoFunction
          CFI (cfiPicker700) Picker
        LCALL     ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_308:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond692
          CFI EndBlock cfiCond693
          CFI EndBlock cfiCond694
          CFI EndBlock cfiCond695
          CFI EndBlock cfiCond696
          CFI EndBlock cfiCond697
          CFI EndBlock cfiCond698
          CFI EndBlock cfiCond699
          CFI EndBlock cfiPicker700

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine74:
          CFI Block cfiCond701 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_325
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond702 Using cfiCommon0
          CFI (cfiCond702) Function zclProcessInWriteCmd
          CFI (cfiCond702) Conditional ??CrossCallReturnLabel_326
          CFI (cfiCond702) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond702) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond702) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond702) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond702) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond702) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond702) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond702) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond702) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond702) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond702) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond702) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond702) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond702) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond702) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond702) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond702) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond702) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond702) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond702) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond702) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond702) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond702) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond702) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond702) CFA_SP SP+-2
          CFI (cfiCond702) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker703 Using cfiCommon1
          CFI (cfiPicker703) NoFunction
          CFI (cfiPicker703) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
          CFI EndBlock cfiCond701
          CFI EndBlock cfiCond702
          CFI EndBlock cfiPicker703
        REQUIRE ??Subroutine138_0
        ; // Fall through to label ??Subroutine138_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine138_0:
          CFI Block cfiCond704 Using cfiCommon0
          CFI Function zcl_ReadAttrData
          CFI Conditional ??CrossCallReturnLabel_321
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond705 Using cfiCommon0
          CFI (cfiCond705) Function zclReadAttrDataUsingCB
          CFI (cfiCond705) Conditional ??CrossCallReturnLabel_322
          CFI (cfiCond705) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond705) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond705) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond705) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond705) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond705) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond705) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond705) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond705) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond705) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond705) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond705) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond705) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond705) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond705) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond705) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond705) CFA_SP SP+-2
          CFI (cfiCond705) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond706 Using cfiCommon0
          CFI (cfiCond706) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond706) Conditional ??CrossCallReturnLabel_323
          CFI (cfiCond706) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond706) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond706) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond706) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond706) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond706) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond706) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond706) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond706) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond706) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond706) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond706) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond706) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond706) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond706) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond706) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond706) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond706) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond706) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond706) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond706) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond706) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond706) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond706) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond706) CFA_SP SP+-2
          CFI (cfiCond706) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond707 Using cfiCommon0
          CFI (cfiCond707) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond707) Conditional ??CrossCallReturnLabel_324
          CFI (cfiCond707) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond707) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond707) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond707) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond707) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond707) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond707) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond707) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond707) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond707) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond707) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond707) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond707) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond707) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond707) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond707) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond707) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond707) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond707) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond707) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond707) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond707) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond707) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond707) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond707) CFA_SP SP+-2
          CFI (cfiCond707) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond708 Using cfiCommon0
          CFI (cfiCond708) Function zclProcessInWriteCmd
          CFI (cfiCond708) Conditional ??CrossCallReturnLabel_325
          CFI (cfiCond708) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond708) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond708) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond708) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond708) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond708) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond708) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond708) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond708) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond708) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond708) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond708) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond708) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond708) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond708) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond708) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond708) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond708) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond708) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond708) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond708) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond708) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond708) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond708) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond708) CFA_SP SP+-2
          CFI (cfiCond708) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond709 Using cfiCommon0
          CFI (cfiCond709) Function zclProcessInWriteCmd
          CFI (cfiCond709) Conditional ??CrossCallReturnLabel_326
          CFI (cfiCond709) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond709) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond709) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond709) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond709) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond709) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond709) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond709) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond709) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond709) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond709) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond709) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond709) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond709) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond709) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond709) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond709) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond709) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond709) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond709) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond709) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond709) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond709) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond709) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond709) CFA_SP SP+-2
          CFI (cfiCond709) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker710 Using cfiCommon1
          CFI (cfiPicker710) NoFunction
          CFI (cfiPicker710) Picker
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        RET
          CFI EndBlock cfiCond704
          CFI EndBlock cfiCond705
          CFI EndBlock cfiCond706
          CFI EndBlock cfiCond707
          CFI EndBlock cfiCond708
          CFI EndBlock cfiCond709
          CFI EndBlock cfiPicker710

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine73:
          CFI Block cfiCond711 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_118
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond712 Using cfiCommon0
          CFI (cfiCond712) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond712) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond712) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond712) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond712) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond712) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond712) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond712) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond712) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond712) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond712) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond712) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond712) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond712) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond712) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond712) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond712) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond712) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond712) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond712) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond712) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond712) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond712) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond712) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond712) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond712) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond712) CFA_SP SP+-2
          CFI (cfiCond712) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker713 Using cfiCommon1
          CFI (cfiPicker713) NoFunction
          CFI (cfiPicker713) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        ; Setup parameters for call to function zclFindAttrRec
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond711
          CFI EndBlock cfiCond712
          CFI EndBlock cfiPicker713

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond714 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond715 Using cfiCommon0
          CFI (cfiCond715) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond715) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond715) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond715) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond715) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond715) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond715) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond715) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond715) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond715) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond715) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond715) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond715) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond715) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond715) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond715) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond715) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond715) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond715) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond715) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond715) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond715) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond715) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond715) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond715) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond715) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond715) CFA_SP SP+-2
          CFI (cfiCond715) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker716 Using cfiCommon1
          CFI (cfiPicker716) NoFunction
          CFI (cfiPicker716) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine96 & 0xFFFF
??CrossCallReturnLabel_329:
        RET
          CFI EndBlock cfiCond714
          CFI EndBlock cfiCond715
          CFI EndBlock cfiPicker716

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine96:
          CFI Block cfiCond717 Using cfiCommon0
          CFI Function zclParseInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond718 Using cfiCommon0
          CFI (cfiCond718) Function zclParseInWriteRspCmd
          CFI (cfiCond718) Conditional ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_44
          CFI (cfiCond718) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond718) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond718) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond718) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond718) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond718) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond718) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond718) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond718) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond718) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond718) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond718) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond718) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond718) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond718) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond718) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond718) CFA_SP SP+-4
          CFI (cfiCond718) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond719 Using cfiCommon0
          CFI (cfiCond719) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond719) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_73
          CFI (cfiCond719) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond719) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond719) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond719) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond719) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond719) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond719) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond719) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond719) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond719) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond719) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond719) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond719) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond719) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond719) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond719) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond719) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond719) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond719) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond719) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond719) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond719) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond719) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond719) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond719) CFA_SP SP+-4
          CFI (cfiCond719) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond720 Using cfiCommon0
          CFI (cfiCond720) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond720) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_74
          CFI (cfiCond720) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond720) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond720) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond720) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond720) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond720) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond720) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond720) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond720) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond720) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond720) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond720) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond720) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond720) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond720) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond720) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond720) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond720) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond720) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond720) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond720) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond720) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond720) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond720) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond720) CFA_SP SP+-4
          CFI (cfiCond720) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker721 Using cfiCommon1
          CFI (cfiPicker721) NoFunction
          CFI (cfiPicker721) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
          CFI EndBlock cfiCond717
          CFI EndBlock cfiCond718
          CFI EndBlock cfiCond719
          CFI EndBlock cfiCond720
          CFI EndBlock cfiPicker721
        REQUIRE ??Subroutine139_0
        ; // Fall through to label ??Subroutine139_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine139_0:
          CFI Block cfiCond722 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_327
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond723 Using cfiCommon0
          CFI (cfiCond723) Function zclParseInWriteCmd
          CFI (cfiCond723) Conditional ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_43
          CFI (cfiCond723) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond723) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond723) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond723) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond723) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond723) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond723) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond723) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond723) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond723) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond723) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond723) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond723) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond723) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond723) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond723) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond723) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond723) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond723) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond723) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond723) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond723) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond723) CFA_SP SP+-4
          CFI (cfiCond723) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond724 Using cfiCommon0
          CFI (cfiCond724) Function zclParseInWriteRspCmd
          CFI (cfiCond724) Conditional ??CrossCallReturnLabel_328, ??CrossCallReturnLabel_44
          CFI (cfiCond724) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond724) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond724) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond724) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond724) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond724) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond724) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond724) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond724) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond724) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond724) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond724) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond724) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond724) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond724) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond724) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond724) CFA_SP SP+-4
          CFI (cfiCond724) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond725 Using cfiCommon0
          CFI (cfiCond725) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond725) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_73
          CFI (cfiCond725) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond725) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond725) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond725) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond725) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond725) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond725) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond725) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond725) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond725) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond725) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond725) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond725) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond725) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond725) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond725) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond725) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond725) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond725) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond725) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond725) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond725) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond725) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond725) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond725) CFA_SP SP+-4
          CFI (cfiCond725) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond726 Using cfiCommon0
          CFI (cfiCond726) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond726) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_74
          CFI (cfiCond726) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond726) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond726) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond726) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond726) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond726) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond726) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond726) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond726) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond726) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond726) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond726) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond726) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond726) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond726) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond726) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond726) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond726) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond726) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond726) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond726) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond726) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond726) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond726) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond726) CFA_SP SP+-4
          CFI (cfiCond726) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker727 Using cfiCommon1
          CFI (cfiPicker727) NoFunction
          CFI (cfiPicker727) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
        ; Setup parameters for call to function zclWriteAttrDataUsingCB
        MOV       DPL,?V2
        MOV       DPH,?V3
        RET
          CFI EndBlock cfiCond722
          CFI EndBlock cfiCond723
          CFI EndBlock cfiCond724
          CFI EndBlock cfiCond725
          CFI EndBlock cfiCond726
          CFI EndBlock cfiPicker727

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond728 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond729 Using cfiCommon0
          CFI (cfiCond729) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond729) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond729) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond729) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond729) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond729) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond729) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond729) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond729) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond729) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond729) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond729) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond729) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond729) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond729) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond729) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond729) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond729) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond729) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond729) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond729) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond729) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond729) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond729) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond729) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond729) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond729) CFA_SP SP+-2
          CFI (cfiCond729) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker730 Using cfiCommon1
          CFI (cfiPicker730) NoFunction
          CFI (cfiPicker730) Picker
        MOVX      A,@DPTR
        MOV       B,#0x3
        MUL       AB
        MOV       R1,B
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        RET
          CFI EndBlock cfiCond728
          CFI EndBlock cfiCond729
          CFI EndBlock cfiPicker730

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond731 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond732 Using cfiCommon0
          CFI (cfiCond732) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond732) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond732) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond732) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond732) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond732) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond732) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond732) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond732) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond732) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond732) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond732) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond732) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond732) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond732) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond732) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond732) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond732) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond732) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond732) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond732) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond732) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond732) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond732) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond732) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond732) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond732) CFA_SP SP+-2
          CFI (cfiCond732) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker733 Using cfiCommon1
          CFI (cfiPicker733) NoFunction
          CFI (cfiPicker733) Picker
        LCALL     ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_162:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R7
        CLR       C
        SUBB      A,R0
        RET
          CFI EndBlock cfiCond731
          CFI EndBlock cfiCond732
          CFI EndBlock cfiPicker733

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond734 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond735 Using cfiCommon0
          CFI (cfiCond735) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond735) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond735) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond735) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond735) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond735) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond735) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond735) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond735) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond735) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond735) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond735) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond735) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond735) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond735) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond735) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond735) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond735) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond735) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond735) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond735) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond735) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond735) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond735) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond735) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond735) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond735) CFA_SP SP+-2
          CFI (cfiCond735) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker736 Using cfiCommon1
          CFI (cfiPicker736) NoFunction
          CFI (cfiPicker736) Picker
        LCALL     ?Subroutine101 & 0xFFFF
??CrossCallReturnLabel_167:
        MOV       ?V2,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond734
          CFI EndBlock cfiCond735
          CFI EndBlock cfiPicker736

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond737 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond738 Using cfiCommon0
          CFI (cfiCond738) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond738) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond738) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond738) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond738) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond738) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond738) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond738) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond738) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond738) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond738) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond738) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond738) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond738) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond738) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond738) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond738) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond738) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond738) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond738) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond738) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond738) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond738) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond738) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond738) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond738) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond738) CFA_SP SP+-2
          CFI (cfiCond738) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker739 Using cfiCommon1
          CFI (cfiPicker739) NoFunction
          CFI (cfiPicker739) Picker
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        RET
          CFI EndBlock cfiCond737
          CFI EndBlock cfiCond738
          CFI EndBlock cfiPicker739

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond740 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond741 Using cfiCommon0
          CFI (cfiCond741) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond741) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond741) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond741) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond741) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond741) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond741) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond741) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond741) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond741) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond741) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond741) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond741) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond741) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond741) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond741) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond741) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond741) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond741) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond741) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond741) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond741) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond741) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond741) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond741) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond741) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond741) CFA_SP SP+-2
          CFI (cfiCond741) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker742 Using cfiCommon1
          CFI (cfiPicker742) NoFunction
          CFI (cfiPicker742) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine98 & 0xFFFF
??CrossCallReturnLabel_342:
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       A,R6
        LCALL     ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_173:
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond740
          CFI EndBlock cfiCond741
          CFI EndBlock cfiPicker742

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond743 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_331
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond744 Using cfiCommon0
          CFI (cfiCond744) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond744) Conditional ??CrossCallReturnLabel_332
          CFI (cfiCond744) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond744) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond744) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond744) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond744) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond744) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond744) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond744) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond744) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond744) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond744) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond744) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond744) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond744) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond744) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond744) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond744) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond744) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond744) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond744) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond744) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond744) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond744) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond744) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond744) CFA_SP SP+-2
          CFI (cfiCond744) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond745 Using cfiCommon0
          CFI (cfiCond745) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond745) Conditional ??CrossCallReturnLabel_333
          CFI (cfiCond745) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond745) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond745) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond745) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond745) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond745) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond745) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond745) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond745) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond745) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond745) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond745) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond745) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond745) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond745) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond745) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond745) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond745) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond745) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond745) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond745) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond745) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond745) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond745) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond745) CFA_SP SP+-2
          CFI (cfiCond745) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker746 Using cfiCommon1
          CFI (cfiPicker746) NoFunction
          CFI (cfiPicker746) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
          CFI EndBlock cfiCond743
          CFI EndBlock cfiCond744
          CFI EndBlock cfiCond745
          CFI EndBlock cfiPicker746
        REQUIRE ??Subroutine140_0
        ; // Fall through to label ??Subroutine140_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine140_0:
          CFI Block cfiCond747 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_330
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond748 Using cfiCommon0
          CFI (cfiCond748) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond748) Conditional ??CrossCallReturnLabel_331
          CFI (cfiCond748) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond748) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond748) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond748) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond748) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond748) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond748) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond748) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond748) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond748) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond748) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond748) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond748) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond748) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond748) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond748) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond748) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond748) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond748) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond748) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond748) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond748) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond748) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond748) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond748) CFA_SP SP+-2
          CFI (cfiCond748) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond749 Using cfiCommon0
          CFI (cfiCond749) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond749) Conditional ??CrossCallReturnLabel_332
          CFI (cfiCond749) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond749) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond749) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond749) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond749) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond749) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond749) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond749) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond749) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond749) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond749) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond749) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond749) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond749) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond749) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond749) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond749) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond749) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond749) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond749) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond749) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond749) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond749) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond749) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond749) CFA_SP SP+-2
          CFI (cfiCond749) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond750 Using cfiCommon0
          CFI (cfiCond750) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond750) Conditional ??CrossCallReturnLabel_333
          CFI (cfiCond750) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond750) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond750) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond750) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond750) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond750) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond750) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond750) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond750) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond750) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond750) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond750) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond750) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond750) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond750) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond750) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond750) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond750) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond750) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond750) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond750) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond750) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond750) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond750) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond750) CFA_SP SP+-2
          CFI (cfiCond750) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker751 Using cfiCommon1
          CFI (cfiPicker751) NoFunction
          CFI (cfiPicker751) Picker
        LCALL     ??Subroutine141_0 & 0xFFFF
??CrossCallReturnLabel_345:
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_338:
        LCALL     ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_340:
        RET
          CFI EndBlock cfiCond747
          CFI EndBlock cfiCond748
          CFI EndBlock cfiCond749
          CFI EndBlock cfiCond750
          CFI EndBlock cfiPicker751

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine107:
          CFI Block cfiCond752 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond753 Using cfiCommon0
          CFI (cfiCond753) Function zclProcessInWriteCmd
          CFI (cfiCond753) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_133
          CFI (cfiCond753) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond753) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond753) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond753) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond753) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond753) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond753) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond753) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond753) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond753) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond753) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond753) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond753) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond753) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond753) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond753) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond753) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond753) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond753) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond753) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond753) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond753) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond753) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond753) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond753) CFA_SP SP+-4
          CFI (cfiCond753) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond754 Using cfiCommon0
          CFI (cfiCond754) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond754) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_134
          CFI (cfiCond754) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond754) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond754) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond754) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond754) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond754) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond754) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond754) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond754) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond754) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond754) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond754) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond754) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond754) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond754) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond754) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond754) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond754) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond754) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond754) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond754) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond754) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond754) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond754) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond754) CFA_SP SP+-4
          CFI (cfiCond754) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond755 Using cfiCommon0
          CFI (cfiCond755) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond755) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_331
          CFI (cfiCond755) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond755) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond755) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond755) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond755) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond755) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond755) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond755) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond755) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond755) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond755) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond755) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond755) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond755) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond755) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond755) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond755) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond755) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond755) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond755) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond755) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond755) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond755) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond755) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond755) CFA_SP SP+-4
          CFI (cfiCond755) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond756 Using cfiCommon0
          CFI (cfiCond756) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond756) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_332
          CFI (cfiCond756) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond756) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond756) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond756) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond756) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond756) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond756) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond756) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond756) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond756) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond756) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond756) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond756) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond756) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond756) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond756) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond756) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond756) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond756) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond756) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond756) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond756) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond756) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond756) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond756) CFA_SP SP+-4
          CFI (cfiCond756) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond757 Using cfiCommon0
          CFI (cfiCond757) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond757) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_333
          CFI (cfiCond757) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond757) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond757) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond757) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond757) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond757) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond757) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond757) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond757) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond757) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond757) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond757) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond757) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond757) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond757) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond757) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond757) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond757) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond757) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond757) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond757) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond757) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond757) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond757) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond757) CFA_SP SP+-4
          CFI (cfiCond757) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond758 Using cfiCommon0
          CFI (cfiCond758) Function zclProcessInWriteCmd
          CFI (cfiCond758) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_330
          CFI (cfiCond758) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond758) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond758) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond758) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond758) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond758) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond758) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond758) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond758) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond758) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond758) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond758) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond758) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond758) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond758) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond758) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond758) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond758) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond758) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond758) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond758) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond758) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond758) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond758) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond758) CFA_SP SP+-4
          CFI (cfiCond758) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker759 Using cfiCommon1
          CFI (cfiPicker759) NoFunction
          CFI (cfiPicker759) Picker
        MOV       A,?V6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond752
          CFI EndBlock cfiCond753
          CFI EndBlock cfiCond754
          CFI EndBlock cfiCond755
          CFI EndBlock cfiCond756
          CFI EndBlock cfiCond757
          CFI EndBlock cfiCond758
          CFI EndBlock cfiPicker759

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine98:
          CFI Block cfiCond760 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond761 Using cfiCommon0
          CFI (cfiCond761) Function zcl_ProcessMessageMSG
          CFI (cfiCond761) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_39
          CFI (cfiCond761) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond761) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond761) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond761) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond761) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond761) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond761) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond761) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond761) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond761) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond761) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond761) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond761) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond761) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond761) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond761) CFA_SP SP+-4
          CFI (cfiCond761) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond762 Using cfiCommon0
          CFI (cfiCond762) Function zclProcessInWriteCmd
          CFI (cfiCond762) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_30
          CFI (cfiCond762) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond762) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond762) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond762) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond762) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond762) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond762) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond762) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond762) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond762) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond762) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond762) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond762) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond762) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond762) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond762) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond762) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond762) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond762) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond762) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond762) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond762) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond762) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond762) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond762) CFA_SP SP+-4
          CFI (cfiCond762) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond763 Using cfiCommon0
          CFI (cfiCond763) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond763) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_31
          CFI (cfiCond763) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond763) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond763) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond763) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond763) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond763) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond763) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond763) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond763) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond763) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond763) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond763) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond763) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond763) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond763) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond763) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond763) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond763) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond763) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond763) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond763) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond763) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond763) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond763) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond763) CFA_SP SP+-4
          CFI (cfiCond763) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker764 Using cfiCommon1
          CFI (cfiPicker764) NoFunction
          CFI (cfiPicker764) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond760
          CFI EndBlock cfiCond761
          CFI EndBlock cfiCond762
          CFI EndBlock cfiCond763
          CFI EndBlock cfiPicker764
        REQUIRE ??Subroutine141_0
        ; // Fall through to label ??Subroutine141_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine141_0:
          CFI Block cfiCond765 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond766 Using cfiCommon0
          CFI (cfiCond766) Function zcl_SendReadRsp
          CFI (cfiCond766) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_81
          CFI (cfiCond766) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond766) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond766) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond766) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond766) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond766) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond766) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond766) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond766) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond766) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond766) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond766) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond766) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond766) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond766) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond766) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond766) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond766) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond766) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond766) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond766) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond766) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond766) CFA_SP SP+-4
          CFI (cfiCond766) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond767 Using cfiCommon0
          CFI (cfiCond767) Function zcl_HandleExternal
          CFI (cfiCond767) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_318
          CFI (cfiCond767) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond767) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond767) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond767) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond767) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond767) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond767) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond767) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond767) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond767) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond767) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond767) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond767) CFA_SP SP+-4
          CFI (cfiCond767) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond768 Using cfiCommon0
          CFI (cfiCond768) Function zcl_SendReadRsp
          CFI (cfiCond768) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_319
          CFI (cfiCond768) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond768) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond768) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond768) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond768) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond768) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond768) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond768) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond768) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond768) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond768) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond768) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond768) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond768) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond768) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond768) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond768) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond768) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond768) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond768) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond768) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond768) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond768) CFA_SP SP+-4
          CFI (cfiCond768) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond769 Using cfiCommon0
          CFI (cfiCond769) Function zclProcessInReadCmd
          CFI (cfiCond769) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_320
          CFI (cfiCond769) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond769) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond769) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond769) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond769) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond769) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond769) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond769) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond769) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond769) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond769) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond769) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond769) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond769) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond769) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond769) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond769) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond769) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond769) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond769) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond769) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond769) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond769) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond769) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond769) CFA_SP SP+-4
          CFI (cfiCond769) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond770 Using cfiCommon0
          CFI (cfiCond770) Function zclWriteAttrDataUsingCB
          CFI (cfiCond770) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_317
          CFI (cfiCond770) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond770) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond770) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond770) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond770) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond770) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond770) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond770) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond770) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond770) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond770) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond770) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond770) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond770) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond770) CFA_SP SP+-4
          CFI (cfiCond770) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond771 Using cfiCommon0
          CFI (cfiCond771) Function zcl_HandleExternal
          CFI (cfiCond771) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_311
          CFI (cfiCond771) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond771) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond771) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond771) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond771) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond771) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond771) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond771) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond771) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond771) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond771) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond771) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond771) CFA_SP SP+-4
          CFI (cfiCond771) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond772 Using cfiCommon0
          CFI (cfiCond772) Function zcl_ProcessMessageMSG
          CFI (cfiCond772) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_312
          CFI (cfiCond772) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond772) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond772) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond772) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond772) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond772) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond772) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond772) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond772) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond772) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond772) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond772) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond772) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond772) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond772) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond772) CFA_SP SP+-4
          CFI (cfiCond772) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond773 Using cfiCommon0
          CFI (cfiCond773) Function zclFindAttrRec
          CFI (cfiCond773) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_313
          CFI (cfiCond773) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond773) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond773) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond773) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond773) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond773) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond773) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond773) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond773) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond773) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond773) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond773) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond773) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond773) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond773) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond773) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond773) CFA_SP SP+-4
          CFI (cfiCond773) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond774 Using cfiCommon0
          CFI (cfiCond774) Function zclProcessInReadCmd
          CFI (cfiCond774) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_314
          CFI (cfiCond774) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond774) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond774) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond774) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond774) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond774) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond774) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond774) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond774) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond774) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond774) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond774) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond774) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond774) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond774) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond774) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond774) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond774) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond774) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond774) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond774) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond774) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond774) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond774) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond774) CFA_SP SP+-4
          CFI (cfiCond774) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond775 Using cfiCommon0
          CFI (cfiCond775) Function zclRevertWriteUndividedCmd
          CFI (cfiCond775) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_315
          CFI (cfiCond775) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond775) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond775) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond775) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond775) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond775) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond775) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond775) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond775) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond775) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond775) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond775) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond775) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond775) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond775) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond775) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond775) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond775) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond775) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond775) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond775) CFA_SP SP+-4
          CFI (cfiCond775) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond776 Using cfiCommon0
          CFI (cfiCond776) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond776) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_316
          CFI (cfiCond776) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond776) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond776) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond776) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond776) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond776) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond776) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond776) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond776) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond776) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond776) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond776) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond776) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond776) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond776) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond776) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond776) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond776) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond776) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond776) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond776) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond776) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond776) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond776) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond776) CFA_SP SP+-4
          CFI (cfiCond776) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond777 Using cfiCommon0
          CFI (cfiCond777) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond777) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_331
          CFI (cfiCond777) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond777) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond777) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond777) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond777) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond777) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond777) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond777) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond777) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond777) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond777) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond777) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond777) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond777) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond777) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond777) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond777) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond777) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond777) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond777) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond777) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond777) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond777) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond777) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond777) CFA_SP SP+-4
          CFI (cfiCond777) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond778 Using cfiCommon0
          CFI (cfiCond778) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond778) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_332
          CFI (cfiCond778) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond778) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond778) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond778) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond778) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond778) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond778) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond778) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond778) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond778) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond778) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond778) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond778) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond778) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond778) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond778) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond778) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond778) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond778) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond778) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond778) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond778) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond778) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond778) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond778) CFA_SP SP+-4
          CFI (cfiCond778) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond779 Using cfiCommon0
          CFI (cfiCond779) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond779) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_333
          CFI (cfiCond779) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond779) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond779) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond779) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond779) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond779) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond779) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond779) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond779) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond779) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond779) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond779) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond779) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond779) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond779) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond779) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond779) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond779) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond779) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond779) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond779) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond779) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond779) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond779) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond779) CFA_SP SP+-4
          CFI (cfiCond779) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond780 Using cfiCommon0
          CFI (cfiCond780) Function zclProcessInWriteCmd
          CFI (cfiCond780) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_330
          CFI (cfiCond780) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond780) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond780) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond780) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond780) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond780) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond780) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond780) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond780) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond780) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond780) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond780) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond780) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond780) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond780) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond780) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond780) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond780) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond780) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond780) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond780) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond780) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond780) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond780) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond780) CFA_SP SP+-4
          CFI (cfiCond780) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond781 Using cfiCommon0
          CFI (cfiCond781) Function zcl_ProcessMessageMSG
          CFI (cfiCond781) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_38
          CFI (cfiCond781) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond781) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond781) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond781) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond781) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond781) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond781) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond781) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond781) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond781) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond781) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond781) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond781) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond781) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond781) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond781) CFA_SP SP+-4
          CFI (cfiCond781) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond782 Using cfiCommon0
          CFI (cfiCond782) Function zcl_ProcessMessageMSG
          CFI (cfiCond782) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_39
          CFI (cfiCond782) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond782) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond782) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond782) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond782) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond782) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond782) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond782) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond782) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond782) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond782) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond782) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond782) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond782) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond782) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond782) CFA_SP SP+-4
          CFI (cfiCond782) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond783 Using cfiCommon0
          CFI (cfiCond783) Function zclProcessInWriteCmd
          CFI (cfiCond783) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_30
          CFI (cfiCond783) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond783) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond783) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond783) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond783) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond783) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond783) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond783) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond783) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond783) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond783) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond783) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond783) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond783) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond783) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond783) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond783) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond783) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond783) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond783) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond783) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond783) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond783) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond783) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond783) CFA_SP SP+-4
          CFI (cfiCond783) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond784 Using cfiCommon0
          CFI (cfiCond784) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond784) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_31
          CFI (cfiCond784) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond784) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond784) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond784) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond784) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond784) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond784) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond784) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond784) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond784) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond784) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond784) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond784) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond784) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond784) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond784) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond784) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond784) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond784) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond784) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond784) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond784) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond784) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond784) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond784) CFA_SP SP+-4
          CFI (cfiCond784) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker785 Using cfiCommon1
          CFI (cfiPicker785) NoFunction
          CFI (cfiPicker785) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond765
          CFI EndBlock cfiCond766
          CFI EndBlock cfiCond767
          CFI EndBlock cfiCond768
          CFI EndBlock cfiCond769
          CFI EndBlock cfiCond770
          CFI EndBlock cfiCond771
          CFI EndBlock cfiCond772
          CFI EndBlock cfiCond773
          CFI EndBlock cfiCond774
          CFI EndBlock cfiCond775
          CFI EndBlock cfiCond776
          CFI EndBlock cfiCond777
          CFI EndBlock cfiCond778
          CFI EndBlock cfiCond779
          CFI EndBlock cfiCond780
          CFI EndBlock cfiCond781
          CFI EndBlock cfiCond782
          CFI EndBlock cfiCond783
          CFI EndBlock cfiCond784
          CFI EndBlock cfiPicker785

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond786 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond787 Using cfiCommon0
          CFI (cfiCond787) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond787) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond787) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond787) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond787) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond787) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond787) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond787) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond787) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond787) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond787) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond787) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond787) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond787) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond787) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond787) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond787) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond787) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond787) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond787) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond787) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond787) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond787) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond787) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond787) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond787) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond787) CFA_SP SP+-2
          CFI (cfiCond787) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker788 Using cfiCommon1
          CFI (cfiPicker788) NoFunction
          CFI (cfiPicker788) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond786
          CFI EndBlock cfiCond787
          CFI EndBlock cfiPicker788

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond789 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_350
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond790 Using cfiCommon0
          CFI (cfiCond790) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond790) Conditional ??CrossCallReturnLabel_351
          CFI (cfiCond790) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond790) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond790) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond790) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond790) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond790) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond790) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond790) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond790) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond790) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond790) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond790) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond790) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond790) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond790) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond790) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond790) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond790) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond790) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond790) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond790) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond790) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond790) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond790) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond790) CFA_SP SP+-2
          CFI (cfiCond790) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker791 Using cfiCommon1
          CFI (cfiPicker791) NoFunction
          CFI (cfiPicker791) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond789
          CFI EndBlock cfiCond790
          CFI EndBlock cfiPicker791
        REQUIRE ??Subroutine142_0
        ; // Fall through to label ??Subroutine142_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine142_0:
          CFI Block cfiCond792 Using cfiCommon0
          CFI Function zcl_registerValidateAttrData
          CFI Conditional ??CrossCallReturnLabel_346
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond793 Using cfiCommon0
          CFI (cfiCond793) Function zcl_ProcessMessageMSG
          CFI (cfiCond793) Conditional ??CrossCallReturnLabel_347
          CFI (cfiCond793) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond793) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond793) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond793) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond793) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond793) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond793) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond793) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond793) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond793) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond793) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond793) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond793) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond793) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond793) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond793) CFA_SP SP+-2
          CFI (cfiCond793) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond794 Using cfiCommon0
          CFI (cfiCond794) Function zcl_ProcessMessageMSG
          CFI (cfiCond794) Conditional ??CrossCallReturnLabel_348
          CFI (cfiCond794) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond794) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond794) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond794) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond794) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond794) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond794) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond794) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond794) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond794) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond794) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond794) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond794) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond794) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond794) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond794) CFA_SP SP+-2
          CFI (cfiCond794) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond795 Using cfiCommon0
          CFI (cfiCond795) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond795) Conditional ??CrossCallReturnLabel_349
          CFI (cfiCond795) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond795) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond795) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond795) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond795) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond795) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond795) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond795) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond795) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond795) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond795) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond795) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond795) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond795) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond795) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond795) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond795) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond795) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond795) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond795) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond795) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond795) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond795) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond795) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond795) CFA_SP SP+-2
          CFI (cfiCond795) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond796 Using cfiCommon0
          CFI (cfiCond796) Function zcl_registerPlugin
          CFI (cfiCond796) Conditional ??CrossCallReturnLabel_350
          CFI (cfiCond796) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond796) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond796) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond796) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond796) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond796) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond796) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond796) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond796) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond796) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond796) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond796) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond796) CFA_SP SP+-2
          CFI (cfiCond796) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond797 Using cfiCommon0
          CFI (cfiCond797) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond797) Conditional ??CrossCallReturnLabel_351
          CFI (cfiCond797) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond797) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond797) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond797) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond797) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond797) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond797) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond797) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond797) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond797) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond797) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond797) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond797) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond797) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond797) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond797) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond797) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond797) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond797) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond797) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond797) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond797) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond797) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond797) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond797) CFA_SP SP+-2
          CFI (cfiCond797) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker798 Using cfiCommon1
          CFI (cfiPicker798) NoFunction
          CFI (cfiPicker798) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond792
          CFI EndBlock cfiCond793
          CFI EndBlock cfiCond794
          CFI EndBlock cfiCond795
          CFI EndBlock cfiCond796
          CFI EndBlock cfiCond797
          CFI EndBlock cfiPicker798

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond799 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond800 Using cfiCommon0
          CFI (cfiCond800) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond800) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond800) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond800) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond800) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond800) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond800) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond800) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond800) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond800) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond800) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond800) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond800) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond800) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond800) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond800) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond800) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond800) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond800) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond800) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond800) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond800) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond800) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond800) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond800) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond800) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond800) CFA_SP SP+-2
          CFI (cfiCond800) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker801 Using cfiCommon1
          CFI (cfiPicker801) NoFunction
          CFI (cfiPicker801) Picker
        LCALL     ?Subroutine95 & 0xFFFF
??CrossCallReturnLabel_159:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond799
          CFI EndBlock cfiCond800
          CFI EndBlock cfiPicker801

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine95:
          CFI Block cfiCond802 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_158
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond803 Using cfiCommon0
          CFI (cfiCond803) Function zcl_SendCommand
          CFI (cfiCond803) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_12
          CFI (cfiCond803) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond803) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond803) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond803) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond803) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond803) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond803) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond803) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond803) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond803) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond803) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond803) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond803) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond803) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond803) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond803) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond803) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond803) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond803) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond803) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond803) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond803) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond803) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond803) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond803) CFA_SP SP+-4
          CFI (cfiCond803) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond804 Using cfiCommon0
          CFI (cfiCond804) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond804) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_13
          CFI (cfiCond804) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond804) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond804) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond804) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond804) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond804) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond804) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond804) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond804) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond804) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond804) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond804) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond804) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond804) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond804) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond804) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond804) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond804) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond804) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond804) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond804) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond804) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond804) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond804) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond804) CFA_SP SP+-4
          CFI (cfiCond804) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker805 Using cfiCommon1
          CFI (cfiPicker805) NoFunction
          CFI (cfiPicker805) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        RET
          CFI EndBlock cfiCond802
          CFI EndBlock cfiCond803
          CFI EndBlock cfiCond804
          CFI EndBlock cfiPicker805

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsgExt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsgExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_addExternalFoundationHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_addExternalFoundationHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getExternalFoundationHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getExternalFoundationHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_HandleExternal::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_HandleExternal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getRawAFMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getRawAFMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getParsedTransSeqNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getParsedTransSeqNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerPlugin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerPlugin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerAttrList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerAttrList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerClusterOptionList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerClusterOptionList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerValidateAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerValidateAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerReadWriteCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_DeviceOperational::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_DeviceOperational

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendCommand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendReadRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendReadRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendWriteRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendWriteRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendWriteRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendWriteRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_ProcessMessageMSG::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ProcessMessageMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclBuildHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclBuildHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRecsList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRecsList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRec::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetReadWriteCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetAuthorizeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAuthorizeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSetSecurityOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSetSecurityOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSerializeData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSerializeData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetDataTypeLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetDataTypeLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetAttrDataLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclReadAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclReadAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_ReadAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ReadAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetAttrDataLengthUsingCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLengthUsingCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclReadAttrDataUsingCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclReadAttrDataUsingCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclWriteAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclWriteAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclWriteAttrDataUsingCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclWriteAttrDataUsingCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclAuthorizeWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclAuthorizeWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInReadCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInReadCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInReadRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInWriteCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInWriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInWriteRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInWriteRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclProcessInReadCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclProcessInReadCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclProcessInWriteCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclProcessInWriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclRevertWriteUndividedCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclRevertWriteUndividedCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclProcessInWriteUndividedCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclProcessInWriteUndividedCmd

        END
// 4821 #endif // ZCL_WRITE
// 4822 
// 4823 #ifdef ZCL_DISCOVER
// 4824 /*********************************************************************
// 4825  * @fn      zclProcessInDiscAttrs
// 4826  *
// 4827  * @brief   Process the "Profile" Discover Attributes Commands
// 4828  *
// 4829  * @param   pInMsg - incoming message to process
// 4830  *
// 4831  * @return  TRUE if command processed. FALSE, otherwise.
// 4832  */
// 4833 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
// 4834 {
// 4835   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4836   zclAttrRec_t attrRec;
// 4837   uint16 attrID;
// 4838   uint8 numAttrs;
// 4839   uint8 i;
// 4840 
// 4841   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
// 4842 
// 4843   // Find out the number of attributes supported within the specified range
// 4844   for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
// 4845   {
// 4846     // finds the next attribute on this endpoint/cluster after the range.
// 4847     // attributes must be in numerical order in the list.
// 4848     if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4849     {
// 4850       break;
// 4851     }
// 4852   }
// 4853 
// 4854   numAttrs = i;  // store range of attributes in buffer
// 4855 
// 4856     // Process message for either attributes or extended attributes
// 4857   if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
// 4858   {
// 4859     zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4860   }
// 4861   else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
// 4862   {
// 4863     zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4864   }
// 4865 
// 4866   return TRUE;
// 4867 }
// 4868 
// 4869 /*********************************************************************
// 4870  * @fn      zclProcessInDiscAttrsCmd
// 4871  *
// 4872  * @brief   Process the Discover Attributes Command
// 4873  *
// 4874  * @param   pInMsg - incoming message to process
// 4875  *
// 4876  * @param   pDiscoverCmd - structure from requesting command
// 4877  *
// 4878  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4879  *
// 4880  * @return  none
// 4881  */
// 4882 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4883 {
// 4884   zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
// 4885   uint8 discComplete = TRUE;
// 4886   zclAttrRec_t attrRec;
// 4887   uint16 attrID;
// 4888   uint8 i;
// 4889 
// 4890   // Allocate space for the response command
// 4891   pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
// 4892                                                           + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
// 4893   if ( pDiscoverRsp == NULL )
// 4894   {
// 4895     return; // EMBEDDED RETURN
// 4896   }
// 4897 
// 4898   if ( numAttrs != 0 )
// 4899   {
// 4900     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4901     {
// 4902       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4903       {
// 4904         break; // should not happen, as numAttrs already calculated
// 4905       }
// 4906 
// 4907       pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
// 4908       pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
// 4909     }
// 4910 
// 4911     // Are there more attributes to be discovered?
// 4912     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4913     {
// 4914       discComplete = FALSE;
// 4915     }
// 4916   }
// 4917 
// 4918   pDiscoverRsp->discComplete = discComplete;
// 4919   pDiscoverRsp->numAttr = numAttrs;
// 4920 
// 4921   zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4922                                pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
// 4923                                true, pInMsg->hdr.transSeqNum );
// 4924   zcl_mem_free( pDiscoverRsp );
// 4925 
// 4926   return;
// 4927 }
// 4928 
// 4929 /*********************************************************************
// 4930  * @fn      zclProcessInDiscAttrsExtCmd
// 4931  *
// 4932  * @brief   Process the Discover Attributes Extended Command
// 4933  *
// 4934  * @param   pInMsg - incoming message to process
// 4935  *
// 4936  * @param   pDiscoverCmd - structure from requesting command
// 4937  *
// 4938  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4939  *
// 4940  * @return  none
// 4941  */
// 4942 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4943 {
// 4944   zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
// 4945   uint8 discComplete = TRUE;
// 4946   zclAttrRec_t attrRec;
// 4947   uint16 attrID;
// 4948   uint8 i;
// 4949 
// 4950     // Allocate space for the response command
// 4951   pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
// 4952                                                          + sizeof ( zclExtAttrInfo_t ) * numAttrs );
// 4953   if ( pDiscoverExtRsp == NULL )
// 4954   {
// 4955     return; // EMBEDDED RETURN
// 4956   }
// 4957 
// 4958 
// 4959   if ( numAttrs != 0 )
// 4960   {
// 4961     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4962     {
// 4963       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4964       {
// 4965         break; // Should not happen, as numAttrs already calculated
// 4966       }
// 4967 
// 4968       pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
// 4969       pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
// 4970       pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
// 4971     }
// 4972 
// 4973     // Are there more attributes to be discovered?
// 4974     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4975     {
// 4976       discComplete = FALSE;
// 4977     }
// 4978   }
// 4979 
// 4980   pDiscoverExtRsp->discComplete = discComplete;
// 4981   pDiscoverExtRsp->numAttr = numAttrs;
// 4982 
// 4983   zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4984                                pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
// 4985                                true, pInMsg->hdr.transSeqNum );
// 4986 
// 4987   zcl_mem_free( pDiscoverExtRsp );
// 4988 
// 4989   return;
// 4990 }
// 4991 
// 4992 /*********************************************************************
// 4993  * @fn      zclProcessInDiscCmd
// 4994  *
// 4995  * @brief   Process the "Profile" Discover Command
// 4996  *
// 4997  * @param   pInMsg - incoming message to process
// 4998  *
// 4999  * @return  TRUE if command processed. FALSE, otherwise.
// 5000  */
// 5001 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
// 5002 {
// 5003   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 5004   zclDiscoverCmdsCmdRsp_t cmdRsp;
// 5005   ZStatus_t status;
// 5006   zclCommandRec_t cmdRec;
// 5007   uint8 cmdID;
// 5008   uint8 i;
// 5009   uint8 j;
// 5010 
// 5011   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
// 5012 
// 5013   // Find out the number of commands supported within the specified range
// 5014   for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
// 5015   {
// 5016     if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 5017     {
// 5018       break;  // Command not supported
// 5019     }
// 5020   }
// 5021 
// 5022   // Allocate space for the response command
// 5023   cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
// 5024 
// 5025   if ( cmdRsp.pCmdID == NULL )
// 5026   {
// 5027     return FALSE; // EMBEDDED RETURN
// 5028   }
// 5029 
// 5030   if ( i != 0 )
// 5031   {
// 5032     for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
// 5033     {
// 5034       if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 5035       {
// 5036         break; // Attribute not supported
// 5037       }
// 5038 
// 5039       cmdRsp.pCmdID[j] = cmdRec.cmdID;
// 5040     }
// 5041   }
// 5042 
// 5043   // Are there more commands to be discovered?
// 5044   if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 5045   {
// 5046     cmdRsp.discComplete = FALSE;
// 5047   }
// 5048   else
// 5049   {
// 5050     cmdRsp.discComplete = TRUE;
// 5051   }
// 5052 
// 5053   // pass the command requested
// 5054   cmdRsp.cmdType = pInMsg->hdr.commandID;
// 5055 
// 5056   // store number of commands returned
// 5057   cmdRsp.numCmd = j;
// 5058 
// 5059   status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 5060                                       pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
// 5061                                       true, pInMsg->hdr.transSeqNum );
// 5062 
// 5063   zcl_mem_free( cmdRsp.pCmdID );
// 5064 
// 5065   if ( status == ZSuccess )
// 5066   {
// 5067     return TRUE;
// 5068   }
// 5069   else
// 5070   {
// 5071     return FALSE;
// 5072   }
// 5073 }
// 5074 
// 5075 #endif // ZCL_DISCOVER
// 5076 
// 5077 
// 5078 /*********************************************************************
// 5079 *********************************************************************/
// 
// 10 343 bytes in segment BANKED_CODE
//    300 bytes in segment BANK_RELAYS
//     92 bytes in segment CODE_C
//      4 bytes in segment XDATA_ROM_C
//     16 bytes in segment XDATA_Z
// 
//    392 bytes of CODE     memory
//      0 bytes of CONST    memory (+ 4 bytes shared)
// 10 343 bytes of HUGECODE memory
//     16 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
